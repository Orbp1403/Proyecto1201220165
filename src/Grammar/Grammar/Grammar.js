/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,18],$V2=[1,19],$V3=[1,20],$V4=[1,23],$V5=[1,22],$V6=[1,21],$V7=[1,12],$V8=[1,11],$V9=[1,9],$Va=[1,10],$Vb=[1,13],$Vc=[5,16,17,18,19,21,25,33,36,40,45,46,67],$Vd=[1,32],$Ve=[1,35],$Vf=[5,16,17,18,19,21,25,28,29,32,33,36,40,45,46,67],$Vg=[1,42],$Vh=[1,47],$Vi=[1,40],$Vj=[1,41],$Vk=[1,43],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,49],$Vp=[1,62],$Vq=[1,68],$Vr=[1,69],$Vs=[1,70],$Vt=[1,71],$Vu=[1,72],$Vv=[1,73],$Vw=[1,74],$Vx=[1,75],$Vy=[1,77],$Vz=[1,76],$VA=[1,78],$VB=[1,79],$VC=[8,23,28,30,36,43,48,49,50,51,52,53,54,55,56,57,58,59],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,99],$VI=[23,43],$VJ=[1,103],$VK=[8,23,28,30,36,38,43,48,49,50,51,52,53,54,55,56,57,58,59,65],$VL=[8,23,28,30,36,43,48,49,50,51,52,53,54,55],$VM=[8,28,36,38,43],$VN=[1,131],$VO=[8,23,28,30,36,43,48,49,50,51],$VP=[8,23,28,30,36,43,48,49,50,51,52,53,54,55,56,57],$VQ=[1,136],$VR=[1,169],$VS=[28,36],$VT=[5,16,17,18,19,21,25,28,29,32,33,35,36,40,45,46,67],$VU=[16,17,18,19,21,25,28,29,32,33,36,45,46,67],$VV=[28,29,32],$VW=[8,28,36,43];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"PYC":8,"Declaracion_type":9,"Llamada":10,"Asignacion":11,"Sentencias_control":12,"Sentenciaif":13,"Sentenciaswitch":14,"Sentenciawhile":15,"Sentenciadowhile":16,"Sentenciafor":17,"BREAK":18,"RETURN":19,"Expresion":20,"WHILE":21,"(":22,")":23,"InstruccionesSentencias":24,"SWITCH":25,"{":26,"Casos":27,"}":28,"CASE":29,"DP":30,"InstruccionSentencia":31,"DEFAULT":32,"IF":33,"SentenciaElse":34,"ELSE":35,"IDENTIFICADOR":36,"Listaatributos":37,"=":38,"Lvalorestype":39,"TYPE":40,"Latributostype":41,"TipoatributosType":42,",":43,"Tipo":44,"LET":45,"CONST":46,"NOT":47,"AND":48,"OR":49,"==":50,"!=":51,"<":52,">":53,"<=":54,">=":55,"-":56,"+":57,"*":58,"/":59,"NUMERO":60,"CADENA":61,"TRUE":62,"FALSE":63,"NULL":64,".":65,"Listaparam":66,"CONSOLE":67,"LOG":68,"STRING":69,"NUMBER":70,"BOOLEAN":71,"VOID":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",16:"Sentenciadowhile",17:"Sentenciafor",18:"BREAK",19:"RETURN",21:"WHILE",22:"(",23:")",25:"SWITCH",26:"{",28:"}",29:"CASE",30:"DP",32:"DEFAULT",33:"IF",35:"ELSE",36:"IDENTIFICADOR",38:"=",40:"TYPE",43:",",45:"LET",46:"CONST",47:"NOT",48:"AND",49:"OR",50:"==",51:"!=",52:"<",53:">",54:"<=",55:">=",56:"-",57:"+",58:"*",59:"/",60:"NUMERO",61:"CADENA",62:"TRUE",63:"FALSE",64:"NULL",65:".",67:"CONSOLE",68:"LOG",69:"STRING",70:"NUMBER",71:"BOOLEAN",72:"VOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[12,3],[15,5],[14,7],[14,6],[27,5],[27,4],[27,4],[27,3],[27,4],[27,3],[27,1],[13,5],[13,6],[34,2],[34,2],[24,3],[24,2],[31,3],[31,3],[31,2],[31,2],[31,2],[31,2],[31,1],[31,1],[11,5],[11,6],[11,4],[9,6],[41,5],[41,5],[41,4],[41,4],[41,4],[41,3],[42,1],[42,1],[7,6],[7,4],[7,4],[7,2],[7,8],[7,6],[7,4],[7,6],[7,4],[7,8],[7,6],[39,5],[39,4],[39,4],[39,3],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,2],[20,1],[20,1],[37,3],[37,2],[10,3],[10,4],[10,5],[10,6],[66,3],[66,1],[44,1],[44,1],[44,1],[44,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1]
    
break;
case 3: case 98:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6: case 14: case 82:

        this.$ = $$[$0-1];
    
break;
case 7: case 9: case 10: case 11: case 12: case 13: case 29: case 30: case 51: case 89:

        this.$ = $$[$0];
    
break;
case 8: case 52:

        this.$ = $$[$0]
    
break;
case 15:

    
    
break;
case 16:


    
break;
case 17:

        this.$ = new SentenciaWhile($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 18:

        this.$ = new SentenciaSwitch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 19:

        this.$ = new SentenciaSwitch($$[$0-3], null, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 20:

        $$[$0-4].push(new Caso($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = $$[$0-4];
    
break;
case 21:

        $$[$0-3].push(new Caso($$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = $$[$0-3]
    
break;
case 22:

        $$[$0-3].push(new CasoDef($$[$0], _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = $$[$0-3];
    
break;
case 23:

        $$[$0-2].push(new CasoDef(null, _$[$0-2].first_line, _$[$0-2].first_column));
        this.$ = $$[$0-2];
    
break;
case 24:

        this.$ = [new Caso($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column)];
    
break;
case 25:

        this.$ = [new Caso($$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column)];
    
break;
case 26:

        this.$ = [new CasoDef(null, _$[$0].first_line, _$[$0].first_column)];
    
break;
case 27:

        this.$ = new SentenciaIf($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 28:

        this.$ = new SentenciaIf($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 31:

        this.$ = new Cuerposentencia($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 32:

        this.$ = new Cuerposentencia(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 33:

        $$[$0-2].push($$[$0-1]);
        this.$ = $$[$0-2];
    
break;
case 34:

        $$[$0-2].push($$[$0-1])
        this.$ = $$[$0-2];
    
break;
case 35:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 36:

        $$[$0-1].push($$[$0])
        this.$ = $$[$0-1]
    
break;
case 37: case 38:

        this.$ = [$$[$0-1]]
    
break;
case 39: case 40:

        this.$ = [$$[$0]]
    
break;
case 42:

        this.$ = new AsignacionVarType($$[$0-5], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 43:

        this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 44:

        this.$ = new DeclaracionTipos($$[$0-4], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
    
break;
case 45: case 46:

        $$[$0-4].push(new VariablesTipo($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column))
        this.$ = $$[$0-4];
    
break;
case 47:

        $$[$0-3].push(new VariablesTipo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = $$[$0-3];
    
break;
case 48: case 49:

        this.$ = [new VariablesTipo($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)];
    
break;
case 50:

        this.$ = [new VariablesTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)];
    
break;
case 53: case 58:

        this.$ = new Declaracion($$[$0-4], $$[$0], $$[$0-2], TiposSimbolo.VAR, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 54:

        this.$ = new Declaracion($$[$0-2], $$[$0], null, TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 55: case 59:

        this.$ = new Declaracion($$[$0-2], null, $$[$0], TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 56:

        this.$ = new Declaracion($$[$0], null, null, TiposSimbolo.VAR, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 57:

        this.$ = new DeclaracionVarType($$[$0-6], $$[$0-1], $$[$0-4], TiposSimbolo.VAR, _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 60: case 63:

        this.$ = new Declaracion($$[$0-4], $$[$0], $$[$0-2], TiposSimbolo.CONST, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 61:

        this.$ = new Declaracion($$[$0-2], $$[$0], null, TiposSimbolo.CONST, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 62:

        this.$ = new DeclaracionVarType($$[$0-7], $$[$0-1], $$[$0-4], TiposSimbolo.CONST, _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 64:

        $$[$0-4].push(new ValoresTipo($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = $$[$0-4];
    
break;
case 65:

        $$[$0-3].push(new ValoresTipo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = $$[$0-3];
    
break;
case 66:

        this.$ = [new ValoresTipo($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)];
    
break;
case 67:

        this.$ = [new ValoresTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)];
    
break;
case 68:

        this.$ = new Relacional($$[$0], null, OperacionesLogicas.NEGADO, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 69:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.AND, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 70:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.OR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 71:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 72:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.NOIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 73:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 74:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 75:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 76:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 77:

        this.$ = new Aritmeticas($$[$0], null, OpcionesAritmeticas.NEGATIVO, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 78:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 79:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 80:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.POR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 81:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 83:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 84:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 85: case 86:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 87:

        this.$ = new Variable($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 88:

        let a = $$[$0-1]
        a.concat("." + $$[$0]);
        this.$ = new Variable($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 90:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 3)
    
break;
case 91:

        let aux = $$[$0-2];
        aux.concat("." + $$[$0]);
        this.$ = aux;
    
break;
case 92:

        let p = ".";
        p.concat($$[$0]);
        this.$ = p;
    
break;
case 93:

        this.$ = new Llamada($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 94:

        this.$ = new Llamada($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 95:

        this.$ = new Imprimir([], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 96:

        this.$ = new Imprimir($$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 97:

        $$[$0-2].push($$[$0])
        this.$ = $$[$0-2];
    
break;
case 99:

        this.$ = Type.CADENA;
    
break;
case 100:

        this.$ = Type.NUMERO;
    
break;
case 101:

        this.$ = Type.BOOLEANO
    
break;
case 102:

        this.$ = Type.VOID;
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:14,14:15,15:16,16:$V0,17:$V1,18:$V2,19:$V3,21:$V4,25:$V5,33:$V6,36:$V7,40:$V8,45:$V9,46:$Va,67:$Vb},{1:[3]},{5:[1,24],6:25,7:4,9:5,10:6,11:7,12:8,13:14,14:15,15:16,16:$V0,17:$V1,18:$V2,19:$V3,21:$V4,25:$V5,33:$V6,36:$V7,40:$V8,45:$V9,46:$Va,67:$Vb},o($Vc,[2,3]),{8:[1,26]},{8:[1,27]},{8:[1,28]},o($Vc,[2,7]),o($Vc,[2,8]),{36:[1,29]},{36:[1,30]},{36:[1,31]},{22:$Vd,37:33,38:[1,34],65:$Ve},{65:[1,36]},o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),{8:[1,37]},{8:[1,38],10:48,20:39,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{22:[1,50]},{22:[1,51]},{22:[1,52]},{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),{8:[2,56],30:[1,53],38:[1,54]},{30:[1,55],38:[1,56]},{38:[1,57]},{10:48,20:60,22:$Vg,23:[1,58],36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,66:59,67:$Vb},{38:[1,61],65:$Vp},{10:48,20:64,22:$Vg,26:[1,63],36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{36:[1,65]},{68:[1,66]},o($Vf,[2,14]),o($Vf,[2,15]),{8:[1,67],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB},{10:48,20:80,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{10:48,20:81,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{10:48,20:82,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},o($VC,[2,83]),o($VC,[2,84]),o($VC,[2,85]),o($VC,[2,86]),o($VC,[2,87],{37:83,22:$Vd,65:$Ve}),o($VC,[2,89]),o($VC,[2,90]),{10:48,20:84,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{10:48,20:85,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{10:48,20:86,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{36:[1,88],44:87,69:$VD,70:$VE,71:$VF,72:$VG},{10:48,20:93,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{36:[1,95],44:94,69:$VD,70:$VE,71:$VF,72:$VG},{10:48,20:96,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{26:[1,97]},o($VC,[2,93]),{23:[1,98],43:$VH},o($VI,[2,98],{48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB}),{10:48,20:100,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{36:[1,101]},{36:$VJ,39:102},{8:[1,104],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB},o($VK,[2,92]),{22:[1,105]},o($Vf,[2,16]),{10:48,20:106,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{10:48,20:107,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{10:48,20:108,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{10:48,20:109,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{10:48,20:110,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{10:48,20:111,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{10:48,20:112,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{10:48,20:113,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{10:48,20:114,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{10:48,20:115,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{10:48,20:116,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{10:48,20:117,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},o($VL,[2,68],{56:$Vy,57:$Vz,58:$VA,59:$VB}),o($VC,[2,77]),{23:[1,118],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB},o($VC,[2,88],{65:$Vp}),{23:[1,119],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB},{23:[1,120],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB},{23:[1,121],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB},{8:[2,55],38:[1,122]},{8:[2,59],38:[1,123]},o($VM,[2,99]),o($VM,[2,100]),o($VM,[2,101]),o($VM,[2,102]),{8:[2,54],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB},{38:[1,124]},{38:[1,125]},{8:[2,61],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB},{36:[1,127],41:126},o($VC,[2,94]),{10:48,20:128,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{8:[1,129],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB},o($VK,[2,91]),{28:[1,130],36:$VN},{30:[1,132]},o($Vf,[2,43]),{10:48,20:60,22:$Vg,23:[1,133],36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,66:134,67:$Vb},o([8,23,28,30,36,43,48,49],[2,69],{50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB}),o([8,23,28,30,36,43,49],[2,70],{48:$Vq,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB}),o($VO,[2,71],{52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB}),o($VO,[2,72],{52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB}),o($VL,[2,73],{56:$Vy,57:$Vz,58:$VA,59:$VB}),o($VL,[2,74],{56:$Vy,57:$Vz,58:$VA,59:$VB}),o($VL,[2,75],{56:$Vy,57:$Vz,58:$VA,59:$VB}),o($VL,[2,76],{56:$Vy,57:$Vz,58:$VA,59:$VB}),o($VP,[2,78],{58:$VA,59:$VB}),o($VP,[2,79],{58:$VA,59:$VB}),o($VC,[2,80]),o($VC,[2,81]),o($VC,[2,82]),{24:135,26:$VQ},{26:[1,137]},{24:138,26:$VQ},{10:48,20:139,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{26:[1,140],36:[1,141]},{10:48,20:142,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{26:[1,143],36:[1,144]},{28:[1,145],36:[1,146]},{30:[1,147]},o($VI,[2,97],{48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB}),o($Vf,[2,41]),{8:[1,148]},{30:[1,149]},{10:48,20:150,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},o($VC,[2,95]),{23:[1,151],43:$VH},o($Vf,[2,27],{34:152,35:[1,153]}),{7:156,10:157,11:158,12:159,13:14,14:15,15:16,16:$V0,17:$V1,18:$V2,19:$V3,21:$V4,25:$V5,28:[1,155],31:154,33:$V6,36:$V7,45:$V9,46:$Va,67:$Vb},{27:160,28:[1,161],29:[1,162],32:[1,163]},o($Vf,[2,17]),{8:[2,53],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB},{36:$VJ,39:164},{8:[2,58]},{8:[2,60],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB},{36:$VJ,39:165},{8:[2,63]},{8:[2,44]},{30:[1,166]},{36:$VR,42:167,44:168,69:$VD,70:$VE,71:$VF,72:$VG},o($Vf,[2,42]),{10:48,20:170,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},o($VS,[2,67],{43:[1,171],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB}),o($VC,[2,96]),o($Vf,[2,28]),{13:172,24:173,26:$VQ,33:$V6},{7:175,10:176,11:177,12:178,13:14,14:15,15:16,16:$V0,17:$V1,18:$V2,19:$V3,21:$V4,25:$V5,28:[1,174],33:$V6,36:$V7,45:$V9,46:$Va,67:$Vb},o($VT,[2,32]),{8:[1,179]},{8:[1,180]},o($VU,[2,39]),o($VU,[2,40]),{28:[1,181],29:[1,182],32:[1,183]},o($Vf,[2,19]),{10:48,20:184,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},o($VV,[2,26]),{28:[1,185],36:$VN},{28:[1,186],36:$VN},{36:$VR,42:187,44:168,69:$VD,70:$VE,71:$VF,72:$VG},o($VS,[2,50],{8:[1,189],43:[1,188]}),o($VW,[2,51]),o($VW,[2,52]),o($VS,[2,65],{43:[1,190],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB}),o($VS,[2,66]),o($Vf,[2,29]),o($Vf,[2,30]),o($VT,[2,31]),{8:[1,191]},{8:[1,192]},o($VU,[2,35]),o($VU,[2,36]),o($VU,[2,37]),o($VU,[2,38]),o($Vf,[2,18]),{10:48,20:193,22:$Vg,36:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,67:$Vb},{30:[1,194]},{30:[1,195],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB},{8:[2,57]},{8:[2,62]},o($VS,[2,47],{8:[1,197],43:[1,196]}),o($VS,[2,48]),o($VS,[2,49]),o($VS,[2,64]),o($VU,[2,33]),o($VU,[2,34]),{30:[1,198],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB},o($VV,[2,23],{13:14,14:15,15:16,7:156,10:157,11:158,12:159,31:199,16:$V0,17:$V1,18:$V2,19:$V3,21:$V4,25:$V5,33:$V6,36:$V7,45:$V9,46:$Va,67:$Vb}),o($VV,[2,25],{13:14,14:15,15:16,7:156,10:157,11:158,12:159,31:200,16:$V0,17:$V1,18:$V2,19:$V3,21:$V4,25:$V5,33:$V6,36:$V7,45:$V9,46:$Va,67:$Vb}),o($VS,[2,45]),o($VS,[2,46]),o($VV,[2,21],{13:14,14:15,15:16,7:156,10:157,11:158,12:159,31:201,16:$V0,17:$V1,18:$V2,19:$V3,21:$V4,25:$V5,33:$V6,36:$V7,45:$V9,46:$Va,67:$Vb}),o($VV,[2,22],{13:14,14:15,15:16,7:175,10:176,11:177,12:178,16:$V0,17:$V1,18:$V2,19:$V3,21:$V4,25:$V5,33:$V6,36:$V7,45:$V9,46:$Va,67:$Vb}),o($VV,[2,24],{13:14,14:15,15:16,7:175,10:176,11:177,12:178,16:$V0,17:$V1,18:$V2,19:$V3,21:$V4,25:$V5,33:$V6,36:$V7,45:$V9,46:$Va,67:$Vb}),o($VV,[2,20],{13:14,14:15,15:16,7:175,10:176,11:177,12:178,16:$V0,17:$V1,18:$V2,19:$V3,21:$V4,25:$V5,33:$V6,36:$V7,45:$V9,46:$Va,67:$Vb})],
defaultActions: {24:[2,1],141:[2,58],144:[2,63],145:[2,44],185:[2,57],186:[2,62]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Aritmeticas } = require('../Expresiones/Aritmeticas');
    const { OpcionesAritmeticas } = require('../Expresiones/Opcionesaritmeticas');
    const { Literal } = require('../Expresiones/Literal');
    const { TiposSimbolo, Simbolo } = require('../Entorno/Simbolo');
    const { Declaracion } = require('../Instrucciones/Declaracion');
    const { Type } = require('../Retorno'); 
    const { Variable } = require('../Expresiones/Variable');
    const { DeclaracionTipos } = require('../Instrucciones/DeclaracionTipos');
    const { VariablesTipo, ValoresTipo } = require('../Expresiones/VariablesTipo');
    const { Asignacion } = require('../Instrucciones/Asignacion');
    const { DeclaracionVarType } = require('../Instrucciones/DeclaracionVarType');
    const { AsignacionVarType } = require('../Instrucciones/AsignacionVarType');
    const { Llamada } = require('../Instrucciones/Llamada');
    const { Relacional, OperacionesLogicas } = require('../Expresiones/Relacional');
    const { Imprimir } = require('../Instrucciones/Imprimir');
    const { SentenciaIf } = require('../Instrucciones/SentenciaIf');
    const { Cuerposentencia } = require('../Instrucciones/Cuerposentencia');
    const { Caso } = require('../Instrucciones/Caso');
    const { CasoDef } = require('../Instrucciones/CasoDef');
    const { SentenciaSwitch } = require('../Instrucciones/SentenciaSwitch');
    const { SentenciaWhile } = require('../Instrucciones/SentenciaWhile');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 60
break;
case 5:return 61
break;
case 6:return 45
break;
case 7:return 46
break;
case 8:return 69
break;
case 9:return 70
break;
case 10:return 71
break;
case 11:return 72
break;
case 12:return 40
break;
case 13:return 64
break;
case 14:return 62
break;
case 15:return 63
break;
case 16:return 33
break;
case 17:return 35
break;
case 18:return 25
break;
case 19:return 29
break;
case 20:return 21
break;
case 21:return 'DO'
break;
case 22:return 'FOR'
break;
case 23:return 'IN'
break;
case 24:return 'OF'
break;
case 25:return 18
break;
case 26:return 'CONTINUE'
break;
case 27:return 19
break;
case 28:return 'FUNCTION'
break;
case 29:return 67
break;
case 30:return 68
break;
case 31:return 'GRAFICAR_TS'
break;
case 32:return 32
break;
case 33:return 30
break;
case 34:return 8
break;
case 35:return 48
break;
case 36:return 49
break;
case 37:return 47
break;
case 38:return '%'
break;
case 39:return '**'
break;
case 40:return 54
break;
case 41:return 55
break;
case 42:return 50
break;
case 43:return 51
break;
case 44:return 52
break;
case 45:return 53
break;
case 46:return 38
break;
case 47:return 57
break;
case 48:return 56
break;
case 49:return 58
break;
case 50:return 59
break;
case 51:return 65
break;
case 52:return 22
break;
case 53:return 23
break;
case 54:return 43
break;
case 55:return 26
break;
case 56:return 28
break;
case 57:return 36;
break;
case 58:return 5;
break;
case 59: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:(("[^\"]*")|(`[^"`"]*`)))/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:default\b)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:%)/,/^(?:\*\*)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:["_" | a-z | A-Z]["_" | a-z | A-Z|0-9]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
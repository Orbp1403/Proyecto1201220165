/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,31],$V2=[1,32],$V3=[1,33],$V4=[1,41],$V5=[1,16],$V6=[1,11],$V7=[1,21],$V8=[1,40],$V9=[1,39],$Va=[1,38],$Vb=[1,37],$Vc=[1,13],$Vd=[1,12],$Ve=[1,14],$Vf=[1,15],$Vg=[1,17],$Vh=[1,18],$Vi=[1,19],$Vj=[1,20],$Vk=[1,23],$Vl=[1,35],$Vm=[1,36],$Vn=[1,34],$Vo=[2,5,20,21,22,26,27,28,29,42,43,44,50,55,60,64,73,79,80,81,82,84,87,89,94],$Vp=[1,61],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,52],$Vw=[1,53],$Vx=[1,54],$Vy=[1,56],$Vz=[1,55],$VA=[1,57],$VB=[1,58],$VC=[1,59],$VD=[1,60],$VE=[1,63],$VF=[1,68],$VG=[8,19,24,25,29,32,58,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78],$VH=[8,24,65,66,67,68,69,70,71,72,73,74,75,76,77,78],$VI=[2,111],$VJ=[1,74],$VK=[1,75],$VL=[1,76],$VM=[1,77],$VN=[1,78],$VO=[1,79],$VP=[1,80],$VQ=[1,81],$VR=[1,82],$VS=[1,72],$VT=[1,83],$VU=[2,5,19,20,21,22,26,27,28,29,42,43,44,47,49,50,55,60,64,73,79,80,81,82,84,87,89,94],$VV=[1,95],$VW=[2,112],$VX=[1,120],$VY=[1,148],$VZ=[8,19,24,25,29,32,58,62,65,66,67,68],$V_=[8,19,24,25,29,32,58,62,65,66,67,68,69,70,71,72],$V$=[8,19,24,25,29,32,58,62,65,66,67,68,69,70,71,72,73,74],$V01=[8,19,24,25,29,32,58,62,65,66,67,68,69,70,71,72,73,74,75,76,77],$V11=[1,154],$V21=[1,155],$V31=[1,156],$V41=[1,157],$V51=[1,168],$V61=[1,171],$V71=[32,58],$V81=[8,19,25,29,32,58,62],$V91=[8,19,24,25,29,30,32,58,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85],$Va1=[1,176],$Vb1=[1,187],$Vc1=[2,5,19,20,21,22,26,27,28,29,42,43,44,47,49,50,52,55,60,64,73,79,80,81,82,84,87,89,94],$Vd1=[2,19,20,21,22,26,27,28,29,42,43,44,47,49,50,60,64,73,79,80,81,82,84,87,89],$Ve1=[8,19,29,30,32,45,58,61],$Vf1=[1,204],$Vg1=[1,240],$Vh1=[1,260],$Vi1=[19,29],$Vj1=[1,266],$Vk1=[8,19,29,58],$Vl1=[1,301],$Vm1=[1,319],$Vn1=[1,320],$Vo1=[1,321],$Vp1=[1,318],$Vq1=[1,310],$Vr1=[1,291],$Vs1=[1,306],$Vt1=[1,317],$Vu1=[1,316],$Vv1=[1,315],$Vw1=[1,314],$Vx1=[1,292],$Vy1=[1,302],$Vz1=[1,303],$VA1=[1,304],$VB1=[1,305],$VC1=[1,307],$VD1=[1,308],$VE1=[1,309],$VF1=[1,312],$VG1=[1,313],$VH1=[19,47,49],$VI1=[1,349],$VJ1=[1,335],$VK1=[1,336],$VL1=[1,337],$VM1=[1,338],$VN1=[1,339],$VO1=[1,340],$VP1=[1,341],$VQ1=[1,342],$VR1=[1,344],$VS1=[1,343],$VT1=[1,345],$VU1=[1,346],$VV1=[1,347],$VW1=[1,348],$VX1=[8,19,24,25,29,30,32,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78],$VY1=[1,369],$VZ1=[1,388],$V_1=[58,62],$V$1=[1,418],$V02=[8,19,24,25,29,30,32,58,65,66,67,68],$V12=[8,19,24,25,29,30,32,58,65,66,67,68,69,70,71,72],$V22=[8,19,24,25,29,30,32,58,65,66,67,68,69,70,71,72,73,74],$V32=[8,19,24,25,29,30,32,58,65,66,67,68,69,70,71,72,73,74,75,76,77],$V42=[1,449],$V52=[8,19,25,29,30,32,58],$V62=[1,499],$V72=[1,508],$V82=[1,509],$V92=[2,188];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"PYC":8,"Declaracion_type":9,"Expresion":10,"Asignacion":11,"Sentencias_control":12,"Funcion":13,"Sentenciaif":14,"Sentenciaswitch":15,"Sentenciawhile":16,"Sentenciadowhile":17,"Sentenciafor":18,"}":19,"BREAK":20,"CONTINUE":21,"RETURN":22,"SentenciaTernaria":23,"?":24,"DP":25,"FOR":26,"(":27,"LET":28,"IDENTIFICADOR":29,"=":30,"Aumento":31,")":32,"InstruccionesSentencias":33,"++":34,"--":35,"+=":36,"-=":37,"*=":38,"/=":39,"%=":40,"**=":41,"DO":42,"WHILE":43,"SWITCH":44,"{":45,"Casos":46,"CASE":47,"InstruccionSentencia":48,"DEFAULT":49,"IF":50,"SentenciaElse":51,"ELSE":52,"Listaatributos":53,"Lvalorestype":54,"TYPE":55,"Latributostype":56,"TipoatributosType":57,",":58,"Tipo":59,"CONST":60,"[":61,"]":62,"Valor_arreglo":63,"NOT":64,"AND":65,"OR":66,"==":67,"!=":68,"<":69,">":70,"<=":71,">=":72,"-":73,"+":74,"*":75,"/":76,"%":77,"**":78,"NUMERO":79,"CADENA":80,"TRUE":81,"FALSE":82,"Llamada":83,"NULL":84,".":85,"Listaparam":86,"CONSOLE":87,"LOG":88,"GRAFICAR_TS":89,"STRING":90,"NUMBER":91,"BOOLEAN":92,"VOID":93,"FUNCTION":94,"Funcion1":95,"Lparametrosfuncion":96,"Tipofuncion":97,"InstruccionesFuncion":98,"InstruccionesFuncion1":99,"Linstrucciones":100,"Instruccionfuncion":101,"Linstrucciones1":102,"Expresionesfuncion":103,"Instruccionfuncion1":104,"Llamadas_funcion":105,"Auxdeclaracion":106,"Auxdeclaracion4":107,"sentencia_if":108,"sentencia_switch":109,"sentencia_while":110,"sentencia_dowhile":111,"sentencia_for":112,"sentencia_break":113,"sentencia_continue":114,"Sentencia_return":115,"Auxdeclaracion5":116,"Auxdeclaracion6":117,"Auxdeclaracion1":118,"Auxdeclaracion2":119,"Auxdeclaracion3":120,"ValoresType":121,"Sentencia_return1":122,"sentencia_for1":123,"Lcasosswitch":124,"Lcasos":125,"Lcasos1":126,"Lcasos2":127,"sentencia_else":128,"sentencia_else1":129,"instruccionfuncion12":130,"Atributos":131,"Instruccionfuncion2":132,"Aumento_funcion":133,"Parametrosllamada":134,"Atributo":135,"Atributos1":136,"Parametrollamada":137,"Parametrosllamada1":138,"Valortype":139,"ValoresType1":140,"Parametro":141,"Auxparametros":142,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",19:"}",20:"BREAK",21:"CONTINUE",22:"RETURN",24:"?",25:"DP",26:"FOR",27:"(",28:"LET",29:"IDENTIFICADOR",30:"=",32:")",34:"++",35:"--",36:"+=",37:"-=",38:"*=",39:"/=",40:"%=",41:"**=",42:"DO",43:"WHILE",44:"SWITCH",45:"{",47:"CASE",49:"DEFAULT",50:"IF",52:"ELSE",55:"TYPE",58:",",60:"CONST",61:"[",62:"]",64:"NOT",65:"AND",66:"OR",67:"==",68:"!=",69:"<",70:">",71:"<=",72:">=",73:"-",74:"+",75:"*",76:"/",77:"%",78:"**",79:"NUMERO",80:"CADENA",81:"TRUE",82:"FALSE",84:"NULL",85:".",87:"CONSOLE",88:"LOG",89:"GRAFICAR_TS",90:"STRING",91:"NUMBER",92:"BOOLEAN",93:"VOID",94:"FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[12,2],[12,2],[12,3],[23,5],[18,12],[18,11],[31,2],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[17,7],[16,5],[15,7],[15,6],[46,5],[46,4],[46,4],[46,3],[46,4],[46,3],[46,2],[14,5],[14,6],[51,2],[51,2],[33,3],[33,2],[48,3],[48,2],[48,2],[48,3],[48,3],[48,2],[48,2],[48,1],[48,1],[48,2],[11,5],[11,7],[11,6],[11,4],[9,6],[56,5],[56,5],[56,4],[56,4],[56,4],[56,3],[57,1],[57,1],[7,6],[7,4],[7,4],[7,2],[7,8],[7,6],[7,4],[7,6],[7,4],[7,8],[7,6],[7,10],[63,3],[63,1],[54,5],[54,4],[54,4],[54,3],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,1],[10,1],[10,1],[10,1],[10,1],[10,2],[10,4],[10,1],[10,1],[10,1],[10,1],[53,3],[53,2],[83,3],[83,4],[83,5],[83,6],[83,3],[86,3],[86,1],[59,1],[59,1],[59,1],[59,1],[13,4],[95,5],[95,4],[97,1],[97,1],[98,2],[99,2],[99,1],[100,2],[102,1],[102,0],[101,3],[101,2],[101,3],[101,3],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,2],[101,2],[107,2],[107,3],[116,4],[116,3],[106,2],[106,1],[106,3],[118,2],[118,2],[119,1],[119,3],[120,1],[120,2],[117,4],[117,2],[115,2],[122,2],[122,1],[113,2],[114,2],[112,3],[123,10],[123,9],[111,7],[110,5],[109,6],[124,2],[124,1],[125,4],[125,3],[126,2],[126,1],[126,0],[127,1],[127,0],[108,6],[128,2],[128,0],[129,1],[129,1],[104,2],[104,0],[130,1],[130,3],[103,2],[103,3],[103,3],[103,3],[103,3],[103,3],[103,3],[103,3],[103,3],[103,2],[103,3],[103,3],[103,3],[103,3],[103,3],[103,3],[103,5],[103,1],[103,1],[103,1],[103,2],[103,3],[103,1],[103,1],[103,1],[103,3],[103,1],[133,2],[133,2],[133,3],[133,3],[133,3],[133,3],[133,3],[133,3],[105,5],[105,3],[132,1],[132,2],[131,2],[135,2],[136,1],[136,0],[134,2],[137,1],[138,2],[138,0],[121,2],[139,3],[140,2],[140,1],[140,0],[96,2],[141,3],[141,3],[142,2],[142,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "INICIO", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
        //$$[$0-1].nodo.addPadre(this.$.nodo)
        return this.$;
    
break;
case 2:

        $$[$0-1].instrucciones.push($$[$0].instrucciones)
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 3:

        this.$ = {
            instrucciones : [$$[$0].instrucciones],
            nodo : new Nodo(null, "INST", null)
        };
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 4: case 5: case 6:

        //this.$ = $$[$0-1];
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : $$[$0-1].nodo
        }
    
break;
case 7: case 9:

        //this.$ = $$[$0];
        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : $$[$0].nodo
        }
    
break;
case 8:

        //this.$ = $$[$0]
        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : $$[$0].nodo
        }
    
break;
case 11: case 12: case 13: case 14: case 15: case 114: case 139: case 146: case 147: case 148: case 149: case 150: case 151: case 152: case 153: case 156: case 163: case 164: case 168: case 189: case 194: case 195: case 196: case 226: case 239: case 243: case 247:

        this.$ = $$[$0];
    
break;
case 17: case 174:

        this.$ = {
            instrucciones : new Break(_$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Break", null, null)
        }
    
break;
case 18:

        this.$ = {
            instrucciones : new Continue(_$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Continue", null, null)
        }
    
break;
case 19:

        this.$ = {
            instrucciones : new SentenciaReturn(null, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Return", null, null)
        }
    
break;
case 20:

        this.$ = {
            instrucciones : new SentenciaReturn($$[$0-1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("Return", null, null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 21: case 216:

        this.$ = {
            instrucciones : new SentenciaTernaria($$[$0-4].instrucciones, $$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "Ternaria", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 22:

        this.$ = {
            instrucciones : new SentenciaFor(1, $$[$0-8], $$[$0-6].instrucciones, $$[$0-4].instrucciones, $$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-11].first_line, _$[$0-11].first_column) ,
            nodo : new Nodo(null, "For", null)
        }
        instruccion = new Nodo("=", null, null)
        instruccion.agregarHijos(new Nodo($$[$0-8], null, null));
        instruccion.agregarHijos($$[$0-6].nodo)
        this.$.nodo.agregarHijos(instruccion)
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(instruccion)
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 23:

        this.$ = {
            instrucciones : new SentenciaFor(0, $$[$0-8], $$[$0-6].instrucciones, $$[$0-4].instrucciones, $$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-10].first_line, _$[$0-10].first_column),
            nodo : new Nodo(null, "For", null)
        }
        instruccion = new Nodo("=", null, null);
        instruccion.agregarHijos(new Nodo($$[$0-8], null, null));
        instruccion.agregarHijos($$[$0-6].nodo)
        this.$.nodo.agregarHijos(instruccion);
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 24: case 227:

        this.$ = {
            instrucciones : new Incremento($$[$0-1], OpcionesAritmeticas.MAS, new Literal(1, _$[$0-1].first_line, _$[$0-1].first_column, 0), _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo(null, "Incremento", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos(new Nodo('++', null, null));
        
    
break;
case 25: case 228:

        this.$ = {
            instrucciones : new Incremento($$[$0-1], OpcionesAritmeticas.MENOS, new Literal(1, _$[$0-1].first_line, _$[$0-1].first_column, 0), _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo(null, "Incremento", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos(new Nodo('--', null, null));
    
break;
case 26: case 229:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.MAS, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("+=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 27: case 230:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.MENOS, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("-=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 28: case 231:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.POR, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("*=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 29: case 232:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.DIV, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column), 
            nodo : new Nodo("/=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 30: case 233:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.MODULO, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('%=', null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 31: case 234:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.POTENCIA, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('**=', null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 32:

        this.$ = {
            instrucciones : new SentenciaDowhile($$[$0-2].instrucciones, $$[$0-5].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo(null, "Do_while", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo)
        if($$[$0-5].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-5].nodo)
        }
        this.$.nodo.agregarHijos(instruccion)
    
break;
case 33:

        this.$ = {
            instrucciones : new SentenciaWhile($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "While", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 34:

        this.$ = {
            instrucciones : new SentenciaSwitch($$[$0-4].instrucciones, $$[$0-1].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo(null, "Switch", null) 
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 35:

        this.$ = {
            instrucciones : new SentenciaSwitch($$[$0-3].instrucciones, null, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Switch", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(instruccion)
    
break;
case 36:

        $$[$0-4].instrucciones.push(new Caso($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        };
        this.$.nodo.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 37:

        $$[$0-3].instrucciones.push(new Caso($$[$0-1].instrucciones, null, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = {
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        }
        this.$.nodo.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 38:

        $$[$0-3].instrucciones.push(new CasoDef($$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = {
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        };
        this.$.nodo.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(new Nodo(null, "Default", null))
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 39:

        $$[$0-2].instrucciones.push(new CasoDef(null, _$[$0-2].first_line, _$[$0-2].first_column));
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        };
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos(new Nodo("Default", null, null))
    
break;
case 40:

        this.$ = {
            instrucciones : [new Caso($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo(null, "Caso", null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 41:

        this.$ = {
            instrucciones : [new Caso($$[$0-1].instrucciones, null, _$[$0-2].first_line, _$[$0-2].first_column)],
            nodo : new Nodo(null, "Caso", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 42:

        this.$ = {
            instrucciones : [new CasoDef(null, _$[$0-1].first_line, _$[$0-1].first_column)],
            nodo : new Nodo(null, "Caso", null) 
        }
        this.$.nodo.agregarHijos(new Nodo("Default", null, null));
    
break;
case 43:

        this.$ = {
            instrucciones : new SentenciaIf($$[$0-2].instrucciones, $$[$0].instrucciones, null, _$[$0-4].first_line, _$[$0-4].first_column), 
            nodo : new Nodo(null, "IF", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos(instruccion);
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo);
        }
    
break;
case 44:

        this.$ = {
            instrucciones : new SentenciaIf($$[$0-3].instrucciones, $$[$0-1].instrucciones, $$[$0].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "IF", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0-1].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-1].nodo)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 45:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "ELSE", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 46:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "ELSE", null)
        }
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo);
        }
    
break;
case 47:

        this.$ = {
            instrucciones : new Cuerposentencia($$[$0-1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : $$[$0-1].nodo
        }
    
break;
case 48:

        this.$ = {
            instrucciones : new Cuerposentencia(new Array(), _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : null
        }
    
break;
case 49:

        $$[$0-2].instrucciones.push($$[$0-1].instrucciones);
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 50:

        $$[$0-1].instrucciones.push($$[$0].instrucciones);
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 51:

        $$[$0-1].instrucciones.push($$[$0].instrucciones)
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 52:

        $$[$0-2].instrucciones.push($$[$0-1].instrucciones)
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        };
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 54: case 55:

        this.$ = {
            instrucciones : [$$[$0-1].instrucciones],
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 56: case 57:

        this.$ = {
            instrucciones : [$$[$0].instrucciones],
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 59:

        this.$ = {
            instrucciones : new Asignacion($$[$0-4], $$[$0-3].instrucciones, $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo("Asignacion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 60:

        this.$ = {
            instrucciones : new AsignacionVarType($$[$0-6], $$[$0-5].instrucciones, $$[$0-2].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo("Asignacion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-6], null, null))
        this.$.nodo.agregarHijos($$[$0-5].nodo)
        $$[$0-3].nodo.agregarHijos($$[$0-2].nodo)
    
break;
case 61:

        this.$ = {
            instrucciones : new AsignacionVarType($$[$0-5], null, $$[$0-2].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo("Asignacion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-5], null, null));
        this.$.nodo.agregarHijos($$[$0-2].nodo)
    
break;
case 62:

        this.$ = {
            instrucciones : new Asignacion($$[$0-3], null, $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 63:

        this.$ = {
            instrucciones : new DeclaracionTipos($$[$0-4], $$[$0-1].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column), 
            nodo : new Nodo(null, "DECLARACION_TYPE", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 64:

        $$[$0-4].instrucciones.push(new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column))
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo(null, "Valor", null)
        };
        this.$.nodo.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null))
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 65:

        $$[$0-4].instrucciones.push(new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column))
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo(null, "Valor", null)
        }
        this.$.nodo.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null))
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 66:

        $$[$0-3].instrucciones.push(new VariablesTipo($$[$0-2], $$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = {
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo(null, "Valor", null)
        };
        this.$.nodo.agregarHijos($$[$0-3].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 67:

        this.$ = {
            instrucciones : [new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo(null, "Valor", null) 
        };
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 68:

        this.$ = {
            instrucciones : [new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo(null, "Valor", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 69:

        this.$ = {
            instrucciones : [new VariablesTipo($$[$0-2], $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)],
            nodo : new Nodo(null, "Valor", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 70:

        this.$ = {
            instrucciones : $$[$0],
            nodo : new Nodo(Type[$$[$0]], null, null)
        }
    
break;
case 71:

        this.$ = {
            instrucciones : $$[$0],
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 72:

        this.$ = {
            instrucciones :  new Declaracion($$[$0-4], $$[$0].instrucciones, $$[$0-2], TiposSimbolo.VAR, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo("DECLARACION", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0-2]], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null))
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 73:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], $$[$0].instrucciones, null, TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("DECLARACION", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 74:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], null, $$[$0], TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("Declaracion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0]], null, null));
    
break;
case 75:

        this.$ = {
            instrucciones : new Declaracion($$[$0], null, null, TiposSimbolo.VAR, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Declaracion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 76:

        this.$ = {
            instrucciones : new Declaracion($$[$0-6], $$[$0-1].instrucciones, $$[$0-4], TiposSimbolo.VAR, _$[$0-7].first_line, _$[$0-7].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-6], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 77:

        this.$ = {
            instrucciones : new Declaracion($$[$0-4], $$[$0].instrucciones, $$[$0-2], TiposSimbolo.VAR, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 78:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], null, $$[$0], TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
    
break;
case 79:

        this.$ = {
            instrucciones : new Declaracion($$[$0-4], $$[$0].instrucciones, $$[$0-2], TiposSimbolo.CONST, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0-2]], null, null))
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 80:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], $$[$0].instrucciones, null, TiposSimbolo.CONST, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        };
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 81:

        this.$ = {
            instrucciones : new Declaracion($$[$0-6], $$[$0-1].instrucciones, $$[$0-4], TiposSimbolo.CONST, _$[$0-7].first_line, _$[$0-7].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-6], null, null)) ;
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 82:

        this.$ = {
            instrucciones : new Declaracion($$[$0-4], $$[$0], $$[$0-2], TiposSimbolo.CONST, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 83:

        this.$ = {
            instrucciones : new Declaracion_Arreglo($$[$0-8], null, $$[$0-6], $$[$0-1].instrucciones, TiposSimbolo.VAR, _$[$0-9].first_line, _$[$0-9].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-8], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0-6]], null, null));
        this.$.nodo.agregarHijos(new Nodo("[]", null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 84:

        $$[$0-2].instrucciones.push($$[$0].instrucciones);
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 85:

        this.$ = {
            instrucciones : [$$[$0].instrucciones],
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 86:

        $$[$0-4].instrucciones.push(new ValoresTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null))
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 87:

        $$[$0-3].instrucciones.push(new ValoresTipo($$[$0-2], $$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = { 
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo("Valores", null, null)
        };
        this.$.nodo.agregarHijos($$[$0-3].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 88:

        this.$ = {
            instrucciones : [new ValoresTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 89:

        this.$ = {
            instrucciones : [new ValoresTipo($$[$0-2], $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)],
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 90: case 200:

        this.$ = {
            instrucciones : new Relacional($$[$0].instrucciones, null, OperacionesLogicas.NEGADO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('!', null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 91: case 201:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.AND, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('&&', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 92: case 202:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.OR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('||', null, null) 
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 93: case 203:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo ('==', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 94: case 204:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.NOIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('!=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 95: case 205:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MENOR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('<', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 96: case 206:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('>', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 97: case 207:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('<=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 98: case 208:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('>=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 99: case 209:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0].instrucciones, null, OpcionesAritmeticas.NEGATIVO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 100: case 210:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('+', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 101: case 211:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 102: case 212:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.POR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('*', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 103: case 213:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.DIV, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('/', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 104: case 214:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.MODULO, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('%', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 105: case 215:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('**', null, null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 106: case 137: case 182: case 225: case 238:

        this.$ = $$[$0-1];
    
break;
case 107: case 217:

        this.$ = {
            instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 108: case 218:

        if($$[$0].includes('\"'))
        {
            this.$ = {
                instrucciones : new Literal($$[$0].replace(/['"]+/g, ''), _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0].replace(/['"]+/g, ''), null, null)
            }
        }
        else if($$[$0].includes("'"))
        {
            this.$ = {
                instrucciones : new Literal($$[$0].replace(/["'"]+/g, ''), _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0].replace(/["'"]+/g, ''), null, null)
            }
        }
        else
        {
            this.$ = {
                instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0], null, null)
            }
        }
    
break;
case 109: case 110: case 222: case 223:

        this.$ = {
            instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 111: case 219:

        this.$ = {
            instrucciones : new Variable($$[$0], null, 7, _$[$0].first_line, _$[$0].first_column),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 112: case 220:

        this.$ = {
            instrucciones : new Variable($$[$0-1], $$[$0].instrucciones, 7, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo(null, 'EXP', null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 113:

        this.$ = {
            instrucciones : new Variable_arreglo($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo(null, 'EXP', null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos(new Nodo('[', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
        this.$.nodo.agregarHijos(new Nodo(']', null, null));
    
break;
case 115: case 224:

        this.$ = {
            instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 3),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 116: case 117: case 134: case 135: case 160: case 252:

        this.$ = $$[$0]
    
break;
case 118:

        $$[$0-2].instrucciones.push($$[$0]);
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, 'ATRIB', null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
        this.$ = $$[$0-2];
    
break;
case 119:

        this.$ = {
            instrucciones : [$$[$0]],
            nodo : new Nodo(null, 'ATRIB', null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 120:

        this.$ = {
            instrucciones : new Llamada($$[$0-2], new Array(), _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, 'Llamada', null)
        };
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
    
break;
case 121:

        this.$ = {
            instrucciones : new Llamada($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo(null, "Llamada", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 122:

        this.$ = {
            instrucciones : new Imprimir(new Array(), _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "Imprimir", null)
        }
    
break;
case 123:

        this.$ = {
            instrucciones : new Imprimir($$[$0-1].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column) ,
            nodo : new Nodo(null, "Imprimir", null)

        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 124: case 236:

        this.$ = {
            instrucciones : new GraficarTs(_$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "GraficarTs", null)
        }
    
break;
case 125:

        $$[$0-2].instrucciones.push($$[$0].instrucciones)
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Parametro", null)
        };
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 126:

        this.$ = {
            instrucciones : [$$[$0].instrucciones],
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 127:

        this.$ = Type.CADENA;
    
break;
case 128:

        this.$ = Type.NUMERO;
    
break;
case 129:

        this.$ = Type.BOOLEANO
    
break;
case 130:

        this.$ = Type.VOID;
    
break;
case 131:

        if($$[$0].parametros != null)
        {
            this.$ = {
                instrucciones : new Funcion($$[$0-2], $$[$0].instrucciones_f.instrucciones, $$[$0].parametros.instrucciones, $$[$0].tipo, _$[$0-3].first_line, _$[$0-3].first_column),
                nodo : new Nodo(null, "Funcion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
            this.$.nodo.agregarHijos($$[$0].parametros.nodo);
            if(isNaN($$[$0].tipo) == false)
            {
                this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
            }
            else
            {
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            }
            if($$[$0].instrucciones_f.nodo != null)
            {
                this.$.nodo.agregarHijos($$[$0].instrucciones_f.nodo)
            }
        }
        else
        {
            this.$ = {
                instrucciones : new Funcion($$[$0-2], $$[$0].instrucciones_f.instrucciones, new Array(), $$[$0].tipo, _$[$0-3].first_line, _$[$0-3].first_column),
                nodo : new Nodo(null, "Funcion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
            this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
            if($$[$0].instrucciones_f.nodo != null)
            {
                this.$.nodo.agregarHijos($$[$0].instrucciones_f.nodo)
            }
        }
    
break;
case 132:

        this.$ = {
            parametros : $$[$0-4],
            tipo : $$[$0-1],
            instrucciones_f : $$[$0]
        }
    
break;
case 133:

        this.$ = {
            parametros : null,
            tipo : $$[$0-1],
            instrucciones_f : $$[$0]
        }
    
break;
case 136:

        if($$[$0].instrucciones != null)
        {
            this.$ = {
                instrucciones : new Cuerposentencia($$[$0].instrucciones, _$[$0-1].linea, _$[$0-1].columna),
                nodo : $$[$0].nodo
            }
        }
        else
        {
            this.$ = $$[$0];
        }
    
break;
case 138:

        this.$ = {
            instrucciones : null,
            nodo : null
        };
    
break;
case 140:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length - 2].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 2].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 141:

        hermano = eval('$$');
        this.$ = {
            instrucciones : [hermano[hermano.length - 1].instrucciones],
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 142:

        if($$[$0-1].contenido.instrucciones != null)
        {
            if($$[$0-1].estype == false)
            {
                this.$ = {
                    instrucciones : new Asignacion($$[$0-2].instrucciones.nombre, $$[$0-2].instrucciones.atributos, $$[$0-1].contenido.instrucciones, $$[$0-2].instrucciones.linea, $$[$0-2].instrucciones.columna),
                    nodo : new Nodo("Asignacion", null, null)
                }
                this.$.nodo.agregarHijos($$[$0-2].nodo);
                this.$.nodo.agregarHijos($$[$0-1].contenido.nodo)
            }
            else
            {
                this.$ = {
                    instrucciones : new AsignacionVarType($$[$0-2].instrucciones.nombre, $$[$0-2].instrucciones.atributos, $$[$0-1].contenido.instrucciones, $$[$0-2].instrucciones.linea, $$[$0-2].instrucciones.columna),
                    nodo : new Nodo("Asignacion", null, null)
                }
                this.$.nodo.agregarHijos($$[$0-2].nodo)
                this.$.nodo.agregarHijos($$[$0-1].contenido.nodo)
            }
        }
        else
        {
            this.$ = $$[$0-2];
        }
    
break;
case 143:

        hermano = eval('$$');
        this.$ = hermano[hermano.length - 2];
    
break;
case 144:

        if($$[$0].estype == false){
            if($$[$0].valor == null && $$[$0].tipo == null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], null, null, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
            }
            else if($$[$0].valor == null && $$[$0].tipo != null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], null, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                if(isNaN($$[$0].tipo) == false)
                {
                    this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                }
                else
                {
                    this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
                }
            }
            else if($$[$0].valor != null && $$[$0].tipo != null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                if(isNaN($$[$0].tipo) == false)
                {
                    this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                }
                else
                {
                    this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
                }
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
            else if($$[$0].valor != null && $$[$0].tipo == null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, null, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo('=', null, null));
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
        else
        {
            if($$[$0].valor == null && $$[$0].tipo != null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], null, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            }
            else if($$[$0].valor != null && $$[$0].tipo != null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
    
break;
case 145:

        if($$[$0].estype == false)
        {
            if($$[$0].valor != null && $$[$0].tipo == null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, null, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
            else
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                this.$.nodo.agregarHijos(new Nodo('=', null, null));
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
        else
        {
            this.$ = {
                instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                nodo : new Nodo(null, "Declaracion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
            this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            this.$.nodo.agregarHijos(new Nodo('=', null, null))
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 157: case 162:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : null,
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 158:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 159:

        hermano = eval('$$');
        this.$ = $$[$0]
    
break;
case 161:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : null,
            tipo : null
        };
    
break;
case 165:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : null,
            tipo : hermano[hermano.length - 2]
        }
    
break;
case 166:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        };
    
break;
case 167:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : null,
            tipo : hermano[hermano.length - 2]
        }
    
break;
case 169:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : hermano[hermano.length - 3].instrucciones,
            tipo : hermano[hermano.length - 6],
            nodo : hermano[hermano.length - 3].nodo
        }
    
break;
case 170:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 171:

        this.$ = {
            instrucciones : new SentenciaReturn($$[$0].instrucciones, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Return", null, null)
        }
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 172:

        hermano = eval('$$');
        this.$ = {
            instrucciones : hermano[hermano.length - 2].instrucciones,
            nodo : hermano[hermano.length - 2].nodo
        };
    
break;
case 173: case 193:

        this.$ = {
            instrucciones : null,
            nodo : null
        }
    
break;
case 175:

        this.$ = {
            instrucciones : new Continue(_$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Continue", null, null)
        };
    
break;
case 176:

        this.$ = {
            instrucciones : new SentenciaFor($$[$0].declarado, $$[$0].id, $$[$0].valor_inicio.instrucciones, $$[$0].condicion.instrucciones, $$[$0].incremento.instrucciones, $$[$0].instrucciones.instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "For", null)
        }
        instruccion = new Nodo("=", null, null)
        instruccion.agregarHijos(new Nodo($$[$0].id, null, null))
        instruccion.agregarHijos($$[$0].valor_inicio.nodo)
        this.$.nodo.agregarHijos(instruccion);
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0].condicion.nodo)
        this.$.nodo.agregarHijos(instruccion)
        this.$.nodo.agregarHijos($$[$0].incremento.nodo)
        if($$[$0].instrucciones.nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].instrucciones.nodo)
        }
    
break;
case 177:

        this.$ = {
            id : $$[$0-8],
            valor_inicio : $$[$0-6],
            condicion : $$[$0-4],
            incremento : $$[$0-2],
            instrucciones : $$[$0],
            declarado : 1
        }
    
break;
case 178:

        this.$ = {
            id : $$[$0-8],
            valor_inicio : $$[$0-6],
            condicion : $$[$0-4],
            incremento : $$[$0-2],
            instrucciones : $$[$0],
            declarado : 0
        }
    
break;
case 179:

        this.$ = {
            instrucciones : new SentenciaDowhile($$[$0-2].instrucciones, $$[$0-5].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo(null, "Do_while", null)
        }
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-2].nodo)
        if($$[$0-5].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-5].nodo)
        }
        this.$.nodo.agregarHijos(instruccion)
    
break;
case 180:

        this.$ = {
            instrucciones : new SentenciaWhile($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "While", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].nodo != null){
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 181:

        this.$ = {
            instrucciones : new SentenciaSwitch($$[$0-3].instrucciones, $$[$0].casos, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Switch", null)
        };
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].casos != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo_casos)
        }
    
break;
case 183:

        this.$ = {
            casos : null,
            nodo_casos : null
        };
    
break;
case 184:

        hermano = eval('$$');
        if(hermano[hermano.length - 1].casos == null)
        {
            this.$ = {
                casos : [new Caso($$[$0-2].instrucciones, hermano[hermano.length - 1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos($$[$0-2].nodo)
            if(hermano[hermano.length - 1].instrucciones != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
        }
        else
        {
            hermano[hermano.length - 1].casos.unshift(new Caso($$[$0-2].instrucciones, hermano[hermano.length - 1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column))
            this.$ = {
                casos : hermano[hermano.length - 1].casos,
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos($$[$0-2].nodo);
            if(hermano[hermano.length - 1].nodo != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }            
            this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo_casos)
        }
    
break;
case 185:

        hermano = eval('$$');
        if(hermano[hermano.length - 1].casos == null)
        {
            this.$ = {
                casos : [new CasoDef(hermano[hermano.length - 1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)],
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos(new Nodo("Default", null, null));
            if(hermano[hermano.length - 1].instrucciones != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
        }
        else
        {
            hermano[hermano.length - 1].casos.unshift(new CasoDef(hermano[hermano.length - 1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column));
            this.$ = {
                casos : hermano[hermano.length - 1].casos,
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos(new Nodo("Default", null, null))
            if(hermano[hermano.length - 1].nodo != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
            this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo_casos)
        }
    
break;
case 186:

        hermano = eval('$$')
        if(hermano[hermano.length - 1] == null)
        {
            this.$ = {
                instrucciones : hermano[hermano.length - 2].instrucciones,
                casos : null,
                nodo : hermano[hermano.length - 2].nodo,
                nodo_casos : null
            }
        }
        else
        {
            this.$ = {
                instrucciones : hermano[hermano.length - 2].instrucciones,
                casos : hermano[hermano.length - 1].casos,
                nodo : hermano[hermano.length - 2].nodo,
                nodo_casos : hermano[hermano.length - 1].nodo_casos
            }
        }
        
    
break;
case 187:

        hermano = eval('$$');
        this.$ = {
            instrucciones : null,
            casos : hermano[hermano.length - 1].casos,
            nodo : null,
            nodo_casos : hermano[hermano.length - 1].nodo_casos
        }
    
break;
case 188:

        this.$ = {
            instrucciones : null,
            casos : null,
            nodo : null,
            nodo_casos : null
        }
    
break;
case 190:

        this.$ = null
    
break;
case 191:

        this.$ = {
            instrucciones : new SentenciaIf($$[$0-3].instrucciones, $$[$0-1].instrucciones, $$[$0].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "IF", null)
        };
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-3].nodo);
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0-1].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-1].nodo)
        }

        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 192:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "ELSE", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 197:

        this.$ = {
            contenido : {
                instrucciones : null
            }
            ,
            nodo : null
        };
    
break;
case 198:

        this.$ = {
            contenido : $$[$0],
            estype : false
        }
    
break;
case 199:

        this.$ = {
            contenido : $$[$0-1],
            estype : true
        }
    
break;
case 221:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Llamada($$[$0-2], hermano[hermano.length-1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "Llamada", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        if(hermano[hermano.length - 1].nodo != null)
        {
            this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
        }
    
break;
case 235:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Imprimir(hermano[hermano.length-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "Imprimir", null)
        }
        if(hermano[hermano.length - 1].nodo != null)
        {
            this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
        }
    
break;
case 237:

        hermano = eval('$$');
        this.$ = {
            instrucciones : [],
            nodo : null
        };
    
break;
case 240:

        this.$ = {
            instrucciones : $$[$0],
            nodo : new Nodo(null, "ATRIB", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 241:

        hermano = eval('$$');
        hermano[hermano.length-1].instrucciones.unshift(hermano[hermano.length - 2].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length-1].instrucciones,
            nodo : hermano[hermano.length - 2].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 242: case 246:

        hermano = eval('$$');
        this.$ = {
            instrucciones : [hermano[hermano.length-1].instrucciones],
            nodo : hermano[hermano.length - 1].nodo
        }
    
break;
case 244:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 245:

        hermano = eval('$$');
        hermano[hermano.length-1].instrucciones.unshift(hermano[hermano.length - 3].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length-1].instrucciones,
            nodo : hermano[hermano.length - 3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 248:

        this.$ = {
            instrucciones : new ValoresTipo($$[$0-2], $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 249:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length -3].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : hermano[hermano.length-3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 250:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length - 2].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : hermano[hermano.length -2].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 251: case 256:

        hermano = eval('$$');
        this.$ = {
            instrucciones : [hermano[hermano.length - 1].instrucciones],
            nodo : hermano[hermano.length - 1].nodo
        }
    
break;
case 253:

        this.$ = {
            instrucciones : new VariablesTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "Parametro", null) 
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0]], null, null));
    
break;
case 254:

        this.$ = {
            instrucciones : new VariablesTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
    
break;
case 255:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length - 3].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : hermano[hermano.length - 3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:26,15:27,16:28,17:29,18:30,20:$V1,21:$V2,22:$V3,23:25,26:$V4,27:$V5,28:$V6,29:$V7,31:24,42:$V8,43:$V9,44:$Va,50:$Vb,55:$Vc,60:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm,94:$Vn},{1:[3]},{2:$V0,5:[1,42],6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:26,15:27,16:28,17:29,18:30,20:$V1,21:$V2,22:$V3,23:25,26:$V4,27:$V5,28:$V6,29:$V7,31:24,42:$V8,43:$V9,44:$Va,50:$Vb,55:$Vc,60:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm,94:$Vn},o($Vo,[2,3]),{8:[1,44]},{8:[1,45]},{8:[1,46],24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($Vo,[2,7]),o($Vo,[2,8]),o($Vo,[2,9]),{8:[1,62],19:$VE},{29:[1,64]},{29:[1,65]},{29:[1,66]},{10:67,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:69,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:70,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},o($VG,[2,107]),o($VG,[2,108]),o($VG,[2,109]),o($VG,[2,110]),o($VH,$VI,{53:71,27:$VJ,30:[1,73],34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,61:$VS,85:$VT}),o($VG,[2,114]),o($VG,[2,115]),o($VG,[2,116]),o($VG,[2,117]),o($VU,[2,11]),o($VU,[2,12]),o($VU,[2,13]),o($VU,[2,14]),o($VU,[2,15]),{8:[1,84]},{8:[1,85]},{8:[1,86],10:87,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{29:[1,88]},{85:[1,89]},{27:[1,90]},{27:[1,91]},{27:[1,92]},{27:[1,93]},{33:94,45:$VV},{27:[1,96]},{1:[2,1]},o($Vo,[2,2]),o($Vo,[2,4]),o($Vo,[2,5]),o($Vo,[2,6]),{10:97,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:98,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:99,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:100,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:101,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:102,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:103,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:104,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:105,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:106,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:107,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:108,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:109,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:110,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:111,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},o($Vo,[2,10]),o($VU,[2,16]),{8:[2,75],25:[1,112],30:[1,113]},{25:[1,114],30:[1,115]},{30:[1,116]},o($VG,[2,90]),o($VG,$VI,{53:117,27:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,61:$VS,85:$VT}),o($VG,[2,99]),{24:$Vp,32:[1,118],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($VH,$VW,{30:[1,119],85:$VX}),{10:121,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:123,23:25,27:$V5,29:$VF,31:24,45:[1,122],64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:126,23:25,27:$V5,29:$VF,31:24,32:[1,124],64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,86:125,87:$Vl,89:$Vm},o($VG,[2,24]),o($VG,[2,25]),{10:127,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:128,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:129,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:130,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:131,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:132,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{29:[1,133]},o($VU,[2,17]),o($VU,[2,18]),o($VU,[2,19]),{8:[1,134],24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{27:[1,135]},{88:[1,136]},{32:[1,137]},{10:138,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:139,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:140,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{43:[1,141]},{2:$VY,7:144,10:145,11:146,12:147,14:26,15:27,16:28,17:29,18:30,19:[1,143],20:$V1,21:$V2,22:$V3,23:25,26:$V4,27:$V5,28:$V6,29:$V7,31:24,42:$V8,43:$V9,44:$Va,48:142,50:$Vb,60:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{28:[1,149],29:[1,150]},o([8,19,24,25,29,32,58,62,65,66],[2,91],{67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o([8,19,24,25,29,32,58,62,66],[2,92],{65:$Vq,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($VZ,[2,93],{69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($VZ,[2,94],{69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V_,[2,95],{73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V_,[2,96],{73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V_,[2,97],{73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V_,[2,98],{73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V$,[2,100],{75:$VA,76:$VB,77:$VC,78:$VD}),o($V$,[2,101],{75:$VA,76:$VB,77:$VC,78:$VD}),o($V01,[2,102],{78:$VD}),o($V01,[2,103],{78:$VD}),o($V01,[2,104],{78:$VD}),o($VG,[2,105]),{24:$Vp,25:[1,151],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{29:[1,153],59:152,90:$V11,91:$V21,92:$V31,93:$V41},{10:158,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{29:[1,160],59:159,90:$V11,91:$V21,92:$V31,93:$V41},{10:161,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{45:[1,162]},o($VG,$VW,{85:$VX}),o($VG,[2,106]),{10:163,23:25,27:$V5,29:$VF,31:24,45:[1,164],64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{29:[1,165]},{24:$Vp,62:[1,166],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{29:$V51,54:167},{8:[1,169],24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($VG,[2,120]),{32:[1,170],58:$V61},o($V71,[2,126],{24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V81,[2,26],{24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V81,[2,27],{24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V81,[2,28],{24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V81,[2,29],{24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V81,[2,30],{24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V81,[2,31],{24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V91,[2,119]),o($VU,[2,20]),{29:$Va1,32:[1,174],95:172,96:173,141:175},{27:[1,177]},o($VG,[2,124]),{24:$Vp,32:[1,178],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{24:$Vp,32:[1,179],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{24:$Vp,32:[1,180],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{27:[1,181]},{2:$Vb1,7:183,10:186,11:184,12:185,14:26,15:27,16:28,17:29,18:30,19:[1,182],20:$V1,21:$V2,22:$V3,23:25,26:$V4,27:$V5,28:$V6,29:$V7,31:24,42:$V8,43:$V9,44:$Va,50:$Vb,60:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},o($Vc1,[2,48]),{8:[1,188]},{8:[1,189],24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($Vd1,[2,56]),o($Vd1,[2,57]),{8:[1,190],19:$VE},{29:[1,191]},{30:[1,192]},{10:193,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{8:[2,74],30:[1,194],61:[1,195]},{8:[2,78],30:[1,196]},o($Ve1,[2,127]),o($Ve1,[2,128]),o($Ve1,[2,129]),o($Ve1,[2,130]),{8:[2,73],24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{30:[1,197]},{30:[1,198]},{8:[2,80],24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{29:[1,200],56:199},{8:[1,201],24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{29:$V51,54:202},o($V91,[2,118]),o($VG,[2,113]),{19:[1,203],29:$Vf1},{25:[1,205]},o($VU,[2,62]),o($VG,[2,121]),{10:206,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},o($Vo,[2,131]),{32:[1,207]},{25:[1,208]},{32:[2,256],58:[1,210],142:209},{25:[1,211]},{10:126,23:25,27:$V5,29:$VF,31:24,32:[1,212],64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,86:213,87:$Vl,89:$Vm},{33:214,45:$VV},{45:[1,215]},{33:216,45:$VV},{10:217,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},o($Vc1,[2,47]),{8:[1,218]},o($Vd1,[2,50]),o($Vd1,[2,51]),{8:[1,219],24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{8:[1,220],19:$VE},o($Vd1,[2,54]),o($Vd1,[2,55]),o($Vd1,[2,58]),{30:[1,221]},{10:222,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},o($V81,[2,21],{24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),{10:223,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{62:[1,224]},{10:226,23:25,27:$V5,29:$VF,31:24,45:[1,225],64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{10:227,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{29:[1,229],45:[1,228]},{19:[1,230],29:[1,231]},{25:[1,232]},o($VU,[2,59]),{19:[1,233],29:$Vf1},{8:[1,234]},{25:[1,235]},{10:236,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},o($V71,[2,125],{24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),{25:[1,237]},{29:$Vg1,59:239,90:$V11,91:$V21,92:$V31,93:$V41,97:238},{32:[2,252]},{29:$Va1,96:241,141:175},{29:[1,243],59:242,90:$V11,91:$V21,92:$V31,93:$V41},o($VG,[2,122]),{32:[1,244],58:$V61},o($VU,[2,43],{51:245,52:[1,246]}),{19:[1,248],46:247,47:[1,249],49:[1,250]},o($VU,[2,33]),{24:$Vp,32:[1,251],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($Vd1,[2,49]),o($Vd1,[2,52]),o($Vd1,[2,53]),{10:252,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{8:[1,253],24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{8:[2,72],24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{30:[1,254]},{29:$V51,54:255},{8:[2,77],24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{8:[2,79],24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{29:$V51,54:256},{8:[2,82]},{8:[2,63]},{25:[1,257]},{29:$Vh1,57:258,59:259,90:$V11,91:$V21,92:$V31,93:$V41},{8:[1,261]},o($VU,[2,61]),{10:262,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},o($Vi1,[2,89],{24:$Vp,58:[1,263],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),{29:$Vg1,59:239,90:$V11,91:$V21,92:$V31,93:$V41,97:264},{45:$Vj1,98:265},{45:[2,134]},{45:[2,135]},{32:[2,255]},o($V71,[2,253]),o($V71,[2,254]),o($VG,[2,123]),o($VU,[2,44]),{14:267,33:268,45:$VV,50:$Vb},{19:[1,269],47:[1,270],49:[1,271]},o($VU,[2,35]),{10:272,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{25:[1,273]},{8:[1,274]},{8:[1,275],24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{10:276,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{61:[1,277]},{19:[1,278],29:$Vf1},{19:[1,279],29:$Vf1},{29:$Vh1,57:280,59:259,90:$V11,91:$V21,92:$V31,93:$V41},o($Vi1,[2,69],{8:[1,282],58:[1,281]}),o($Vk1,[2,70]),o($Vk1,[2,71]),o($VU,[2,60]),o($Vi1,[2,87],{24:$Vp,58:[1,283],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($Vi1,[2,88]),{45:$Vj1,98:284},o($Vo,[2,133]),{2:$Vl1,19:[1,287],20:$Vm1,21:$Vn1,22:$Vo1,26:$Vp1,27:$Vq1,28:$Vr1,29:$Vs1,42:$Vt1,43:$Vu1,44:$Vv1,50:$Vw1,60:$Vx1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,87:$VF1,89:$VG1,99:285,100:286,101:288,103:289,105:290,108:293,109:294,110:295,111:296,112:297,113:298,114:299,115:300,133:311},o($VU,[2,45]),o($VU,[2,46]),o($VU,[2,34]),{10:322,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{25:[1,323]},{24:$Vp,25:[1,324],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($VH1,[2,42]),o($VU,[2,32]),{10:325,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{8:[1,326],24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{10:328,23:25,27:$V5,29:$VF,31:24,63:327,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},{8:[2,76]},{8:[2,81]},o($Vi1,[2,66],{8:[1,330],58:[1,329]}),o($Vi1,[2,67]),o($Vi1,[2,68]),o($Vi1,[2,86]),o($Vo,[2,132]),o($Vc1,[2,136]),{19:[1,331]},o($Vc1,[2,138]),o($VH1,[2,141],{101:288,103:289,105:290,108:293,109:294,110:295,111:296,112:297,113:298,114:299,115:300,133:311,102:332,100:333,2:$Vl1,20:$Vm1,21:$Vn1,22:$Vo1,26:$Vp1,27:$Vq1,28:$Vr1,29:$Vs1,42:$Vt1,43:$Vu1,44:$Vv1,50:$Vw1,60:$Vx1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,87:$VF1,89:$VG1}),{8:[2,197],24:$VI1,30:[1,350],65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1,104:334},{8:[1,351]},{29:[1,352]},{29:[1,353]},o($Vd1,[2,146]),o($Vd1,[2,147]),o($Vd1,[2,148]),o($Vd1,[2,149]),o($Vd1,[2,150]),o($Vd1,[2,151]),o($Vd1,[2,152]),o($Vd1,[2,153]),{8:[1,354],19:[1,355]},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:356,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:357,133:311},o($VX1,[2,217]),o($VX1,[2,218]),o($VX1,[2,219],{131:358,135:368,27:[1,359],34:[1,360],35:[1,361],36:[1,362],37:[1,363],38:[1,364],39:[1,365],40:[1,366],41:[1,367],85:$VY1}),o($VX1,[2,222]),o($VX1,[2,223]),o($VX1,[2,224]),{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:370,133:311},o($VX1,[2,226]),{85:[1,371]},{27:[1,372]},{27:[1,373]},{27:[1,374]},{27:[1,375]},{45:$Vj1,98:376},{27:[1,377]},{8:[1,378]},{8:[1,379]},{8:[1,382],27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:381,122:380,133:311},{24:$Vp,25:[1,383],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($VH1,[2,39],{83:22,31:24,23:25,14:26,15:27,16:28,17:29,18:30,7:144,10:145,11:146,12:147,48:384,2:$VY,20:$V1,21:$V2,22:$V3,26:$V4,27:$V5,28:$V6,29:$V7,42:$V8,43:$V9,44:$Va,50:$Vb,60:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,84:$Vk,87:$Vl,89:$Vm}),o($VH1,[2,41],{83:22,31:24,23:25,14:26,15:27,16:28,17:29,18:30,7:144,10:145,11:146,12:147,48:385,2:$VY,20:$V1,21:$V2,22:$V3,26:$V4,27:$V5,28:$V6,29:$V7,42:$V8,43:$V9,44:$Va,50:$Vb,60:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,84:$Vk,87:$Vl,89:$Vm}),{8:[1,386],24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{29:$VZ1,31:387},{58:[1,390],62:[1,389]},o($V_1,[2,85],{24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($Vi1,[2,64]),o($Vi1,[2,65]),o($Vc1,[2,137]),o($VH1,[2,139]),o($VH1,[2,140]),{8:[1,391]},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:392,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:393,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:394,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:395,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:396,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:397,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:398,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:399,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:400,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:401,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:402,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:403,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:404,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:405,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:406,133:311},{27:$Vq1,29:$Vs1,45:[1,409],64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:408,130:407,133:311},o($Vd1,[2,143]),{8:[1,412],25:[1,411],30:[1,413],106:410},{25:[1,415],30:[1,416],107:414},o($Vd1,[2,154]),o($Vd1,[2,155]),o($VX1,[2,200]),o($VX1,[2,209]),o($VX1,[2,220]),{27:$Vq1,29:$Vs1,32:$V$1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:421,132:417,133:311,134:419,137:420},o($VX1,[2,227]),o($VX1,[2,228]),{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:422,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:423,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:424,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:425,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:426,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:427,133:311},o($VX1,[2,242],{135:368,136:428,131:429,85:$VY1}),{29:[1,430]},{24:$VI1,32:[1,431],65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},{88:[1,432]},{32:[1,433]},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:434,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:435,133:311},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:436,133:311},{43:[1,437]},{27:$Vq1,28:[1,439],29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:440,123:438,133:311},o($Vd1,[2,174]),o($Vd1,[2,175]),o($Vd1,[2,171]),{8:[1,441],24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},o($Vd1,[2,173]),o($VH1,[2,37],{83:22,31:24,23:25,14:26,15:27,16:28,17:29,18:30,7:144,10:145,11:146,12:147,48:442,2:$VY,20:$V1,21:$V2,22:$V3,26:$V4,27:$V5,28:$V6,29:$V7,42:$V8,43:$V9,44:$Va,50:$Vb,60:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,84:$Vk,87:$Vl,89:$Vm}),o($VH1,[2,38],{83:22,31:24,23:25,14:26,15:27,16:28,17:29,18:30,7:183,11:184,12:185,10:186,2:$Vb1,20:$V1,21:$V2,22:$V3,26:$V4,27:$V5,28:$V6,29:$V7,42:$V8,43:$V9,44:$Va,50:$Vb,60:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,84:$Vk,87:$Vl,89:$Vm}),o($VH1,[2,40],{83:22,31:24,23:25,14:26,15:27,16:28,17:29,18:30,7:183,11:184,12:185,10:186,2:$Vb1,20:$V1,21:$V2,22:$V3,26:$V4,27:$V5,28:$V6,29:$V7,42:$V8,43:$V9,44:$Va,50:$Vb,60:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,84:$Vk,87:$Vl,89:$Vm}),{29:$VZ1,31:443},{32:[1,444]},{34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR},{8:[2,83]},{10:445,23:25,27:$V5,29:$VF,31:24,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:22,84:$Vk,87:$Vl,89:$Vm},o($Vd1,[2,142]),o([8,19,24,25,29,30,32,58,65,66],[2,201],{67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o([8,19,24,25,29,30,32,58,66],[2,202],{65:$VJ1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o($V02,[2,203],{69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o($V02,[2,204],{69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o($V12,[2,205],{73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o($V12,[2,206],{73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o($V12,[2,207],{73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o($V12,[2,208],{73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o($V22,[2,210],{75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o($V22,[2,211],{75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o($V32,[2,212],{78:$VW1}),o($V32,[2,213],{78:$VW1}),o($V32,[2,214],{78:$VW1}),o($VX1,[2,215]),{24:$VI1,25:[1,446],65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},{8:[2,196]},{8:[2,198],24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},{29:$V42,121:447,139:448},o($Vd1,[2,144]),{29:[1,452],59:451,90:$V11,91:$V21,92:$V31,93:$V41,118:450},o($Vd1,[2,161]),{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:453,133:311},o($Vd1,[2,145]),{29:[1,456],59:455,90:$V11,91:$V21,92:$V31,93:$V41,116:454},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:457,133:311},o($VX1,[2,221]),o($VX1,[2,237]),{32:[1,458]},{32:[2,246],58:[1,460],138:459},o($V71,[2,244],{24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o($V52,[2,229],{24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o($V52,[2,230],{24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o($V52,[2,231],{24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o($V52,[2,232],{24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o($V52,[2,233],{24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o($V52,[2,234],{24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),o($VX1,[2,239]),o($VX1,[2,241]),o([8,19,24,25,29,30,32,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85],[2,240]),o($VX1,[2,225]),{27:[1,461]},{8:[2,236]},{24:$VI1,32:[1,462],65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},{24:$VI1,32:[1,463],65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},{24:$VI1,32:[1,464],65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},{27:[1,465]},o($Vd1,[2,176]),{29:[1,466]},{24:$VI1,30:[1,467],65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},o($Vd1,[2,172]),o($VH1,[2,36],{83:22,31:24,23:25,14:26,15:27,16:28,17:29,18:30,7:183,11:184,12:185,10:186,2:$Vb1,20:$V1,21:$V2,22:$V3,26:$V4,27:$V5,28:$V6,29:$V7,42:$V8,43:$V9,44:$Va,50:$Vb,60:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,84:$Vk,87:$Vl,89:$Vm}),{32:[1,468]},{33:469,45:$VV},o($V_1,[2,84],{24:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:470,133:311},{19:[1,471]},{19:[2,251],29:$V42,58:[1,473],121:474,139:448,140:472},{25:[1,475]},o($Vd1,[2,160]),{8:[1,477],30:[1,478],119:476},{8:[1,480],30:[1,481],120:479},{8:[1,482],24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},o($Vd1,[2,156]),{30:[1,483]},{30:[1,484]},{8:[1,485],24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},o($VX1,[2,238]),{32:[2,243]},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:421,133:311,134:486,137:420},{27:$Vq1,29:$Vs1,32:$V$1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:421,132:487,133:311,134:419,137:420},{45:$Vj1,98:488},{45:[1,489]},{45:$Vj1,98:490},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:491,133:311},{30:[1,492]},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:493,133:311},{33:494,45:$VV},o($VU,[2,23]),o($V52,[2,216],{24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),{8:[2,199]},{19:[2,247]},{29:$V42,121:495,139:448},{19:[2,250]},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:496,133:311},o($Vd1,[2,163]),o($Vd1,[2,165]),{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:497,133:311},o($Vd1,[2,164]),o($Vd1,[2,167]),{27:$Vq1,29:$Vs1,45:$V62,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:500,117:498,133:311},o($Vd1,[2,162]),{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:501,133:311},{27:$Vq1,29:$Vs1,45:$V62,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:500,117:502,133:311},o($Vd1,[2,157]),{32:[2,245]},{8:[2,235]},o($Vd1,[2,193],{128:503,52:[1,504]}),{19:[1,507],47:$V72,49:$V82,124:505,125:506},o($Vd1,[2,180]),{24:$VI1,32:[1,510],65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:511,133:311},{8:[1,512],24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},o($VU,[2,22]),{19:[2,249]},o([19,29,58],[2,248],{24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1}),{8:[1,513],24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},o($Vd1,[2,168]),{29:$V42,121:514,139:448},{8:[1,515],24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},{8:[1,516],24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},o($Vd1,[2,159]),o($Vd1,[2,191]),{45:$Vj1,50:$Vw1,98:519,108:518,129:517},o($Vd1,[2,181]),{19:[1,520]},o($Vd1,[2,183]),{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:521,133:311},{25:[1,522]},{8:[1,523]},{8:[1,524],24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:525,133:311},o($Vd1,[2,166]),{19:[1,526]},o($Vd1,[2,170]),o($Vd1,[2,158]),o($Vd1,[2,192]),o($Vd1,[2,194]),o($Vd1,[2,195]),o($Vd1,[2,182]),{24:$VI1,25:[1,527],65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},{2:$Vl1,19:$V92,20:$Vm1,21:$Vn1,22:$Vo1,26:$Vp1,27:$Vq1,28:$Vr1,29:$Vs1,42:$Vt1,43:$Vu1,44:$Vv1,47:$V72,49:$V82,50:$Vw1,60:$Vx1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,87:$VF1,89:$VG1,100:529,101:288,103:289,105:290,108:293,109:294,110:295,111:296,112:297,113:298,114:299,115:300,125:530,126:528,133:311},o($Vd1,[2,179]),{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:531,133:311},{8:[1,532],24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},{8:[1,533]},{2:$Vl1,19:$V92,20:$Vm1,21:$Vn1,22:$Vo1,26:$Vp1,27:$Vq1,28:$Vr1,29:$Vs1,42:$Vt1,43:$Vu1,44:$Vv1,47:$V72,49:$V82,50:$Vw1,60:$Vx1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,87:$VF1,89:$VG1,100:529,101:288,103:289,105:290,108:293,109:294,110:295,111:296,112:297,113:298,114:299,115:300,125:530,126:534,133:311},{19:[2,185]},{19:[2,190],47:$V72,49:$V82,125:536,127:535},{19:[2,187]},{8:[1,537],24:$VI1,65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:538,133:311},o($Vd1,[2,169]),{19:[2,184]},{19:[2,186]},{19:[2,189]},{27:$Vq1,29:$Vs1,64:$Vy1,73:$Vz1,79:$VA1,80:$VB1,81:$VC1,82:$VD1,84:$VE1,103:539,133:311},{24:$VI1,32:[1,540],65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},{24:$VI1,32:[1,541],65:$VJ1,66:$VK1,67:$VL1,68:$VM1,69:$VN1,70:$VO1,71:$VP1,72:$VQ1,73:$VR1,74:$VS1,75:$VT1,76:$VU1,77:$VV1,78:$VW1},{45:$Vj1,98:542},{45:$Vj1,98:543},o($Vd1,[2,178]),o($Vd1,[2,177])],
defaultActions: {42:[2,1],209:[2,252],229:[2,82],230:[2,63],239:[2,134],240:[2,135],241:[2,255],278:[2,76],279:[2,81],389:[2,83],407:[2,196],433:[2,236],459:[2,243],471:[2,199],472:[2,247],474:[2,250],486:[2,245],487:[2,235],495:[2,249],528:[2,185],530:[2,187],534:[2,184],535:[2,186],536:[2,189]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
        let textoerror = "Se encontro: " + hash.text + ", se esperaba: ";
        for(let i = 0; i < hash.expected.length; i++)
        {
            if(i != hash.expected.length - 1)
            {
                textoerror += hash.expected[i] + ",";
            }
            else
            {
                textoerror += hash.expected[i];
            }
        }
    
        lerrores.push(new _Error(hash.loc.first_line, hash.loc.last_column + 1, "Sintactico", textoerror));
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
 let hermano = null; 
    let instruccion, nodo = null;
    let errores = null;

    exports.inicioerrores = function(){
        errores = new Array();
    }

    exports.geterrores = function () { 
        return errores 
    };

    const { Aritmeticas } = require('../Expresiones/Aritmeticas');
    const { OpcionesAritmeticas } = require('../Expresiones/Opcionesaritmeticas');
    const { Literal } = require('../Expresiones/Literal');
    const { TiposSimbolo, Simbolo } = require('../Entorno/Simbolo');
    const { Declaracion } = require('../Instrucciones/Declaracion');
    const { Type } = require('../Retorno'); 
    const { Variable } = require('../Expresiones/Variable');
    const { DeclaracionTipos } = require('../Instrucciones/DeclaracionTipos');
    const { VariablesTipo, ValoresTipo } = require('../Expresiones/VariablesTipo');
    const { Asignacion } = require('../Instrucciones/Asignacion');
    const { DeclaracionVarType } = require('../Instrucciones/DeclaracionVarType');
    const { AsignacionVarType } = require('../Instrucciones/AsignacionVarType');
    const { Llamada } = require('../Instrucciones/Llamada');
    const { Relacional, OperacionesLogicas } = require('../Expresiones/Relacional');
    const { Imprimir } = require('../Instrucciones/Imprimir');
    const { SentenciaIf } = require('../Instrucciones/SentenciaIf');
    const { Cuerposentencia } = require('../Instrucciones/Cuerposentencia');
    const { Caso } = require('../Instrucciones/Caso');
    const { CasoDef } = require('../Instrucciones/CasoDef');
    const { SentenciaSwitch } = require('../Instrucciones/SentenciaSwitch');
    const { SentenciaWhile } = require('../Instrucciones/SentenciaWhile');
    const { SentenciaDowhile } = require('../Instrucciones/SentenciaDowhile');
    const { Incremento } = require('../Instrucciones/Incremento');
    const { SentenciaFor } = require('../Instrucciones/SentenciaFor');
    const { Funcion } = require('../Instrucciones/Funcion');
    const { SentenciaTernaria } = require('../Instrucciones/SentenciaTernaria');
    const { SentenciaReturn } = require('../Instrucciones/SentenciaReturn');
    const { Break } = require('../Instrucciones/Break');
    const { GraficarTs } = require('../Instrucciones/GraficarTs');
    const { Nodo } = require('../Arbol/Nodo');
    const { _Error, lerrores } = require('../Error');
    const { Continue } = require('../Instrucciones/Continue');
    const { Declaracion_Arreglo } = require('../Instrucciones/Declaracion_Arreglo')
    const { Variable_arreglo } = require('../Expresiones/Variable_arreglo');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 79
break;
case 5:return 80
break;
case 6:return 28
break;
case 7:return 60
break;
case 8:return 90
break;
case 9:return 91
break;
case 10:return 92
break;
case 11:return 93
break;
case 12:return 55
break;
case 13:return 84
break;
case 14:return 81
break;
case 15:return 82
break;
case 16:return 50
break;
case 17:return 52
break;
case 18:return 44
break;
case 19:return 47
break;
case 20:return 43
break;
case 21:return 42
break;
case 22:return 26
break;
case 23:return 'IN'
break;
case 24:return 'OF'
break;
case 25:return 20
break;
case 26:return 21
break;
case 27:return 22
break;
case 28:return 94
break;
case 29:return 87
break;
case 30:return 88
break;
case 31:return 89
break;
case 32:return 49
break;
case 33:return 34
break;
case 34:return 35
break;
case 35:return 36
break;
case 36:return 37
break;
case 37:return 38
break;
case 38:return 39
break;
case 39:return 40
break;
case 40:return 41
break;
case 41:return 25
break;
case 42:return 8
break;
case 43:return 65
break;
case 44:return 66
break;
case 45:return 67
break;
case 46:return 68
break;
case 47:return 64
break;
case 48:return 77
break;
case 49:return 78
break;
case 50:return 71
break;
case 51:return 72
break;
case 52:return 69
break;
case 53:return 70
break;
case 54:return 30
break;
case 55:return 74
break;
case 56:return 73
break;
case 57:return 75
break;
case 58:return 76
break;
case 59:return 85
break;
case 60:return 27
break;
case 61:return 32
break;
case 62:return 58
break;
case 63:return 45
break;
case 64:return 19
break;
case 65:return 24
break;
case 66:return 61
break;
case 67:return 62
break;
case 68:return 29;
break;
case 69:return 5;
break;
case 70: 
                            console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
                            errores.push(new _Error(yy_.yylloc.first_line, yy_.yylloc.first_column, "Lexico", "El simbolo: " + yy_.yytext + " no pertenece al lenguaje"))
                        
break;
}
},
rules: [/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:(("[^\"]*")|(`[^"`"]*`)|('[^"'"]*')))/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:default\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\*\*=)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:%)/,/^(?:\*\*)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:[_a-zA-Z][_a-zA-Z0-9]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,10],$V2=[1,8],$V3=[1,9],$V4=[1,12],$V5=[5,12,19,25,26,49],$V6=[1,21],$V7=[1,24],$V8=[1,41],$V9=[1,34],$Va=[1,35],$Vb=[1,36],$Vc=[1,37],$Vd=[1,38],$Ve=[1,39],$Vf=[1,40],$Vg=[1,43],$Vh=[1,45],$Vi=[1,52],$Vj=[1,53],$Vk=[1,54],$Vl=[1,55],$Vm=[8,12,18,23,28,29,30,31,32,33,34,35,36,37,38,39,41],$Vn=[1,62],$Vo=[23,41],$Vp=[1,63],$Vq=[1,64],$Vr=[1,65],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,72],$Vy=[1,71],$Vz=[1,73],$VA=[1,74],$VB=[1,82],$VC=[8,12,14,18,23,28,29,30,31,32,33,34,35,36,37,38,39,41,47],$VD=[8,12,14,18,23],$VE=[8,12,18,23,28,29,30,31,32,33,34,35,41],$VF=[1,107],$VG=[8,12,18,23,28,29,30,31,41],$VH=[8,12,18,23,28,29,30,31,32,33,34,35,36,37,41],$VI=[1,129],$VJ=[12,18],$VK=[8,12,18,23];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"PYC":8,"Declaracion_type":9,"Llamada":10,"Asignacion":11,"IDENTIFICADOR":12,"Listaatributos":13,"=":14,"Expresion":15,"{":16,"Lvalorestype":17,"}":18,"TYPE":19,"Latributostype":20,"DP":21,"TipoatributosType":22,",":23,"Tipo":24,"LET":25,"CONST":26,"NOT":27,"AND":28,"OR":29,"==":30,"!=":31,"<":32,">":33,"<=":34,">=":35,"-":36,"+":37,"*":38,"/":39,"(":40,")":41,"NUMERO":42,"CADENA":43,"TRUE":44,"FALSE":45,"NULL":46,".":47,"Listaparam":48,"CONSOLE":49,"LOG":50,"STRING":51,"NUMBER":52,"BOOLEAN":53,"VOID":54,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",12:"IDENTIFICADOR",14:"=",16:"{",18:"}",19:"TYPE",21:"DP",23:",",25:"LET",26:"CONST",27:"NOT",28:"AND",29:"OR",30:"==",31:"!=",32:"<",33:">",34:"<=",35:">=",36:"-",37:"+",38:"*",39:"/",40:"(",41:")",42:"NUMERO",43:"CADENA",44:"TRUE",45:"FALSE",46:"NULL",47:".",49:"CONSOLE",50:"LOG",51:"STRING",52:"NUMBER",53:"BOOLEAN",54:"VOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[11,5],[11,6],[11,4],[9,6],[20,5],[20,5],[20,4],[20,4],[20,4],[20,3],[22,1],[22,1],[7,6],[7,4],[7,4],[7,2],[7,8],[7,6],[7,4],[7,6],[7,4],[7,8],[7,6],[17,5],[17,4],[17,4],[17,3],[15,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,1],[15,1],[15,1],[15,1],[15,1],[15,2],[15,1],[15,1],[13,3],[13,2],[10,3],[10,4],[10,5],[10,6],[48,3],[48,1],[24,1],[24,1],[24,1],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1]
    
break;
case 3: case 65:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6: case 49:

        this.$ = $$[$0-1];
    
break;
case 7: case 18: case 56:

        this.$ = $$[$0];
    
break;
case 9:

        this.$ = new AsignacionVarType($$[$0-5], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 10:

        this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 11:

        this.$ = new DeclaracionTipos($$[$0-4], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
    
break;
case 12: case 13:

        $$[$0-4].push(new VariablesTipo($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column))
        this.$ = $$[$0-4];
    
break;
case 14:

        $$[$0-3].push(new VariablesTipo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = $$[$0-3];
    
break;
case 15: case 16:

        this.$ = [new VariablesTipo($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)];
    
break;
case 17:

        this.$ = [new VariablesTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)];
    
break;
case 19:

        this.$ = $$[$0]
    
break;
case 20: case 25:

        this.$ = new Declaracion($$[$0-4], $$[$0], $$[$0-2], TiposSimbolo.VAR, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 21:

        this.$ = new Declaracion($$[$0-2], $$[$0], null, TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 22: case 26:

        this.$ = new Declaracion($$[$0-2], null, $$[$0], TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 23:

        this.$ = new Declaracion($$[$0], null, null, TiposSimbolo.VAR, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 24:

        this.$ = new DeclaracionVarType($$[$0-6], $$[$0-1], $$[$0-4], TiposSimbolo.VAR, _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 27: case 30:

        this.$ = new Declaracion($$[$0-4], $$[$0], $$[$0-2], TiposSimbolo.CONST, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 28:

        this.$ = new Declaracion($$[$0-2], $$[$0], null, TiposSimbolo.CONST, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 29:

        this.$ = new DeclaracionVarType($$[$0-7], $$[$0-1], $$[$0-4], TiposSimbolo.CONST, _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 31:

        $$[$0-4].push(new ValoresTipo($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = $$[$0-4];
    
break;
case 32:

        $$[$0-3].push(new ValoresTipo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = $$[$0-3];
    
break;
case 33:

        this.$ = [new ValoresTipo($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)];
    
break;
case 34:

        this.$ = [new ValoresTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)];
    
break;
case 35:

        this.$ = new Relacional($$[$0], null, OperacionesLogicas.NEGADO, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 36:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.AND, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 37:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.OR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 38:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 39:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.NOIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 40:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 41:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 42:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 43:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 44:

        this.$ = new Aritmeticas($$[$0], null, OpcionesAritmeticas.NEGATIVO, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 45:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 46:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 47:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.POR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 48:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 50:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 51:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 52: case 53:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 54:

        this.$ = new Variable($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 55:

        let a = $$[$0-1]
        a.concat("." + $$[$0]);
        this.$ = new Variable($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 57:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 3)
    
break;
case 58:

        let aux = $$[$0-2];
        aux.concat("." + $$[$0]);
        this.$ = aux;
    
break;
case 59:

        let p = ".";
        p.concat($$[$0]);
        this.$ = p;
    
break;
case 60:

        this.$ = new Llamada($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 61:

        this.$ = new Llamada($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 62:

        this.$ = new Imprimir([], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 63:

        this.$ = new Imprimir($$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 64:

        $$[$0-2].push($$[$0])
        this.$ = $$[$0-2];
    
break;
case 66:

        this.$ = Type.CADENA;
    
break;
case 67:

        this.$ = Type.NUMERO;
    
break;
case 68:

        this.$ = Type.BOOLEANO
    
break;
case 69:

        this.$ = Type.VOID;
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:$V0,19:$V1,25:$V2,26:$V3,49:$V4},{1:[3]},{5:[1,13],6:14,7:4,9:5,10:6,11:7,12:$V0,19:$V1,25:$V2,26:$V3,49:$V4},o($V5,[2,3]),{8:[1,15]},{8:[1,16]},{8:[1,17]},o($V5,[2,7]),{12:[1,18]},{12:[1,19]},{12:[1,20]},{13:22,14:[1,23],40:$V6,47:$V7},{47:[1,25]},{1:[2,1]},o($V5,[2,2]),o($V5,[2,4]),o($V5,[2,5]),o($V5,[2,6]),{8:[2,23],14:[1,27],21:[1,26]},{14:[1,29],21:[1,28]},{14:[1,30]},{10:42,12:$V8,15:33,27:$V9,36:$Va,40:$Vb,41:[1,31],42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,48:32,49:$V4},{14:[1,44],47:$Vh},{10:42,12:$V8,15:47,16:[1,46],27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{12:[1,48]},{50:[1,49]},{12:[1,51],24:50,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{10:42,12:$V8,15:56,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{12:[1,58],24:57,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{10:42,12:$V8,15:59,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{16:[1,60]},o($Vm,[2,60]),{23:$Vn,41:[1,61]},o($Vo,[2,65],{28:$Vp,29:$Vq,30:$Vr,31:$Vs,32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,39:$VA}),{10:42,12:$V8,15:75,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{10:42,12:$V8,15:76,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{10:42,12:$V8,15:77,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},o($Vm,[2,50]),o($Vm,[2,51]),o($Vm,[2,52]),o($Vm,[2,53]),o($Vm,[2,54],{13:78,40:$V6,47:$V7}),o($Vm,[2,56]),o($Vm,[2,57]),{10:42,12:$V8,15:79,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{12:[1,80]},{12:$VB,17:81},{8:[1,83],28:$Vp,29:$Vq,30:$Vr,31:$Vs,32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,39:$VA},o($VC,[2,59]),{40:[1,84]},{8:[2,22],14:[1,85]},{8:[2,26],14:[1,86]},o($VD,[2,66]),o($VD,[2,67]),o($VD,[2,68]),o($VD,[2,69]),{8:[2,21],28:$Vp,29:$Vq,30:$Vr,31:$Vs,32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,39:$VA},{14:[1,87]},{14:[1,88]},{8:[2,28],28:$Vp,29:$Vq,30:$Vr,31:$Vs,32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,39:$VA},{12:[1,90],20:89},o($Vm,[2,61]),{10:42,12:$V8,15:91,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{10:42,12:$V8,15:92,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{10:42,12:$V8,15:93,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{10:42,12:$V8,15:94,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{10:42,12:$V8,15:95,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{10:42,12:$V8,15:96,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{10:42,12:$V8,15:97,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{10:42,12:$V8,15:98,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{10:42,12:$V8,15:99,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{10:42,12:$V8,15:100,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{10:42,12:$V8,15:101,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{10:42,12:$V8,15:102,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{10:42,12:$V8,15:103,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},o($VE,[2,35],{36:$Vx,37:$Vy,38:$Vz,39:$VA}),o($Vm,[2,44]),{28:$Vp,29:$Vq,30:$Vr,31:$Vs,32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,39:$VA,41:[1,104]},o($Vm,[2,55],{47:$Vh}),{8:[1,105],28:$Vp,29:$Vq,30:$Vr,31:$Vs,32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,39:$VA},o($VC,[2,58]),{12:$VF,18:[1,106]},{21:[1,108]},o($V5,[2,10]),{10:42,12:$V8,15:33,27:$V9,36:$Va,40:$Vb,41:[1,109],42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,48:110,49:$V4},{10:42,12:$V8,15:111,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{12:[1,113],16:[1,112]},{10:42,12:$V8,15:114,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},{12:[1,116],16:[1,115]},{12:[1,118],18:[1,117]},{21:[1,119]},o($Vo,[2,64],{28:$Vp,29:$Vq,30:$Vr,31:$Vs,32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,39:$VA}),o([8,12,18,23,28,29,41],[2,36],{30:$Vr,31:$Vs,32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,39:$VA}),o([8,12,18,23,29,41],[2,37],{28:$Vp,30:$Vr,31:$Vs,32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,39:$VA}),o($VG,[2,38],{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,39:$VA}),o($VG,[2,39],{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,39:$VA}),o($VE,[2,40],{36:$Vx,37:$Vy,38:$Vz,39:$VA}),o($VE,[2,41],{36:$Vx,37:$Vy,38:$Vz,39:$VA}),o($VE,[2,42],{36:$Vx,37:$Vy,38:$Vz,39:$VA}),o($VE,[2,43],{36:$Vx,37:$Vy,38:$Vz,39:$VA}),o($VH,[2,45],{38:$Vz,39:$VA}),o($VH,[2,46],{38:$Vz,39:$VA}),o($Vm,[2,47]),o($Vm,[2,48]),o($Vm,[2,49]),o($V5,[2,8]),{8:[1,120]},{21:[1,121]},{10:42,12:$V8,15:122,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},o($Vm,[2,62]),{23:$Vn,41:[1,123]},{8:[2,20],28:$Vp,29:$Vq,30:$Vr,31:$Vs,32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,39:$VA},{12:$VB,17:124},{8:[2,25]},{8:[2,27],28:$Vp,29:$Vq,30:$Vr,31:$Vs,32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,39:$VA},{12:$VB,17:125},{8:[2,30]},{8:[2,11]},{21:[1,126]},{12:$VI,22:127,24:128,51:$Vi,52:$Vj,53:$Vk,54:$Vl},o($V5,[2,9]),{10:42,12:$V8,15:130,27:$V9,36:$Va,40:$Vb,42:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg,49:$V4},o($VJ,[2,34],{23:[1,131],28:$Vp,29:$Vq,30:$Vr,31:$Vs,32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,39:$VA}),o($Vm,[2,63]),{12:$VF,18:[1,132]},{12:$VF,18:[1,133]},{12:$VI,22:134,24:128,51:$Vi,52:$Vj,53:$Vk,54:$Vl},o($VJ,[2,17],{8:[1,136],23:[1,135]}),o($VK,[2,18]),o($VK,[2,19]),o($VJ,[2,32],{23:[1,137],28:$Vp,29:$Vq,30:$Vr,31:$Vs,32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,39:$VA}),o($VJ,[2,33]),{8:[2,24]},{8:[2,29]},o($VJ,[2,14],{8:[1,139],23:[1,138]}),o($VJ,[2,15]),o($VJ,[2,16]),o($VJ,[2,31]),o($VJ,[2,12]),o($VJ,[2,13])],
defaultActions: {13:[2,1],113:[2,25],116:[2,30],117:[2,11],132:[2,24],133:[2,29]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Aritmeticas } = require('../Expresiones/Aritmeticas');
    const { OpcionesAritmeticas } = require('../Expresiones/Opcionesaritmeticas');
    const { Literal } = require('../Expresiones/Literal');
    const { TiposSimbolo, Simbolo } = require('../Entorno/Simbolo');
    const { Declaracion } = require('../Instrucciones/Declaracion');
    const { Type } = require('../Retorno'); 
    const { Variable } = require('../Expresiones/Variable');
    const { DeclaracionTipos } = require('../Instrucciones/DeclaracionTipos');
    const { VariablesTipo, ValoresTipo } = require('../Expresiones/VariablesTipo');
    const { Asignacion } = require('../Instrucciones/Asignacion');
    const { DeclaracionVarType } = require('../Instrucciones/DeclaracionVarType');
    const { AsignacionVarType } = require('../Instrucciones/AsignacionVarType');
    const { Llamada } = require('../Instrucciones/Llamada');
    const { Relacional, OperacionesLogicas } = require('../Expresiones/Relacional');
    const { Imprimir } = require('../Instrucciones/Imprimir');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 42
break;
case 5:return 43
break;
case 6:return 25
break;
case 7:return 26
break;
case 8:return 51
break;
case 9:return 52
break;
case 10:return 53
break;
case 11:return 54
break;
case 12:return 19
break;
case 13:return 46
break;
case 14:return 44
break;
case 15:return 45
break;
case 16:return 'IF'
break;
case 17:return 'ELSE'
break;
case 18:return 'SWITCH'
break;
case 19:return 'CASE'
break;
case 20:return 'WHILE'
break;
case 21:return 'DO'
break;
case 22:return 'FOR'
break;
case 23:return 'IN'
break;
case 24:return 'OF'
break;
case 25:return 'BREAK'
break;
case 26:return 'CONTINUE'
break;
case 27:return 'RETURN'
break;
case 28:return 'FUNCTION'
break;
case 29:return 49
break;
case 30:return 50
break;
case 31:return 'GRAFICAR_TS'
break;
case 32:return 21
break;
case 33:return 8
break;
case 34:return 28
break;
case 35:return 29
break;
case 36:return 27
break;
case 37:return '%'
break;
case 38:return '**'
break;
case 39:return 34
break;
case 40:return 35
break;
case 41:return 30
break;
case 42:return 31
break;
case 43:return 32
break;
case 44:return 33
break;
case 45:return 14
break;
case 46:return 37
break;
case 47:return 36
break;
case 48:return 38
break;
case 49:return 39
break;
case 50:return 47
break;
case 51:return 40
break;
case 52:return 41
break;
case 53:return 23
break;
case 54:return 16
break;
case 55:return 18
break;
case 56:return ':'
break;
case 57:return 12;
break;
case 58:return 5;
break;
case 59: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:(("[^\"]*")|(`[^"`"]*`)))/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:%)/,/^(?:\*\*)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:["_" | a-z | A-Z]["_" | a-z | A-Z|0-9]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
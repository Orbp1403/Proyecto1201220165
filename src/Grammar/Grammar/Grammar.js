/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,31],$V2=[1,32],$V3=[1,40],$V4=[1,16],$V5=[1,11],$V6=[1,21],$V7=[1,39],$V8=[1,38],$V9=[1,37],$Va=[1,36],$Vb=[1,13],$Vc=[1,12],$Vd=[1,14],$Ve=[1,15],$Vf=[1,17],$Vg=[1,18],$Vh=[1,19],$Vi=[1,20],$Vj=[1,23],$Vk=[1,34],$Vl=[1,35],$Vm=[1,33],$Vn=[2,5,20,21,25,26,27,28,40,41,42,49,54,59,60,69,75,76,77,78,80,83,85,90],$Vo=[1,60],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,52],$Vw=[1,53],$Vx=[1,55],$Vy=[1,54],$Vz=[1,56],$VA=[1,57],$VB=[1,58],$VC=[1,59],$VD=[1,63],$VE=[1,68],$VF=[8,23,24,28,31,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$VG=[8,23,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$VH=[2,107],$VI=[1,73],$VJ=[1,74],$VK=[1,75],$VL=[1,76],$VM=[1,77],$VN=[1,78],$VO=[1,79],$VP=[1,80],$VQ=[1,81],$VR=[1,82],$VS=[2,5,20,21,25,26,27,28,40,41,42,45,46,48,49,54,59,60,69,75,76,77,78,80,83,85,90],$VT=[1,115],$VU=[2,108],$VV=[1,124],$VW=[8,23,24,28,31,45,57,61,62,63,64],$VX=[8,23,24,28,31,45,57,61,62,63,64,65,66,67,68],$VY=[1,153],$VZ=[2,5,20,21,25,26,27,28,40,41,42,45,46,48,49,51,54,59,60,69,75,76,77,78,80,83,85,90],$V_=[2,20,21,25,26,27,28,40,41,42,45,46,48,49,59,60,69,75,76,77,78,80,83,85],$V$=[1,159],$V01=[1,160],$V11=[1,161],$V21=[1,162],$V31=[1,172],$V41=[1,175],$V51=[31,57],$V61=[8,24,28,31,45,57],$V71=[8,23,24,28,29,31,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81],$V81=[1,180],$V91=[8,28,29,31,43,45,57],$Va1=[1,201],$Vb1=[1,233],$Vc1=[1,252],$Vd1=[28,45],$Ve1=[1,258],$Vf1=[8,28,45,57],$Vg1=[1,291],$Vh1=[1,300],$Vi1=[1,301],$Vj1=[1,299],$Vk1=[1,320],$Vl1=[1,282],$Vm1=[1,316],$Vn1=[1,298],$Vo1=[1,297],$Vp1=[1,296],$Vq1=[1,295],$Vr1=[1,283],$Vs1=[1,309],$Vt1=[1,310],$Vu1=[1,314],$Vv1=[1,315],$Vw1=[1,317],$Vx1=[1,318],$Vy1=[1,319],$Vz1=[1,293],$VA1=[1,294],$VB1=[45,46,48],$VC1=[8,24,28,29,31,45,57],$VD1=[8,23,24,28,29,31,45,57],$VE1=[2,202],$VF1=[1,351],$VG1=[1,352],$VH1=[1,353],$VI1=[1,354],$VJ1=[1,355],$VK1=[1,356],$VL1=[8,23,24,28,29,31,34,35,36,37,38,39,45,57],$VM1=[2,206],$VN1=[1,359],$VO1=[1,358],$VP1=[8,23,24,28,29,31,34,35,36,37,38,39,45,57,61,62],$VQ1=[2,210],$VR1=[1,361],$VS1=[1,362],$VT1=[8,23,24,28,29,31,34,35,36,37,38,39,45,57,61,62,63,64],$VU1=[2,216],$VV1=[1,366],$VW1=[1,367],$VX1=[1,365],$VY1=[1,364],$VZ1=[8,23,24,28,29,31,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68],$V_1=[2,220],$V$1=[1,369],$V02=[1,370],$V12=[8,23,24,28,29,31,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70],$V22=[2,225],$V32=[1,374],$V42=[1,373],$V52=[1,372],$V62=[8,23,24,28,29,31,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73],$V72=[2,228],$V82=[1,376],$V92=[8,23,24,28,29,31,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$Va2=[8,23,24,28,29,31,32,33,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$Vb2=[1,386],$Vc2=[8,23,24,26,28,29,31,32,33,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81],$Vd2=[1,393],$Ve2=[1,437],$Vf2=[1,450],$Vg2=[1,521],$Vh2=[1,530],$Vi2=[1,531],$Vj2=[2,180];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"PYC":8,"Declaracion_type":9,"Expresion":10,"Asignacion":11,"Sentencias_control":12,"Funcion":13,"Sentenciaif":14,"Sentenciaswitch":15,"Sentenciawhile":16,"Sentenciadowhile":17,"Sentenciafor":18,"InstruccionesSentencias":19,"BREAK":20,"RETURN":21,"SentenciaTernaria":22,"?":23,"DP":24,"FOR":25,"(":26,"LET":27,"IDENTIFICADOR":28,"=":29,"Aumento":30,")":31,"++":32,"--":33,"+=":34,"-=":35,"*=":36,"/=":37,"%=":38,"**=":39,"DO":40,"WHILE":41,"SWITCH":42,"{":43,"Casos":44,"}":45,"CASE":46,"InstruccionSentencia":47,"DEFAULT":48,"IF":49,"SentenciaElse":50,"ELSE":51,"Listaatributos":52,"Lvalorestype":53,"TYPE":54,"Latributostype":55,"TipoatributosType":56,",":57,"Tipo":58,"CONST":59,"NOT":60,"AND":61,"OR":62,"==":63,"!=":64,"<":65,">":66,"<=":67,">=":68,"-":69,"+":70,"*":71,"/":72,"%":73,"**":74,"NUMERO":75,"CADENA":76,"TRUE":77,"FALSE":78,"Llamada":79,"NULL":80,".":81,"Listaparam":82,"CONSOLE":83,"LOG":84,"GRAFICAR_TS":85,"STRING":86,"NUMBER":87,"BOOLEAN":88,"VOID":89,"FUNCTION":90,"Funcion1":91,"Lparametrosfuncion":92,"Tipofuncion":93,"InstruccionesFuncion":94,"InstruccionesFuncion1":95,"Linstrucciones":96,"Instruccionfuncion":97,"Linstrucciones1":98,"Expresionesfuncion":99,"Instruccionfuncion1":100,"Llamadas_funcion":101,"Auxdeclaracion":102,"Auxdeclaracion4":103,"sentencia_if":104,"sentencia_switch":105,"sentencia_while":106,"sentencia_dowhile":107,"sentencia_for":108,"sentencia_break":109,"Sentencia_return":110,"Auxdeclaracion5":111,"Auxdeclaracion6":112,"Auxdeclaracion1":113,"Auxdeclaracion2":114,"Auxdeclaracion3":115,"ValoresType":116,"Sentencia_return1":117,"sentencia_for1":118,"Lcasosswitch":119,"Lcasos":120,"Lcasos1":121,"Lcasos2":122,"sentencia_else":123,"sentencia_else1":124,"instruccionfuncion12":125,"Auxexpresionesfuncion":126,"Auxexpresionesfuncion1":127,"Expresionesfuncion1":128,"Expresionesfuncion2":129,"Expresionesfuncion3":130,"Expresionesfuncion4":131,"Expresionesfuncion5":132,"Expresionesfuncion6":133,"Expresionesfuncion7":134,"Expresionesfuncion8":135,"Expresionesfuncion9":136,"Expresionesfuncion10":137,"Expresionesfuncion11":138,"Expresionesfuncion12":139,"Expresionesfuncion13":140,"Expresionesfuncion14":141,"Expresionesfuncion15":142,"Expresionesfuncion16":143,"Expresionesfuncion17":144,"Expresionesfuncion18":145,"Expresionesfuncion19":146,"Atributos":147,"Instruccionfuncion2":148,"Parametrosllamada":149,"Atributo":150,"Atributos1":151,"Parametrollamada":152,"Parametrosllamada1":153,"Valortype":154,"ValoresType1":155,"Parametro":156,"Auxparametros":157,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",20:"BREAK",21:"RETURN",23:"?",24:"DP",25:"FOR",26:"(",27:"LET",28:"IDENTIFICADOR",29:"=",31:")",32:"++",33:"--",34:"+=",35:"-=",36:"*=",37:"/=",38:"%=",39:"**=",40:"DO",41:"WHILE",42:"SWITCH",43:"{",45:"}",46:"CASE",48:"DEFAULT",49:"IF",51:"ELSE",54:"TYPE",57:",",59:"CONST",60:"NOT",61:"AND",62:"OR",63:"==",64:"!=",65:"<",66:">",67:"<=",68:">=",69:"-",70:"+",71:"*",72:"/",73:"%",74:"**",75:"NUMERO",76:"CADENA",77:"TRUE",78:"FALSE",80:"NULL",81:".",83:"CONSOLE",84:"LOG",85:"GRAFICAR_TS",86:"STRING",87:"NUMBER",88:"BOOLEAN",89:"VOID",90:"FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[12,2],[12,3],[22,5],[18,12],[18,11],[30,2],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[17,7],[16,5],[15,7],[15,6],[44,5],[44,4],[44,4],[44,3],[44,4],[44,3],[44,2],[14,5],[14,6],[50,2],[50,2],[19,3],[19,2],[47,3],[47,2],[47,2],[47,3],[47,3],[47,2],[47,2],[47,1],[47,1],[47,2],[11,5],[11,7],[11,6],[11,4],[9,6],[55,5],[55,5],[55,4],[55,4],[55,4],[55,3],[56,1],[56,1],[7,6],[7,4],[7,4],[7,2],[7,8],[7,6],[7,4],[7,6],[7,4],[7,8],[7,6],[53,5],[53,4],[53,4],[53,3],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,1],[10,1],[10,1],[10,1],[10,1],[10,2],[10,1],[10,1],[10,1],[10,1],[52,3],[52,2],[79,3],[79,4],[79,5],[79,6],[79,3],[82,3],[82,1],[58,1],[58,1],[58,1],[58,1],[13,4],[91,5],[91,4],[93,1],[93,1],[94,2],[95,2],[95,1],[96,2],[98,1],[98,0],[97,3],[97,2],[97,3],[97,3],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,2],[103,2],[103,3],[111,4],[111,3],[102,2],[102,1],[102,3],[113,2],[113,2],[114,1],[114,3],[115,1],[115,2],[112,4],[112,2],[110,2],[117,2],[117,1],[109,2],[108,3],[118,10],[118,9],[107,7],[106,5],[105,6],[119,2],[119,1],[120,4],[120,3],[121,2],[121,1],[121,0],[122,1],[122,0],[104,6],[123,2],[123,0],[124,1],[124,1],[100,2],[100,0],[125,1],[125,3],[99,2],[127,4],[127,0],[126,2],[129,3],[129,3],[129,3],[129,3],[129,3],[129,3],[129,0],[128,2],[131,3],[131,3],[131,0],[130,2],[133,3],[133,3],[133,0],[132,2],[135,3],[135,3],[135,3],[135,3],[135,0],[134,2],[137,3],[137,3],[137,0],[136,2],[139,3],[139,3],[139,3],[139,0],[138,2],[141,3],[141,0],[140,2],[140,2],[140,1],[142,2],[144,1],[144,1],[144,0],[143,2],[146,1],[146,2],[146,0],[145,1],[145,1],[145,1],[145,1],[145,1],[145,1],[145,3],[101,5],[101,3],[148,1],[148,2],[147,2],[150,2],[151,1],[151,0],[149,2],[152,1],[153,2],[153,0],[116,2],[154,3],[155,2],[155,1],[155,0],[92,2],[156,3],[156,3],[157,2],[157,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "INICIO", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
        //$$[$0-1].nodo.addPadre(this.$.nodo)
        return this.$;
    
break;
case 2:

        $$[$0-1].instrucciones.push($$[$0].instrucciones)
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 3:

        this.$ = {
            instrucciones : [$$[$0].instrucciones],
            nodo : new Nodo(null, "INST", null)
        };
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 4: case 5: case 6:

        //this.$ = $$[$0-1];
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : $$[$0-1].nodo
        }
    
break;
case 7: case 9:

        //this.$ = $$[$0];
        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : $$[$0].nodo
        }
    
break;
case 8:

        //this.$ = $$[$0]
        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : $$[$0].nodo
        }
    
break;
case 11: case 12: case 13: case 14: case 15: case 109: case 134: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 149: case 156: case 157: case 161: case 181: case 186: case 187: case 188: case 251: case 255: case 259:

        this.$ = $$[$0];
    
break;
case 17: case 167:

        this.$ = {
            instrucciones : new Break(_$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Break", null, null)
        }
    
break;
case 18:

        this.$ = {
            instrucciones : new SentenciaReturn(null, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Return", null, null)
        }
    
break;
case 19:

        this.$ = {
            instrucciones : new SentenciaReturn($$[$0-1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("Return", null, null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 20:

        this.$ = {
            instrucciones : new SentenciaTernaria($$[$0-4].instrucciones, $$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "Ternaria", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 21:

        this.$ = {
            instrucciones : new SentenciaFor(1, $$[$0-8], $$[$0-6].instrucciones, $$[$0-4].instrucciones, $$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-11].first_line, _$[$0-11].first_column) ,
            nodo : new Nodo(null, "For", null)
        }
        instruccion = new Nodo("=", null, null)
        instruccion.agregarHijos(new Nodo($$[$0-8], null, null));
        instruccion.agregarHijos($$[$0-6].nodo)
        this.$.nodo.agregarHijos(instruccion)
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(instruccion)
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 22:

        this.$ = {
            instrucciones : new SentenciaFor(0, $$[$0-8], $$[$0-6].instrucciones, $$[$0-4].instrucciones, $$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-10].first_line, _$[$0-10].first_column),
            nodo : new Nodo(null, "For", null)
        }
        instruccion = new Nodo("=", null, null);
        instruccion.agregarHijos(new Nodo($$[$0-8], null, null));
        instruccion.agregarHijos($$[$0-6].nodo)
        this.$.nodo.agregarHijos(instruccion);
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 23:

        this.$ = {
            instrucciones : new Incremento($$[$0-1], OpcionesAritmeticas.MAS, new Literal(1, _$[$0-1].first_line, _$[$0-1].first_column, 0), _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo(null, "Incremento", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos(new Nodo('++', null, null));
        
    
break;
case 24:

        this.$ = {
            instrucciones : new Incremento($$[$0-1], OpcionesAritmeticas.MENOS, new Literal(1, _$[$0-1].first_line, _$[$0-1].first_column, 0), _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo(null, "Incremento", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos(new Nodo('--', null, null));
    
break;
case 25:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.MAS, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("+=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 26:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.MENOS, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("-=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 27:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.POR, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("*=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 28:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.DIV, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column), 
            nodo : new Nodo("/=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 29:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.MODULO, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('%=', null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 30:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.POTENCIA, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('**=', null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 31:

        this.$ = {
            instrucciones : new SentenciaDowhile($$[$0-2].instrucciones, $$[$0-5].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo(null, "Do_while", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo)
        if($$[$0-5].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-5].nodo)
        }
        this.$.nodo.agregarHijos(instruccion)
    
break;
case 32:

        this.$ = {
            instrucciones : new SentenciaWhile($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "While", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 33:

        this.$ = {
            instrucciones : new SentenciaSwitch($$[$0-4].instrucciones, $$[$0-1].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo(null, "Switch", null) 
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 34:

        this.$ = {
            instrucciones : new SentenciaSwitch($$[$0-3].instrucciones, null, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Switch", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(instruccion)
    
break;
case 35:

        $$[$0-4].instrucciones.push(new Caso($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        };
        this.$.nodo.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 36:

        $$[$0-3].instrucciones.push(new Caso($$[$0-1].instrucciones, null, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = {
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        }
        this.$.nodo.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 37:

        $$[$0-3].instrucciones.push(new CasoDef($$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = {
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        };
        this.$.nodo.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(new Nodo(null, "Default", null))
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 38:

        $$[$0-2].instrucciones.push(new CasoDef(null, _$[$0-2].first_line, _$[$0-2].first_column));
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        };
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos(new Nodo("Default", null, null))
    
break;
case 39:

        this.$ = {
            instrucciones : [new Caso($$[$0-2], $$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo(null, "Caso", null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 40:

        this.$ = {
            instrucciones : [new Caso($$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column)],
            nodo : new Nodo(null, "Caso", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 41:

        this.$ = {
            instrucciones : [new CasoDef(null, _$[$0-1].first_line, _$[$0-1].first_column)],
            nodo : new Nodo(null, "Caso", null) 
        }
        this.$.nodo.agregarHijos(new Nodo("Default", null, null));
    
break;
case 42:

        this.$ = {
            instrucciones : new SentenciaIf($$[$0-2].instrucciones, $$[$0].instrucciones, null, _$[$0-4].first_line, _$[$0-4].first_column), 
            nodo : new Nodo(null, "IF", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos(instruccion);
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo);
        }
    
break;
case 43:

        this.$ = {
            instrucciones : new SentenciaIf($$[$0-3].instrucciones, $$[$0-1].instrucciones, $$[$0].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "IF", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0-1].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-1].nodo)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 44:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "ELSE", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 45:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "ELSE", null)
        }
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo);
        }
    
break;
case 46:

        this.$ = {
            instrucciones : new Cuerposentencia($$[$0-1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : $$[$0-1].nodo
        }
    
break;
case 47:

        this.$ = {
            instrucciones : new Cuerposentencia(new Array(), _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : null
        }
    
break;
case 48:

        $$[$0-2].instrucciones.push($$[$0-1].instrucciones);
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 49:

        $$[$0-1].instrucciones.push($$[$0].instrucciones);
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 50:

        $$[$0-1].instrucciones.push($$[$0].instrucciones)
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 51:

        $$[$0-2].instrucciones.push($$[$0-1].instrucciones)
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        };
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 53: case 54:

        this.$ = {
            instrucciones : [$$[$0-1].instrucciones],
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 55: case 56:

        this.$ = {
            instrucciones : [$$[$0].instrucciones],
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 58:

        this.$ = {
            instrucciones : new Asignacion($$[$0-4], $$[$0-3].instrucciones, $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo("Asignacion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 59:

        this.$ = {
            instrucciones : new AsignacionVarType($$[$0-6], $$[$0-5].instrucciones, $$[$0-2].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo("Asignacion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-6], null, null))
        this.$.nodo.agregarHijos($$[$0-5].nodo)
        $$[$0-3].nodo.agregarHijos($$[$0-2].nodo)
    
break;
case 60:

        this.$ = {
            instrucciones : new AsignacionVarType($$[$0-5], null, $$[$0-2].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo("Asignacion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-5], null, null));
        this.$.nodo.agregarHijos($$[$0-2].nodo)
    
break;
case 61:

        this.$ = {
            instrucciones : new Asignacion($$[$0-3], null, $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 62:

        this.$ = {
            instrucciones : new DeclaracionTipos($$[$0-4], $$[$0-1].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column), 
            nodo : new Nodo(null, "DECLARACION_TYPE", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 63:

        $$[$0-4].instrucciones.push(new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column))
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo(null, "Valor", null)
        };
        this.$.nodo.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null))
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 64:

        $$[$0-4].instrucciones.push(new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column))
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo(null, "Valor", null)
        }
        this.$.nodo.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null))
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 65:

        $$[$0-3].instrucciones.push(new VariablesTipo($$[$0-2], $$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = {
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo(null, "Valor", null)
        };
        this.$.nodo.agregarHijos($$[$0-3].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 66:

        this.$ = {
            instrucciones : [new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo(null, "Valor", null) 
        };
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 67:

        this.$ = {
            instrucciones : [new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo(null, "Valor", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 68:

        this.$ = {
            instrucciones : [new VariablesTipo($$[$0-2], $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)],
            nodo : new Nodo(null, "Valor", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 69:

        this.$ = {
            instrucciones : $$[$0],
            nodo : new Nodo(Type[$$[$0]], null, null)
        }
    
break;
case 70:

        this.$ = {
            instrucciones : $$[$0],
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 71:

        this.$ = {
            instrucciones :  new Declaracion($$[$0-4], $$[$0].instrucciones, $$[$0-2], TiposSimbolo.VAR, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo("DECLARACION", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0-2]], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null))
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 72:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], $$[$0].instrucciones, null, TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("DECLARACION", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 73:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], null, $$[$0], TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("Declaracion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0]], null, null));
    
break;
case 74:

        this.$ = {
            instrucciones : new Declaracion($$[$0], null, null, TiposSimbolo.VAR, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Declaracion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 75:

        this.$ = {
            instrucciones : new Declaracion($$[$0-6], $$[$0-1].instrucciones, $$[$0-4], TiposSimbolo.VAR, _$[$0-7].first_line, _$[$0-7].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-6], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 76:

        this.$ = {
            instrucciones : new Declaracion($$[$0-4], $$[$0].instrucciones, $$[$0-2], TiposSimbolo.VAR, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 77:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], null, $$[$0], TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
    
break;
case 78:

        this.$ = {
            instrucciones : new Declaracion($$[$0-4], $$[$0].instrucciones, $$[$0-2], TiposSimbolo.CONST, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0-2]], null, null))
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 79:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], $$[$0].instrucciones, null, TiposSimbolo.CONST, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        };
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 80:

        this.$ = {
            instrucciones : new Declaracion($$[$0-6], $$[$0-1].instrucciones, $$[$0-4], TiposSimbolo.CONST, _$[$0-7].first_line, _$[$0-7].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-6], null, null)) ;
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 81:

        this.$ = {
            instrucciones : new Declaracion($$[$0-4], $$[$0], $$[$0-2], TiposSimbolo.CONST, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 82:

        $$[$0-4].instrucciones.push(new ValoresTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null))
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 83:

        $$[$0-3].instrucciones.push(new ValoresTipo($$[$0-2], $$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = { 
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo("Valores", null, null)
        };
        this.$.nodo.agregarHijos($$[$0-3].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 84:

        this.$ = {
            instrucciones : [new ValoresTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 85:

        this.$ = {
            instrucciones : [new ValoresTipo($$[$0-2], $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)],
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 86: case 229:

        this.$ = {
            instrucciones : new Relacional($$[$0].instrucciones, null, OperacionesLogicas.NEGADO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('!', null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 87:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.AND, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('&&', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 88:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.OR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('||', null, null) 
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 89:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo ('==', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 90:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.NOIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('!=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 91:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MENOR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('<', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 92:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('>', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 93:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('<=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 94:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('>=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 95: case 230:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0].instrucciones, null, OpcionesAritmeticas.NEGATIVO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 96:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('+', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 97:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 98:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.POR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('*', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 99:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.DIV, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('/', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 100:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.MODULO, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('%', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 101:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('**', null, null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 102: case 132: case 174: case 246: case 250:

        this.$ = $$[$0-1];
    
break;
case 103: case 240:

        this.$ = {
            instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 104:

        if($$[$0].includes('\"'))
        {
            this.$ = {
                instrucciones : new Literal($$[$0].replace(/['"]+/g, ''), _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0].replace(/['"]+/g, ''), null, null)
            }
        }
        else if($$[$0].includes("'"))
        {
            this.$ = {
                instrucciones : new Literal($$[$0].replace(/["'"]+/g, ''), _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0].replace(/["'"]+/g, ''), null, null)
            }
        }
        else
        {
            this.$ = {
                instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0], null, null)
            }
        }
    
break;
case 105: case 106: case 243: case 244:

        this.$ = {
            instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 107: case 242:

        this.$ = {
            instrucciones : new Variable($$[$0], null, 7, _$[$0].first_line, _$[$0].first_column),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 108:

        this.$ = {
            instrucciones : new Variable($$[$0-1], $$[$0].instrucciones, 7, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo(null, 'EXP', null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 110: case 245:

        this.$ = {
            instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 3),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 111: case 112: case 129: case 130: case 153: case 264:

        this.$ = $$[$0]
    
break;
case 113:

        $$[$0-2].instrucciones.push($$[$0]);
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, 'ATRIB', null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
        this.$ = $$[$0-2];
    
break;
case 114:

        this.$ = {
            instrucciones : [$$[$0]],
            nodo : new Nodo(null, 'ATRIB', null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 115:

        this.$ = {
            instrucciones : new Llamada($$[$0-2], new Array(), _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, 'Llamada', null)
        };
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
    
break;
case 116:

        this.$ = {
            instrucciones : new Llamada($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo(null, "Llamada", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 117:

        this.$ = {
            instrucciones : new Imprimir(new Array(), _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "Imprimir", null)
        }
    
break;
case 118:

        this.$ = {
            instrucciones : new Imprimir($$[$0-1].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column) ,
            nodo : new Nodo(null, "Imprimir", null)

        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 119:

        this.$ = {
            instrucciones : new GraficarTs(_$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "GraficarTs", null)
        }
    
break;
case 120:

        $$[$0-2].instrucciones.push($$[$0].instrucciones)
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Parametro", null)
        };
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 121:

        this.$ = {
            instrucciones : [$$[$0].instrucciones],
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 122:

        this.$ = Type.CADENA;
    
break;
case 123:

        this.$ = Type.NUMERO;
    
break;
case 124:

        this.$ = Type.BOOLEANO
    
break;
case 125:

        this.$ = Type.VOID;
    
break;
case 126:

        if($$[$0].parametros != null)
        {
            this.$ = {
                instrucciones : new Funcion($$[$0-2], $$[$0].instrucciones_f.instrucciones, $$[$0].parametros.instrucciones, $$[$0].tipo, _$[$0-3].first_line, _$[$0-3].first_column),
                nodo : new Nodo(null, "Funcion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
            this.$.nodo.agregarHijos($$[$0].parametros.nodo);
            if(isNaN($$[$0].tipo) == false)
            {
                this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
            }
            else
            {
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            }
            if($$[$0].instrucciones_f.nodo != null)
            {
                this.$.nodo.agregarHijos($$[$0].instrucciones_f.nodo)
            }
        }
        else
        {
            this.$ = {
                instrucciones : new Funcion($$[$0-2], $$[$0].instrucciones_f.instrucciones, new Array(), $$[$0].tipo, _$[$0-3].first_line, _$[$0-3].first_column),
                nodo : new Nodo(null, "Funcion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
            this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
            if($$[$0].instrucciones_f.nodo != null)
            {
                this.$.nodo.agregarHijos($$[$0].instrucciones_f.nodo)
            }
        }
    
break;
case 127:

        this.$ = {
            parametros : $$[$0-4],
            tipo : $$[$0-1],
            instrucciones_f : $$[$0]
        }
    
break;
case 128:

        this.$ = {
            parametros : null,
            tipo : $$[$0-1],
            instrucciones_f : $$[$0]
        }
    
break;
case 131:

        if($$[$0].instrucciones != null)
        {
            this.$ = {
                instrucciones : new Cuerposentencia($$[$0].instrucciones, _$[$0-1].linea, _$[$0-1].columna),
                nodo : $$[$0].nodo
            }
        }
        else
        {
            this.$ = $$[$0];
        }
    
break;
case 133:

        this.$ = {
            instrucciones : null,
            nodo : null
        };
    
break;
case 135:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length - 2].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 2].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 136:

        hermano = eval('$$');
        this.$ = {
            instrucciones : [hermano[hermano.length - 1].instrucciones],
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 137:

        if($$[$0-1].contenido.instrucciones != null)
        {
            if($$[$0-1].estype == false)
            {
                this.$ = {
                    instrucciones : new Asignacion($$[$0-2].instrucciones.nombre, $$[$0-2].instrucciones.atributos, $$[$0-1].contenido.instrucciones, $$[$0-2].instrucciones.linea, $$[$0-2].instrucciones.columna),
                    nodo : new Nodo("Asignacion", null, null)
                }
                this.$.nodo.agregarHijos($$[$0-2].nodo);
                this.$.nodo.agregarHijos($$[$0-1].contenido.nodo)
            }
            else
            {
                this.$ = {
                    instrucciones : new AsignacionVarType($$[$0-2].instrucciones.nombre, $$[$0-2].instrucciones.atributos, $$[$0-1].contenido.instrucciones, $$[$0-2].instrucciones.linea, $$[$0-2].instrucciones.columna),
                    nodo : new Nodo("Asignacion", null, null)
                }
                this.$.nodo.agregarHijos($$[$0-2].nodo)
                this.$.nodo.agregarHijos($$[$0-1].contenido.nodo)
            }
        }
        else
        {
            this.$ = $$[$0-2];
        }
    
break;
case 138:

        hermano = eval('$$');
        this.$ = hermano[hermano.length - 2];
    
break;
case 139:

        if($$[$0].estype == false){
            if($$[$0].valor == null && $$[$0].tipo == null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], null, null, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
            }
            else if($$[$0].valor == null && $$[$0].tipo != null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], null, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                if(isNaN($$[$0].tipo) == false)
                {
                    this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                }
                else
                {
                    this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
                }
            }
            else if($$[$0].valor != null && $$[$0].tipo != null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                if(isNaN($$[$0].tipo) == false)
                {
                    this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                }
                else
                {
                    this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
                }
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
            else if($$[$0].valor != null && $$[$0].tipo == null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, null, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo('=', null, null));
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
        else
        {
            if($$[$0].valor == null && $$[$0].tipo != null)
            {
                this.$ = {
                    instrucciones : new DeclaracionVarType($$[$0-1], null, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            }
            else if($$[$0].valor != null && $$[$0].tipo != null)
            {
                this.$ = {
                    instrucciones : new DeclaracionVarType($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
    
break;
case 140:

        if($$[$0].estype == false)
        {
            if($$[$0].valor != null && $$[$0].tipo == null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, null, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
            else
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                this.$.nodo.agregarHijos(new Nodo('=', null, null));
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
        else
        {
            this.$ = {
                instrucciones : new DeclaracionVarType($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                nodo : new Nodo(null, "Declaracion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
            this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            this.$.nodo.agregarHijos(new Nodo('=', null, null))
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 150: case 155:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : null,
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 151:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 152:

        hermano = eval('$$');
        this.$ = $$[$0]
    
break;
case 154:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : null,
            tipo : null
        };
    
break;
case 158:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : null,
            tipo : hermano[hermano.length - 2]
        }
    
break;
case 159:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        };
    
break;
case 160:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : null,
            tipo : hermano[hermano.length - 2]
        }
    
break;
case 162:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : hermano[hermano.length - 3].instrucciones,
            tipo : hermano[hermano.length - 6],
            nodo : hermano[hermano.length - 3].nodo
        }
    
break;
case 163:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 164:

        this.$ = {
            instrucciones : new SentenciaReturn($$[$0].instrucciones, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Return", null, null)
        }
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 165:

        hermano = eval('$$');
        this.$ = {
            instrucciones : hermano[hermano.length - 2].instrucciones,
            nodo : hermano[hermano.length - 2].nodo
        };
    
break;
case 166: case 185:

        this.$ = {
            instrucciones : null,
            nodo : null
        }
    
break;
case 168:

        this.$ = {
            instrucciones : new SentenciaFor($$[$0].declarado, $$[$0].id, $$[$0].valor_inicio.instrucciones, $$[$0].condicion.instrucciones, $$[$0].incremento.instrucciones, $$[$0].instrucciones.instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "For", null)
        }
        instruccion = new Nodo("=", null, null)
        instruccion.agregarHijos(new Nodo($$[$0].id, null, null))
        instruccion.agregarHijos($$[$0].valor_inicio.nodo)
        this.$.nodo.agregarHijos(instruccion);
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0].condicion.nodo)
        this.$.nodo.agregarHijos(instruccion)
        this.$.nodo.agregarHijos($$[$0].incremento.nodo)
        if($$[$0].instrucciones.nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].instrucciones.nodo)
        }
    
break;
case 169:

        this.$ = {
            id : $$[$0-8],
            valor_inicio : $$[$0-6],
            condicion : $$[$0-4],
            incremento : $$[$0-2],
            instrucciones : $$[$0],
            declarado : 1
        }
    
break;
case 170:

        this.$ = {
            id : $$[$0-8],
            valor_inicio : $$[$0-6],
            condicion : $$[$0-4],
            incremento : $$[$0-2],
            instrucciones : $$[$0],
            declarado : 0
        }
    
break;
case 171:

        this.$ = {
            instrucciones : new SentenciaDowhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo(null, "Do_while", null)
        }
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-2].nodo)
        if($$[$0-5].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-5].nodo)
        }
        this.$.nodo.agregarHijos(instruccion)
    
break;
case 172:

        this.$ = {
            instrucciones : new SentenciaWhile($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "While", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].nodo != null){
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 173:

        this.$ = {
            instrucciones : new SentenciaSwitch($$[$0-3].instrucciones, $$[$0].casos, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Switch", null)
        };
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].casos != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo_casos)
        }
    
break;
case 175:

        this.$ = {
            casos : null,
            nodo_casos : null
        };
    
break;
case 176:

        hermano = eval('$$');
        if(hermano[hermano.length - 1].casos == null)
        {
            this.$ = {
                casos : [new Caso($$[$0-2].instrucciones, hermano[hermano.length - 1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos($$[$0-2].nodo)
            if(hermano[hermano.length - 1].instrucciones != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
        }
        else
        {
            hermano[hermano.length - 1].casos.unshift(new Caso($$[$0-2], hermano[hermano.length - 1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column))
            this.$ = {
                casos : hermano[hermano.length - 1].casos,
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos($$[$0-2].nodo);
            if(hermano[hermano.length - 1].nodo != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }            
            this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo_casos)
        }
    
break;
case 177:

        hermano = eval('$$');
        if(hermano[hermano.length - 1].casos == null)
        {
            this.$ = {
                casos : [new CasoDef(hermano[hermano.length - 1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)],
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos(new Nodo("Default", null, null));
            if(hermano[hermano.length - 1].instrucciones != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
        }
        else
        {
            hermano[hermano.length - 1].casos.unshift(new CasoDef(hermano[hermano.length - 1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column));
            this.$ = {
                casos : hermano[hermano.length - 1].casos,
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos(new Nodo("Default", null, null))
            if(hermano[hermano.length - 1].nodo != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
            this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo_casos)
        }
    
break;
case 178:

        hermano = eval('$$')
        if(hermano[hermano.length - 1] == null)
        {
            this.$ = {
                instrucciones : hermano[hermano.length - 2].instrucciones,
                casos : null,
                nodo : hermano[hermano.length - 2].nodo,
                nodo_casos : null
            }
        }
        else
        {
            this.$ = {
                instrucciones : hermano[hermano.length - 2].instrucciones,
                casos : hermano[hermano.length - 1].casos,
                nodo : hermano[hermano.length - 2].nodo,
                nodo_casos : hermano[hermano.length - 1].nodo_casos
            }
        }
        
    
break;
case 179:

        hermano = eval('$$');
        this.$ = {
            instrucciones : null,
            casos : hermano[hermano.length - 1].casos,
            nodo : null,
            nodo_casos : hermano[hermano.length - 1].nodo_casos
        }
    
break;
case 180:

        this.$ = {
            instrucciones : null,
            casos : null,
            nodo : null,
            nodo_casos : null
        }
    
break;
case 182:

        this.$ = null
    
break;
case 183:

        this.$ = {
            instrucciones : new SentenciaIf($$[$0-3].instrucciones, $$[$0-1].instrucciones, $$[$0].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "IF", null)
        };
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-3].nodo);
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0-1].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-1].nodo)
        }

        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 184:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "ELSE", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 189:

        this.$ = {
            contenido : {
                instrucciones : null
            }
            ,
            nodo : null
        };
    
break;
case 190:

        this.$ = {
            contenido : $$[$0],
            estype : false
        }
    
break;
case 191:

        this.$ = {
            contenido : $$[$0-1],
            estype : true
        }
    
break;
case 192:

        hermano = eval('$$');
        this.$ = hermano[hermano.length-1];
        console.log("expresionesfuncion", this.$);
    
break;
case 193:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new SentenciaTernaria(hermano[hermano.length - 5].instrucciones, hermano[hermano.length-3].instrucciones, hermano[hermano.length - 1].instrucciones, hermano[hermano.length - 5].instrucciones.linea, hermano[hermano.length - 5].instrucciones.columna),
            nodo : new Nodo(null, "Ternaria", null)
        }
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos(hermano[hermano.length - 5].nodo)
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos(hermano[hermano.length - 3].nodo) 
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 194: case 195: case 202: case 203: case 206: case 207: case 210: case 211: case 216: case 217: case 220: case 221: case 225: case 226: case 228: case 231: case 232: case 235: case 236: case 239:

        hermano = eval('$$');
        this.$ = hermano[hermano.length-1];
    
break;
case 196:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Incremento(hermano[hermano.length - 4].instrucciones, OpcionesAritmeticas.MAS, hermano[hermano.length - 1].instrucciones, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo("+=", null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 197:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Incremento(hermano[hermano.length - 4].instrucciones, OpcionesAritmeticas.MAS, hermano[hermano.length - 1].instrucciones, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo("-=", null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 198:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Incremento(hermano[hermano.length - 4].instrucciones, OpcionesAritmeticas.MAS, hermano[hermano.length - 1].instrucciones, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo("*=", null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 199:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Incremento(hermano[hermano.length - 4].instrucciones, OpcionesAritmeticas.MAS, hermano[hermano.length - 1].instrucciones, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo("/=", null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 200:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Incremento(hermano[hermano.length - 4].instrucciones, OpcionesAritmeticas.MAS, hermano[hermano.length - 1].instrucciones, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo("%=", null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 201:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Incremento(hermano[hermano.length - 4].instrucciones, OpcionesAritmeticas.MAS, hermano[hermano.length - 1].instrucciones, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo("**=", null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 204:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Relacional(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OperacionesLogicas.OR, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length-4].instrucciones.columna),
            nodo : new Nodo('||', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 205:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Relacional(hermano[hermano.length - 4], hermano[hermano.length - 1], OperacionesLogicas.AND, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna),
            nodo : new Nodo('&&', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 208:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Relacional(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OperacionesLogicas.IGUAL, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('==', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo);
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 209:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Relacional(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OperacionesLogicas.NOIGUAL, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna), 
            nodo : new Nodo('!=', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo);
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 212:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Relacional(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OperacionesLogicas.MAYORIGUAL, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('>=', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 213:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Relacional(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OperacionesLogicas.MENORIGUAL, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('<=', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 214:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Relacional(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OperacionesLogicas.MENOR, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('<', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 215:

        hermano = eval('$$');
        this.$ ={
            instrucciones : new Relacional(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OperacionesLogicas.MAYOR, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('>', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 218:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Aritmeticas(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OpcionesAritmeticas.MENOS, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo);
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 219:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Aritmeticas(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OpcionesAritmeticas.MAS, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('+', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo);
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 222:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Aritmeticas(hermano[hermano.length - 4], hermano[hermano.length - 1], OpcionesAritmeticas.MODULO, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna),
            nodo : new Nodo('%', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo);
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 223:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Aritmeticas(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OpcionesAritmeticas.DIV, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna) ,
            nodo : new Nodo('/', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo);
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 224:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Aritmeticas(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OpcionesAritmeticas.POR, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('*', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo);
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 227:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Aritmeticas(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OpcionesAritmeticas.POTENCIA, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('**', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo);
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 233:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Incremento(hermano[hermano.length-2].instrucciones.nombre, OpcionesAritmeticas.MAS, new Literal(1, _$[$0].first_line, _$[$0].first_column, 0), hermano[hermano.length-2].instrucciones.linea, hermano[hermano.length-2].instrucciones.columna), 
            nodo : new Nodo(null, "Incremento", null)
        }
        this.$.nodo.agregarHijos(new Nodo(hermano[hermano.length-2].instrucciones.nombre, null, null));
        this.$.nodo.agregarHijos(new Nodo('++', null, null))
    
break;
case 234:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Incremento(hermano[hermano.length-2].instrucciones.nombre, OpcionesAritmeticas.MENOS, new Literal(1, _$[$0].first_line, _$[$0].first_column, 0), hermano[hermano.length-2].instrucciones.linea, hermano[hermano.length-2].instrucciones.columna),
            nodo : new Nodo(null, "Incremento", null)
        }
        this.$.nodo.agregarHijos(new Nodo(hermano[hermano.length-2].instrucciones.nombre, null, null));
        this.$.nodo.agregarHijos(new Nodo('--', null, null))
    
break;
case 237:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Variable(hermano[hermano.length-2].instrucciones.nombre, hermano[hermano.length-1].instrucciones, 7, hermano[hermano.length-2].instrucciones.linea, hermano[hermano.length-2].instrucciones.columna),
            nodo : new Nodo(null, 'EXP', null)
        }
        this.$.nodo.agregarHijos(new Nodo(hermano[hermano.length - 2].instrucciones.nombre, null, null))
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
        
    
break;
case 238:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Llamada(hermano[hermano.length-3].instrucciones.nombre, hermano[hermano.length-1].instrucciones, hermano[hermano.length-3].instrucciones.linea, hermano[hermano.length-3].instrucciones.columna),
            nodo : new Nodo(null, "Llamada", null)
        }
        this.$.nodo.agregarHijos(new Nodo(hermano[hermano.length - 3].instrucciones.nombre, null, null));
        if(hermano[hermano.length - 1].nodo != null)
        {
            this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
        }
    
break;
case 241:

         if($$[$0].includes('\"'))
        {
            this.$ = {
                instrucciones : new Literal($$[$0].replace(/['"]+/g, ''), _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0].replace(/['"]+/g, ''), null, null)
            }
        }
        else if($$[$0].includes("'"))
        {
            this.$ = {
                instrucciones : new Literal($$[$0].replace(/["'"]+/g, ''), _$[$0].first_line, _$[$0].first_column),
                nodo : new Nodo($$[$0].replace(/["'"]+/g, ''), null, null)
            }
        }
        else
        {
            this.$ = {
                instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column),
                nodo : new Nodo($$[$0], null, null)
            }
        }
    
break;
case 247:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Imprimir(hermano[hermano.length-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "Imprimir", null)
        }
        if(hermano[hermano.length - 1].nodo != null)
        {
            this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
        }
    
break;
case 248:

        this.$ = {
            instrucciones : new GraficarTs(_$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(NULL, "GraficarTs", null)
        }
    
break;
case 249:

        hermano = eval('$$');
        this.$ = {
            instrucciones : [],
            nodo : null
        };
    
break;
case 252:

        this.$ = {
            instrucciones : $$[$0],
            nodo : new Nodo(null, "ATRIB", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 253:

        hermano = eval('$$');
        hermano[hermano.length-1].instrucciones.unshift(hermano[hermano.length - 2].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length-1].instrucciones,
            nodo : hermano[hermano.length - 2].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 254: case 258:

        hermano = eval('$$');
        this.$ = {
            instrucciones : [hermano[hermano.length-1].instrucciones],
            nodo : hermano[hermano.length - 1].nodo
        }
    
break;
case 256:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 257:

        hermano = eval('$$');
        hermano[hermano.length-1].instrucciones.unshift(hermano[hermano.length - 3].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length-1].instrucciones,
            nodo : hermano[hermano.length - 3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 260:

        this.$ = {
            instrucciones : new ValoresTipo($$[$0-2], $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 261:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length -3].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : hermano[hermano.length-3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 262:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length - 2].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : hermano[hermano.length -2].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 263: case 268:

        hermano = eval('$$');
        this.$ = {
            instrucciones : [hermano[hermano.length - 1].instrucciones],
            nodo : hermano[hermano.length - 1].nodo
        }
    
break;
case 265:

        this.$ = {
            instrucciones : new VariablesTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "Parametro", null) 
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0]], null, null));
    
break;
case 266:

        this.$ = {
            instrucciones : new VariablesTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
    
break;
case 267:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length - 3].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : hermano[hermano.length - 3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:26,15:27,16:28,17:29,18:30,20:$V1,21:$V2,22:25,25:$V3,26:$V4,27:$V5,28:$V6,30:24,40:$V7,41:$V8,42:$V9,49:$Va,54:$Vb,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl,90:$Vm},{1:[3]},{2:$V0,5:[1,41],6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:26,15:27,16:28,17:29,18:30,20:$V1,21:$V2,22:25,25:$V3,26:$V4,27:$V5,28:$V6,30:24,40:$V7,41:$V8,42:$V9,49:$Va,54:$Vb,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl,90:$Vm},o($Vn,[2,3]),{8:[1,43]},{8:[1,44]},{8:[1,45],23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},o($Vn,[2,7]),o($Vn,[2,8]),o($Vn,[2,9]),{8:[1,61],19:62,43:$VD},{28:[1,64]},{28:[1,65]},{28:[1,66]},{10:67,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:69,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:70,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},o($VF,[2,103]),o($VF,[2,104]),o($VF,[2,105]),o($VF,[2,106]),o($VG,$VH,{52:71,26:$VI,29:[1,72],32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,81:$VR}),o($VF,[2,109]),o($VF,[2,110]),o($VF,[2,111]),o($VF,[2,112]),o($VS,[2,11]),o($VS,[2,12]),o($VS,[2,13]),o($VS,[2,14]),o($VS,[2,15]),{8:[1,83]},{8:[1,84],10:85,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{28:[1,86]},{81:[1,87]},{26:[1,88]},{26:[1,89]},{26:[1,90]},{26:[1,91]},{19:92,43:$VD},{26:[1,93]},{1:[2,1]},o($Vn,[2,2]),o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),{10:94,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:95,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:96,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:97,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:98,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:99,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:100,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:101,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:102,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:103,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:104,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:105,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:106,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:107,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:108,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},o($Vn,[2,10]),o($VS,[2,16]),{2:$VT,7:111,10:112,11:113,12:114,14:26,15:27,16:28,17:29,18:30,20:$V1,21:$V2,22:25,25:$V3,26:$V4,27:$V5,28:$V6,30:24,40:$V7,41:$V8,42:$V9,45:[1,110],47:109,49:$Va,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{8:[2,74],24:[1,116],29:[1,117]},{24:[1,118],29:[1,119]},{29:[1,120]},o($VF,[2,86]),o($VF,$VH,{52:121,26:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,81:$VR}),o($VF,[2,95]),{23:$Vo,31:[1,122],61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},o($VG,$VU,{29:[1,123],81:$VV}),{10:126,22:25,26:$V4,28:$VE,30:24,43:[1,125],60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:129,22:25,26:$V4,28:$VE,30:24,31:[1,127],60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,82:128,83:$Vk,85:$Vl},o($VF,[2,23]),o($VF,[2,24]),{10:130,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:131,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:132,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:133,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:134,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:135,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{28:[1,136]},o($VS,[2,17]),o($VS,[2,18]),{8:[1,137],23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{26:[1,138]},{84:[1,139]},{31:[1,140]},{10:141,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:142,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:143,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{41:[1,144]},{27:[1,145],28:[1,146]},o([8,23,24,28,31,45,57,61,62],[2,87],{63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o([8,23,24,28,31,45,57,62],[2,88],{61:$Vp,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($VW,[2,89],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($VW,[2,90],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($VX,[2,91],{69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($VX,[2,92],{69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($VX,[2,93],{69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($VX,[2,94],{69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o([8,23,24,28,31,45,57,61,62,63,64,65,66,67,68,69,70],[2,96],{71:$Vz,72:$VA,73:$VB,74:$VC}),o([8,23,24,28,31,45,57,61,62,63,64,65,66,67,68,69],[2,97],{70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o([8,23,24,28,31,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73],[2,98],{74:$VC}),o([8,23,24,28,31,45,57,61,62,63,64,65,66,67,68,69,70,72,73],[2,99],{71:$Vz,74:$VC}),o([8,23,24,28,31,45,57,61,62,63,64,65,66,67,68,69,70,73],[2,100],{71:$Vz,72:$VA,74:$VC}),o($VF,[2,101]),{23:$Vo,24:[1,147],61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{2:$VY,7:149,10:152,11:150,12:151,14:26,15:27,16:28,17:29,18:30,20:$V1,21:$V2,22:25,25:$V3,26:$V4,27:$V5,28:$V6,30:24,40:$V7,41:$V8,42:$V9,45:[1,148],49:$Va,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},o($VZ,[2,47]),{8:[1,154]},{8:[1,155],23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},o($V_,[2,55]),o($V_,[2,56]),{8:[1,156],19:62,43:$VD},{28:[1,158],58:157,86:$V$,87:$V01,88:$V11,89:$V21},{10:163,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{28:[1,165],58:164,86:$V$,87:$V01,88:$V11,89:$V21},{10:166,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{43:[1,167]},o($VF,$VU,{81:$VV}),o($VF,[2,102]),{10:168,22:25,26:$V4,28:$VE,30:24,43:[1,169],60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{28:[1,170]},{28:$V31,53:171},{8:[1,173],23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},o($VF,[2,115]),{31:[1,174],57:$V41},o($V51,[2,121],{23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($V61,[2,25],{23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($V61,[2,26],{23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($V61,[2,27],{23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($V61,[2,28],{23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($V61,[2,29],{23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($V61,[2,30],{23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($V71,[2,114]),o($VS,[2,19]),{28:$V81,31:[1,178],91:176,92:177,156:179},{26:[1,181]},o($VF,[2,119]),{23:$Vo,31:[1,182],61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{23:$Vo,31:[1,183],61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{23:$Vo,31:[1,184],61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{26:[1,185]},{28:[1,186]},{29:[1,187]},{10:188,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},o($VZ,[2,46]),{8:[1,189]},o($V_,[2,49]),o($V_,[2,50]),{8:[1,190],23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{8:[1,191],19:62,43:$VD},o($V_,[2,53]),o($V_,[2,54]),o($V_,[2,57]),{8:[2,73],29:[1,192]},{8:[2,77],29:[1,193]},o($V91,[2,122]),o($V91,[2,123]),o($V91,[2,124]),o($V91,[2,125]),{8:[2,72],23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{29:[1,194]},{29:[1,195]},{8:[2,79],23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{28:[1,197],55:196},{8:[1,198],23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{28:$V31,53:199},o($V71,[2,113]),{28:$Va1,45:[1,200]},{24:[1,202]},o($VS,[2,61]),o($VF,[2,116]),{10:203,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},o($Vn,[2,126]),{31:[1,204]},{24:[1,205]},{31:[2,268],57:[1,207],157:206},{24:[1,208]},{10:129,22:25,26:$V4,28:$VE,30:24,31:[1,209],60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,82:210,83:$Vk,85:$Vl},{19:211,43:$VD},{43:[1,212]},{19:213,43:$VD},{10:214,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{29:[1,215]},{10:216,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},o($V61,[2,20],{23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($V_,[2,48]),o($V_,[2,51]),o($V_,[2,52]),{10:217,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:219,22:25,26:$V4,28:$VE,30:24,43:[1,218],60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{10:220,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{28:[1,222],43:[1,221]},{28:[1,224],45:[1,223]},{24:[1,225]},o($VS,[2,58]),{28:$Va1,45:[1,226]},{8:[1,227]},{24:[1,228]},{10:229,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},o($V51,[2,120],{23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),{24:[1,230]},{28:$Vb1,58:232,86:$V$,87:$V01,88:$V11,89:$V21,93:231},{31:[2,264]},{28:$V81,92:234,156:179},{28:[1,236],58:235,86:$V$,87:$V01,88:$V11,89:$V21},o($VF,[2,117]),{31:[1,237],57:$V41},o($VS,[2,42],{50:238,51:[1,239]}),{44:240,45:[1,241],46:[1,242],48:[1,243]},o($VS,[2,32]),{23:$Vo,31:[1,244],61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{10:245,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{8:[1,246],23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{8:[2,71],23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{28:$V31,53:247},{8:[2,76],23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{8:[2,78],23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{28:$V31,53:248},{8:[2,81]},{8:[2,62]},{24:[1,249]},{28:$Vc1,56:250,58:251,86:$V$,87:$V01,88:$V11,89:$V21},{8:[1,253]},o($VS,[2,60]),{10:254,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},o($Vd1,[2,85],{23:$Vo,57:[1,255],61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),{28:$Vb1,58:232,86:$V$,87:$V01,88:$V11,89:$V21,93:256},{43:$Ve1,94:257},{43:[2,129]},{43:[2,130]},{31:[2,267]},o($V51,[2,265]),o($V51,[2,266]),o($VF,[2,118]),o($VS,[2,43]),{14:259,19:260,43:$VD,49:$Va},{45:[1,261],46:[1,262],48:[1,263]},o($VS,[2,34]),{10:264,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{24:[1,265]},{8:[1,266]},{8:[1,267],23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{10:268,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{28:$Va1,45:[1,269]},{28:$Va1,45:[1,270]},{28:$Vc1,56:271,58:251,86:$V$,87:$V01,88:$V11,89:$V21},o($Vd1,[2,68],{8:[1,273],57:[1,272]}),o($Vf1,[2,69]),o($Vf1,[2,70]),o($VS,[2,59]),o($Vd1,[2,83],{23:$Vo,57:[1,274],61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC}),o($Vd1,[2,84]),{43:$Ve1,94:275},o($Vn,[2,128]),{2:$Vg1,20:$Vh1,21:$Vi1,25:$Vj1,26:$Vk1,27:$Vl1,28:$Vm1,40:$Vn1,41:$Vo1,42:$Vp1,45:[1,278],49:$Vq1,59:$Vr1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,83:$Vz1,85:$VA1,95:276,96:277,97:279,99:280,101:281,104:284,105:285,106:286,107:287,108:288,109:289,110:290,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},o($VS,[2,44]),o($VS,[2,45]),o($VS,[2,33]),{10:321,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{24:[1,322]},{23:$Vo,24:[1,323],61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},o($VB1,[2,41]),o($VS,[2,31]),{10:324,22:25,26:$V4,28:$VE,30:24,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:22,80:$Vj,83:$Vk,85:$Vl},{8:[1,325],23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{8:[2,75]},{8:[2,80]},o($Vd1,[2,65],{8:[1,327],57:[1,326]}),o($Vd1,[2,66]),o($Vd1,[2,67]),o($Vd1,[2,82]),o($Vn,[2,127]),o($VZ,[2,131]),{45:[1,328]},o($VZ,[2,133]),o($VB1,[2,136],{97:279,99:280,101:281,104:284,105:285,106:286,107:287,108:288,109:289,110:290,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313,98:329,96:330,2:$Vg1,20:$Vh1,21:$Vi1,25:$Vj1,26:$Vk1,27:$Vl1,28:$Vm1,40:$Vn1,41:$Vo1,42:$Vp1,49:$Vq1,59:$Vr1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,83:$Vz1,85:$VA1}),{8:[2,189],29:[1,332],100:331},{8:[1,333]},{28:[1,334]},{28:[1,335]},o($V_,[2,141]),o($V_,[2,142]),o($V_,[2,143]),o($V_,[2,144]),o($V_,[2,145]),o($V_,[2,146]),o($V_,[2,147]),{8:[1,336]},o($VC1,[2,194],{127:337,23:[1,338]}),{81:[1,339]},{26:[1,340]},{26:[1,341]},{26:[1,342]},{26:[1,343]},{43:$Ve1,94:344},{26:[1,345]},{8:[1,346]},{8:[1,349],26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:348,117:347,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},o($VD1,$VE1,{129:350,34:$VF1,35:$VG1,36:$VH1,37:$VI1,38:$VJ1,39:$VK1}),o($VL1,$VM1,{131:357,61:$VN1,62:$VO1}),o($VP1,$VQ1,{133:360,63:$VR1,64:$VS1}),o($VT1,$VU1,{135:363,65:$VV1,66:$VW1,67:$VX1,68:$VY1}),o($VZ1,$V_1,{137:368,69:$V$1,70:$V02}),o($V12,$V22,{139:371,71:$V32,72:$V42,73:$V52}),o($V62,$V72,{141:375,74:$V82}),{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,140:377,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,140:378,142:311,143:312,145:313},o($V92,[2,231]),o($V92,[2,235],{144:379,32:[1,380],33:[1,381]}),o($Va2,[2,239],{146:382,147:383,150:385,26:[1,384],81:$Vb2}),o($Vc2,[2,240]),o($Vc2,[2,241]),o($Vc2,[2,242]),o($Vc2,[2,243]),o($Vc2,[2,244]),o($Vc2,[2,245]),{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:387,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{23:$Vo,24:[1,388],61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},o($VB1,[2,38],{79:22,30:24,22:25,14:26,15:27,16:28,17:29,18:30,7:111,10:112,11:113,12:114,47:389,2:$VT,20:$V1,21:$V2,25:$V3,26:$V4,27:$V5,28:$V6,40:$V7,41:$V8,42:$V9,49:$Va,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj,83:$Vk,85:$Vl}),o($VB1,[2,40],{79:22,30:24,22:25,14:26,15:27,16:28,17:29,18:30,7:111,10:112,11:113,12:114,47:390,2:$VT,20:$V1,21:$V2,25:$V3,26:$V4,27:$V5,28:$V6,40:$V7,41:$V8,42:$V9,49:$Va,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj,83:$Vk,85:$Vl}),{8:[1,391],23:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC},{28:$Vd2,30:392},o($Vd1,[2,63]),o($Vd1,[2,64]),o($VZ,[2,132]),o($VB1,[2,134]),o($VB1,[2,135]),{8:[1,394]},{26:$Vk1,28:$Vm1,43:[1,397],60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:396,125:395,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},o($V_,[2,138]),{8:[1,400],24:[1,399],29:[1,401],102:398},{24:[1,403],29:[1,404],103:402},o($V_,[2,148]),o($VC1,[2,192]),{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,126:405,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{84:[1,406]},{31:[1,407]},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:408,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:409,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:410,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{41:[1,411]},{26:$Vk1,27:[1,413],28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:414,118:412,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},o($V_,[2,167]),o($V_,[2,164]),{8:[1,415]},o($V_,[2,166]),o($VD1,[2,195]),{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,128:416,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,128:417,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,128:418,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,128:419,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,128:420,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,128:421,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},o($VL1,[2,203]),{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,130:422,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,130:423,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},o($VP1,[2,207]),{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,132:424,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,132:425,134:305,136:306,138:307,140:308,142:311,143:312,145:313},o($VT1,[2,211]),{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,134:426,136:306,138:307,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,134:427,136:306,138:307,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,134:428,136:306,138:307,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,134:429,136:306,138:307,140:308,142:311,143:312,145:313},o($VZ1,[2,217]),{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,136:430,138:307,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,136:431,138:307,140:308,142:311,143:312,145:313},o($V12,[2,221]),{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,138:432,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,138:433,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,138:434,140:308,142:311,143:312,145:313},o($V62,[2,226]),{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,140:435,142:311,143:312,145:313},o($V92,[2,229]),o($V92,[2,230]),o($V92,[2,232]),o($V92,[2,233]),o($V92,[2,234]),o($Va2,[2,236]),o($Va2,[2,237]),{26:$Vk1,28:$Vm1,31:$Ve2,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:440,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313,148:436,149:438,152:439},o($Va2,[2,254],{150:385,151:441,147:442,81:$Vb2}),{28:[1,443]},{31:[1,444]},o($VB1,[2,36],{79:22,30:24,22:25,14:26,15:27,16:28,17:29,18:30,7:111,10:112,11:113,12:114,47:445,2:$VT,20:$V1,21:$V2,25:$V3,26:$V4,27:$V5,28:$V6,40:$V7,41:$V8,42:$V9,49:$Va,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj,83:$Vk,85:$Vl}),o($VB1,[2,37],{79:22,30:24,22:25,14:26,15:27,16:28,17:29,18:30,7:149,11:150,12:151,10:152,2:$VY,20:$V1,21:$V2,25:$V3,26:$V4,27:$V5,28:$V6,40:$V7,41:$V8,42:$V9,49:$Va,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj,83:$Vk,85:$Vl}),o($VB1,[2,39],{79:22,30:24,22:25,14:26,15:27,16:28,17:29,18:30,7:149,11:150,12:151,10:152,2:$VY,20:$V1,21:$V2,25:$V3,26:$V4,27:$V5,28:$V6,40:$V7,41:$V8,42:$V9,49:$Va,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj,83:$Vk,85:$Vl}),{28:$Vd2,30:446},{31:[1,447]},{32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ},o($V_,[2,137]),{8:[2,188]},{8:[2,190]},{28:$Vf2,116:448,154:449},o($V_,[2,139]),{28:[1,453],58:452,86:$V$,87:$V01,88:$V11,89:$V21,113:451},o($V_,[2,154]),{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:454,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},o($V_,[2,140]),{28:[1,457],58:456,86:$V$,87:$V01,88:$V11,89:$V21,111:455},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:458,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{24:[1,459]},{26:[1,460]},{8:[2,248]},{31:[1,461]},{31:[1,462]},{31:[1,463]},{26:[1,464]},o($V_,[2,168]),{28:[1,465]},{29:[1,466]},o($V_,[2,165]),o($VD1,$VE1,{129:467,34:$VF1,35:$VG1,36:$VH1,37:$VI1,38:$VJ1,39:$VK1}),o($VD1,$VE1,{129:468,34:$VF1,35:$VG1,36:$VH1,37:$VI1,38:$VJ1,39:$VK1}),o($VD1,$VE1,{129:469,34:$VF1,35:$VG1,36:$VH1,37:$VI1,38:$VJ1,39:$VK1}),o($VD1,$VE1,{129:470,34:$VF1,35:$VG1,36:$VH1,37:$VI1,38:$VJ1,39:$VK1}),o($VD1,$VE1,{129:471,34:$VF1,35:$VG1,36:$VH1,37:$VI1,38:$VJ1,39:$VK1}),o($VD1,$VE1,{129:472,34:$VF1,35:$VG1,36:$VH1,37:$VI1,38:$VJ1,39:$VK1}),o($VL1,$VM1,{131:473,61:$VN1,62:$VO1}),o($VL1,$VM1,{131:474,61:$VN1,62:$VO1}),o($VP1,$VQ1,{133:475,63:$VR1,64:$VS1}),o($VP1,$VQ1,{133:476,63:$VR1,64:$VS1}),o($VT1,$VU1,{135:477,65:$VV1,66:$VW1,67:$VX1,68:$VY1}),o($VT1,$VU1,{135:478,65:$VV1,66:$VW1,67:$VX1,68:$VY1}),o($VT1,$VU1,{135:479,65:$VV1,66:$VW1,67:$VX1,68:$VY1}),o($VT1,$VU1,{135:480,65:$VV1,66:$VW1,67:$VX1,68:$VY1}),o($VZ1,$V_1,{137:481,69:$V$1,70:$V02}),o($VZ1,$V_1,{137:482,69:$V$1,70:$V02}),o($V12,$V22,{139:483,71:$V32,72:$V42,73:$V52}),o($V12,$V22,{139:484,71:$V32,72:$V42,73:$V52}),o($V12,$V22,{139:485,71:$V32,72:$V42,73:$V52}),o($V62,$V72,{141:486,74:$V82}),o($Va2,[2,238]),o($Va2,[2,249]),{31:[1,487]},{31:[2,258],57:[1,489],153:488},o($V51,[2,256]),o($Va2,[2,251]),o($Va2,[2,253]),o([8,23,24,28,29,31,32,33,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81],[2,252]),o($Vc2,[2,246]),o($VB1,[2,35],{79:22,30:24,22:25,14:26,15:27,16:28,17:29,18:30,7:149,11:150,12:151,10:152,2:$VY,20:$V1,21:$V2,25:$V3,26:$V4,27:$V5,28:$V6,40:$V7,41:$V8,42:$V9,49:$Va,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj,83:$Vk,85:$Vl}),{31:[1,490]},{19:491,43:$VD},{45:[1,492]},{28:$Vf2,45:[2,263],57:[1,494],116:495,154:449,155:493},{24:[1,496]},o($V_,[2,153]),{8:[1,498],29:[1,499],114:497},{8:[1,501],29:[1,502],115:500},{8:[1,503]},o($V_,[2,149]),{29:[1,504]},{29:[1,505]},{8:[1,506]},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,126:507,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,31:$Ve2,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:440,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313,148:508,149:438,152:439},{43:$Ve1,94:509},{43:[1,510]},{43:$Ve1,94:511},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:512,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{29:[1,513]},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:514,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},o($VD1,[2,196]),o($VD1,[2,197]),o($VD1,[2,198]),o($VD1,[2,199]),o($VD1,[2,200]),o($VD1,[2,201]),o($VL1,[2,204]),o($VL1,[2,205]),o($VP1,[2,208]),o($VP1,[2,209]),o($VT1,[2,212]),o($VT1,[2,213]),o($VT1,[2,214]),o($VT1,[2,215]),o($VZ1,[2,218]),o($VZ1,[2,219]),o($V12,[2,222]),o($V12,[2,223]),o($V12,[2,224]),o($V62,[2,227]),o($Va2,[2,250]),{31:[2,255]},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:440,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313,149:515,152:439},{19:516,43:$VD},o($VS,[2,22]),{8:[2,191]},{45:[2,259]},{28:$Vf2,116:517,154:449},{45:[2,262]},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:518,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},o($V_,[2,156]),o($V_,[2,158]),{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:519,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},o($V_,[2,157]),o($V_,[2,160]),{26:$Vk1,28:$Vm1,43:$Vg2,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:522,112:520,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},o($V_,[2,155]),{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:523,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{26:$Vk1,28:$Vm1,43:$Vg2,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:522,112:524,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},o($V_,[2,150]),o($VC1,[2,193]),{8:[2,247]},o($V_,[2,185],{123:525,51:[1,526]}),{45:[1,529],46:$Vh2,48:$Vi2,119:527,120:528},o($V_,[2,172]),{31:[1,532]},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:533,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{8:[1,534]},{31:[2,257]},o($VS,[2,21]),{45:[2,261]},o([28,45,57],[2,260]),{8:[1,535]},o($V_,[2,161]),{28:$Vf2,116:536,154:449},{8:[1,537]},{8:[1,538]},o($V_,[2,152]),o($V_,[2,183]),{43:$Ve1,49:$Vq1,94:541,104:540,124:539},o($V_,[2,173]),{45:[1,542]},o($V_,[2,175]),{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:543,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{24:[1,544]},{8:[1,545]},{8:[1,546]},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:547,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},o($V_,[2,159]),{45:[1,548]},o($V_,[2,163]),o($V_,[2,151]),o($V_,[2,184]),o($V_,[2,186]),o($V_,[2,187]),o($V_,[2,174]),{24:[1,549]},{2:$Vg1,20:$Vh1,21:$Vi1,25:$Vj1,26:$Vk1,27:$Vl1,28:$Vm1,40:$Vn1,41:$Vo1,42:$Vp1,45:$Vj2,46:$Vh2,48:$Vi2,49:$Vq1,59:$Vr1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,83:$Vz1,85:$VA1,96:551,97:279,99:280,101:281,104:284,105:285,106:286,107:287,108:288,109:289,110:290,120:552,121:550,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},o($V_,[2,171]),{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:553,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{8:[1,554]},{8:[1,555]},{2:$Vg1,20:$Vh1,21:$Vi1,25:$Vj1,26:$Vk1,27:$Vl1,28:$Vm1,40:$Vn1,41:$Vo1,42:$Vp1,45:$Vj2,46:$Vh2,48:$Vi2,49:$Vq1,59:$Vr1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,83:$Vz1,85:$VA1,96:551,97:279,99:280,101:281,104:284,105:285,106:286,107:287,108:288,109:289,110:290,120:552,121:556,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{45:[2,177]},{45:[2,182],46:$Vh2,48:$Vi2,120:558,122:557},{45:[2,179]},{8:[1,559]},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:560,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},o($V_,[2,162]),{45:[2,176]},{45:[2,178]},{45:[2,181]},{26:$Vk1,28:$Vm1,60:$Vs1,69:$Vt1,75:$Vu1,76:$Vv1,77:$Vw1,78:$Vx1,80:$Vy1,99:561,126:292,128:302,130:303,132:304,134:305,136:306,138:307,140:308,142:311,143:312,145:313},{31:[1,562]},{31:[1,563]},{43:$Ve1,94:564},{43:$Ve1,94:565},o($V_,[2,170]),o($V_,[2,169])],
defaultActions: {41:[2,1],206:[2,264],222:[2,81],223:[2,62],232:[2,129],233:[2,130],234:[2,267],269:[2,75],270:[2,80],395:[2,188],396:[2,190],407:[2,248],488:[2,255],492:[2,191],493:[2,259],495:[2,262],508:[2,247],515:[2,257],517:[2,261],550:[2,177],552:[2,179],556:[2,176],557:[2,178],558:[2,181]},
parseError: function parseError (str, hash) {
    console.log(hash)
    if (hash.recoverable) {
        this.trace(str);
        let textoerror = "Se encontro: " + hash.text + ", se esperaba: ";
        for(let i = 0; i < hash.expected.length; i++)
        {
            if(i != hash.expected.length - 1)
            {
                textoerror += hash.expected[i] + ",";
            }
            else
            {
                textoerror += hash.expected[i];
            }
        }

        lerrores.push(new _Error(hash.loc.first_line, hash.loc.last_column + 1, "Sintactico", textoerror));
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
 let hermano = null; 
    let instruccion, nodo = null;
    let errores = null;

    exports.inicioerrores = function(){
        errores = new Array();
    }

    exports.geterrores = function () { 
        return errores 
    };

    const { Aritmeticas } = require('../Expresiones/Aritmeticas');
    const { OpcionesAritmeticas } = require('../Expresiones/Opcionesaritmeticas');
    const { Literal } = require('../Expresiones/Literal');
    const { TiposSimbolo, Simbolo } = require('../Entorno/Simbolo');
    const { Declaracion } = require('../Instrucciones/Declaracion');
    const { Type } = require('../Retorno'); 
    const { Variable } = require('../Expresiones/Variable');
    const { DeclaracionTipos } = require('../Instrucciones/DeclaracionTipos');
    const { VariablesTipo, ValoresTipo } = require('../Expresiones/VariablesTipo');
    const { Asignacion } = require('../Instrucciones/Asignacion');
    const { DeclaracionVarType } = require('../Instrucciones/DeclaracionVarType');
    const { AsignacionVarType } = require('../Instrucciones/AsignacionVarType');
    const { Llamada } = require('../Instrucciones/Llamada');
    const { Relacional, OperacionesLogicas } = require('../Expresiones/Relacional');
    const { Imprimir } = require('../Instrucciones/Imprimir');
    const { SentenciaIf } = require('../Instrucciones/SentenciaIf');
    const { Cuerposentencia } = require('../Instrucciones/Cuerposentencia');
    const { Caso } = require('../Instrucciones/Caso');
    const { CasoDef } = require('../Instrucciones/CasoDef');
    const { SentenciaSwitch } = require('../Instrucciones/SentenciaSwitch');
    const { SentenciaWhile } = require('../Instrucciones/SentenciaWhile');
    const { SentenciaDowhile } = require('../Instrucciones/SentenciaDowhile');
    const { Incremento } = require('../Instrucciones/Incremento');
    const { SentenciaFor } = require('../Instrucciones/SentenciaFor');
    const { Funcion } = require('../Instrucciones/Funcion');
    const { SentenciaTernaria } = require('../Instrucciones/SentenciaTernaria');
    const { SentenciaReturn } = require('../Instrucciones/SentenciaReturn');
    const { Break } = require('../Instrucciones/Break');
    const { GraficarTs } = require('../Instrucciones/GraficarTs');
    const { Nodo } = require('../Arbol/Nodo');
    const { _Error, lerrores } = require('../Error');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 75
break;
case 5:return 76
break;
case 6:return 27
break;
case 7:return 59
break;
case 8:return 86
break;
case 9:return 87
break;
case 10:return 88
break;
case 11:return 89
break;
case 12:return 54
break;
case 13:return 80
break;
case 14:return 77
break;
case 15:return 78
break;
case 16:return 49
break;
case 17:return 51
break;
case 18:return 42
break;
case 19:return 46
break;
case 20:return 41
break;
case 21:return 40
break;
case 22:return 25
break;
case 23:return 'IN'
break;
case 24:return 'OF'
break;
case 25:return 20
break;
case 26:return 'CONTINUE'
break;
case 27:return 21
break;
case 28:return 90
break;
case 29:return 83
break;
case 30:return 84
break;
case 31:return 85
break;
case 32:return 48
break;
case 33:return 32
break;
case 34:return 33
break;
case 35:return 34
break;
case 36:return 35
break;
case 37:return 36
break;
case 38:return 37
break;
case 39:return 38
break;
case 40:return 39
break;
case 41:return 24
break;
case 42:return 8
break;
case 43:return 61
break;
case 44:return 62
break;
case 45:return 63
break;
case 46:return 64
break;
case 47:return 60
break;
case 48:return 73
break;
case 49:return 74
break;
case 50:return 67
break;
case 51:return 68
break;
case 52:return 65
break;
case 53:return 66
break;
case 54:return 29
break;
case 55:return 70
break;
case 56:return 69
break;
case 57:return 71
break;
case 58:return 72
break;
case 59:return 81
break;
case 60:return 26
break;
case 61:return 31
break;
case 62:return 57
break;
case 63:return 43
break;
case 64:return 45
break;
case 65:return 23
break;
case 66:return '['
break;
case 67:return ']'
break;
case 68:return 28;
break;
case 69:return 5;
break;
case 70: 
                            console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
                            errores.push(new _Error(yy_.yylloc.first_line, yy_.yylloc.first_column, "Lexico", "El simbolo: " + yy_.yytext + " no pertenece al lenguaje"))
                        
break;
}
},
rules: [/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:(("[^\"]*")|(`[^"`"]*`)|('[^"'"]*')))/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:default\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\*\*=)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:%)/,/^(?:\*\*)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:[_a-zA-Z][_a-zA-Z0-9]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,10],$V2=[1,8],$V3=[1,9],$V4=[5,12,19,25,28],$V5=[1,18],$V6=[1,21],$V7=[1,36],$V8=[1,30],$V9=[1,31],$Va=[1,32],$Vb=[1,33],$Vc=[1,34],$Vd=[1,35],$Ve=[1,38],$Vf=[1,40],$Vg=[1,47],$Vh=[1,48],$Vi=[1,49],$Vj=[1,50],$Vk=[5,8,12,18,19,23,25,28,33,34,35,36,38],$Vl=[23,38],$Vm=[1,60],$Vn=[1,59],$Vo=[1,61],$Vp=[1,62],$Vq=[8,12,18,23,33,34,35,36,38],$Vr=[1,69],$Vs=[8,12,14,18,23,33,34,35,36,38,44],$Vt=[1,73],$Vu=[8,12,14,18,23,29],$Vv=[1,89],$Vw=[1,93],$Vx=[8,12,18,23,33,34,38],$Vy=[14,29],$Vz=[1,115],$VA=[12,18],$VB=[8,12,18,23];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"PYC":8,"Declaracion_type":9,"Llamada":10,"Asignacion":11,"IDENTIFICADOR":12,"Listaatributos":13,"=":14,"Expresion":15,"{":16,"Lvalorestype":17,"}":18,"TYPE":19,"Latributostype":20,"DP":21,"TipoatributosType":22,",":23,"Tipo":24,"LET":25,"Lcorchetes":26,"LArray":27,"CONST":28,"[":29,"]":30,"Array":31,"Lvalores":32,"-":33,"+":34,"*":35,"/":36,"(":37,")":38,"NUMERO":39,"CADENA":40,"TRUE":41,"FALSE":42,"NULL":43,".":44,"Listaparam":45,"STRING":46,"NUMBER":47,"BOOLEAN":48,"VOID":49,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",12:"IDENTIFICADOR",14:"=",16:"{",18:"}",19:"TYPE",21:"DP",23:",",25:"LET",27:"LArray",28:"CONST",29:"[",30:"]",33:"-",34:"+",35:"*",36:"/",37:"(",38:")",39:"NUMERO",40:"CADENA",41:"TRUE",42:"FALSE",43:"NULL",44:".",46:"STRING",47:"NUMBER",48:"BOOLEAN",49:"VOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,1],[6,1],[11,5],[11,6],[11,4],[9,6],[20,5],[20,5],[20,4],[20,4],[20,4],[20,3],[22,1],[22,1],[7,6],[7,4],[7,4],[7,2],[7,7],[7,5],[7,8],[7,6],[7,4],[7,6],[7,4],[7,7],[7,4],[7,8],[7,6],[26,3],[26,2],[17,5],[17,4],[17,4],[17,3],[31,3],[31,2],[32,3],[32,1],[15,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,1],[15,1],[15,1],[15,1],[15,1],[15,2],[15,1],[15,1],[13,3],[13,2],[10,3],[10,4],[45,3],[45,1],[24,1],[24,1],[24,1],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1]
    
break;
case 3:

        this.$ = [$$[$0]];
    
break;
case 4:

        this.$ = $$[$0-1];
    
break;
case 5: case 7: case 18:

        this.$ = $$[$0];
    
break;
case 9:

        this.$ = new AsignacionVarType($$[$0-5], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 10:

        this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 11:

        this.$ = new DeclaracionTipos($$[$0-4], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
    
break;
case 12: case 13:

        $$[$0-4].push(new VariablesTipo($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column))
        this.$ = $$[$0-4];
    
break;
case 14:

        $$[$0-3].push(new VariablesTipo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = $$[$0-3];
    
break;
case 15: case 16:

        this.$ = [new VariablesTipo($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)];
    
break;
case 17:

        this.$ = [new VariablesTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)];
    
break;
case 19:

        this.$ = $$[$0]
    
break;
case 20: case 27:

        this.$ = new Declaracion($$[$0-4], $$[$0], $$[$0-2], TiposSimbolo.VAR, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 21:

        this.$ = new Declaracion($$[$0-2], $$[$0], null, TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 22: case 28:

        this.$ = new Declaracion($$[$0-2], null, $$[$0], TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 23:

        this.$ = new Declaracion($$[$0], null, null, TiposSimbolo.VAR, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 26:

        this.$ = new DeclaracionVarType($$[$0-6], $$[$0-1], $$[$0-4], TiposSimbolo.VAR, _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 29: case 34:

        this.$ = new Declaracion($$[$0-4], $$[$0], $$[$0-2], TiposSimbolo.CONST, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 30:

        this.$ = new Declaracion($$[$0-2], $$[$0], null, TiposSimbolo.CONST, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 33:

        this.$ = new DeclaracionVarType($$[$0-7], $$[$0-1], $$[$0-4], TiposSimbolo.CONST, _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 37:

        $$[$0-4].push(new ValoresTipo($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = $$[$0-4];
    
break;
case 38:

        $$[$0-3].push(new ValoresTipo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = $$[$0-3];
    
break;
case 39:

        this.$ = [new ValoresTipo($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)];
    
break;
case 40:

        this.$ = [new ValoresTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)];
    
break;
case 45:

        let val1 = new Literal("-1", _$[$0-1].first_line, _$[$0-1].first_column, 0);
        this.$ = new Aritmeticas(val1, $$[$0], OpcionesAritmeticas.POR, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 46:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 47:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 48:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.POR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 49:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 51:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 52:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 53: case 54:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 55:

        this.$ = new Variable($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 58:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 3)
    
break;
case 59:

    
break;
case 60:


    
break;
case 65:

        this.$ = Type.CADENA;
    
break;
case 66:

        this.$ = Type.NUMERO;
    
break;
case 67:

        this.$ = Type.BOOLEANO
    
break;
case 68:

        this.$ = Type.VOID;
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:$V0,19:$V1,25:$V2,28:$V3},{1:[3]},{5:[1,12],6:13,7:4,9:5,10:6,11:7,12:$V0,19:$V1,25:$V2,28:$V3},o($V4,[2,3]),{8:[1,14]},o($V4,[2,5]),o($V4,[2,6]),o($V4,[2,7]),{12:[1,15]},{12:[1,16]},{12:[1,17]},{13:19,14:[1,20],37:$V5,44:$V6},{1:[2,1]},o($V4,[2,2]),o($V4,[2,4]),{8:[2,23],14:[1,23],21:[1,22]},{14:[1,25],21:[1,24]},{14:[1,26]},{10:37,12:$V7,15:29,33:$V8,37:$V9,38:[1,27],39:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,45:28},{14:[1,39],44:$Vf},{10:37,12:$V7,15:42,16:[1,41],33:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve},{12:[1,43]},{12:[1,46],14:[1,45],24:44,46:$Vg,47:$Vh,48:$Vi,49:$Vj},{10:37,12:$V7,15:51,33:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve},{12:[1,53],24:52,46:$Vg,47:$Vh,48:$Vi,49:$Vj},{10:37,12:$V7,15:54,27:[1,55],33:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve},{16:[1,56]},o($Vk,[2,61]),{23:[1,58],38:[1,57]},o($Vl,[2,64],{33:$Vm,34:$Vn,35:$Vo,36:$Vp}),{10:37,12:$V7,15:63,33:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve},{10:37,12:$V7,15:64,33:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve},o($Vq,[2,51]),o($Vq,[2,52]),o($Vq,[2,53]),o($Vq,[2,54]),o($Vq,[2,55],{13:65,37:$V5,44:$V6}),o($Vq,[2,57]),o($Vq,[2,58]),{10:37,12:$V7,15:66,33:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve},{12:[1,67]},{12:$Vr,17:68},{8:[1,70],33:$Vm,34:$Vn,35:$Vo,36:$Vp},o($Vs,[2,60]),{8:[2,22],14:[1,71],26:72,29:$Vt},{27:[1,74]},{8:[2,28],14:[1,75]},o($Vu,[2,65]),o($Vu,[2,66]),o($Vu,[2,67]),o($Vu,[2,68]),{8:[2,21],33:$Vm,34:$Vn,35:$Vo,36:$Vp},{14:[1,76],26:77,29:$Vt},{14:[1,78]},{8:[2,30],33:$Vm,34:$Vn,35:$Vo,36:$Vp},{8:[2,32]},{12:[1,80],20:79},o($Vk,[2,62]),{10:37,12:$V7,15:81,33:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve},{10:37,12:$V7,15:82,33:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve},{10:37,12:$V7,15:83,33:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve},{10:37,12:$V7,15:84,33:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve},{10:37,12:$V7,15:85,33:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve},o($Vq,[2,45]),{33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:[1,86]},o($Vq,[2,56],{44:$Vf}),{8:[1,87],33:$Vm,34:$Vn,35:$Vo,36:$Vp},o($Vs,[2,59]),{12:$Vv,18:[1,88]},{21:[1,90]},o($V4,[2,10]),{10:37,12:$V7,15:91,33:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve},{14:[1,92],29:$Vw},{30:[1,94]},{8:[2,25]},{12:[1,96],16:[1,95]},{10:37,12:$V7,15:97,33:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve},{14:[1,98],29:$Vw},{12:[1,100],16:[1,99]},{12:[1,102],18:[1,101]},{21:[1,103]},o($Vl,[2,63],{33:$Vm,34:$Vn,35:$Vo,36:$Vp}),o($Vx,[2,46],{35:$Vo,36:$Vp}),o($Vx,[2,47],{35:$Vo,36:$Vp}),o($Vq,[2,48]),o($Vq,[2,49]),o($Vq,[2,50]),o($V4,[2,8]),{8:[1,104]},{21:[1,105]},{10:37,12:$V7,15:106,33:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve},{8:[2,20],33:$Vm,34:$Vn,35:$Vo,36:$Vp},{27:[1,107]},{30:[1,108]},o($Vy,[2,36]),{12:$Vr,17:109},{8:[2,27]},{8:[2,29],33:$Vm,34:$Vn,35:$Vo,36:$Vp},{27:[1,110]},{12:$Vr,17:111},{8:[2,34]},o($V4,[2,11]),{21:[1,112]},{12:$Vz,22:113,24:114,46:$Vg,47:$Vh,48:$Vi,49:$Vj},o($V4,[2,9]),{10:37,12:$V7,15:116,33:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve},o($VA,[2,40],{23:[1,117],33:$Vm,34:$Vn,35:$Vo,36:$Vp}),{8:[2,24]},o($Vy,[2,35]),{12:$Vv,18:[1,118]},{8:[2,31]},{12:$Vv,18:[1,119]},{12:$Vz,22:120,24:114,46:$Vg,47:$Vh,48:$Vi,49:$Vj},o($VA,[2,17],{8:[1,122],23:[1,121]}),o($VB,[2,18]),o($VB,[2,19]),o($VA,[2,38],{23:[1,123],33:$Vm,34:$Vn,35:$Vo,36:$Vp}),o($VA,[2,39]),{8:[2,26]},{8:[2,33]},o($VA,[2,14],{8:[1,125],23:[1,124]}),o($VA,[2,15]),o($VA,[2,16]),o($VA,[2,37]),o($VA,[2,12]),o($VA,[2,13])],
defaultActions: {12:[2,1],55:[2,32],74:[2,25],96:[2,27],100:[2,34],107:[2,24],110:[2,31],118:[2,26],119:[2,33]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Aritmeticas } = require('../Expresiones/Aritmeticas');
    const { OpcionesAritmeticas } = require('../Expresiones/Opcionesaritmeticas');
    const { Literal } = require('../Expresiones/Literal');
    const { TiposSimbolo, Simbolo } = require('../Entorno/Simbolo');
    const { Declaracion } = require('../Instrucciones/Declaracion');
    const { Type } = require('../Retorno'); 
    const { Variable } = require('../Expresiones/Variable');
    const { DeclaracionTipos } = require('../Instrucciones/DeclaracionTipos');
    const { VariablesTipo, ValoresTipo } = require('../Expresiones/VariablesTipo');
    const { Asignacion } = require('../Instrucciones/Asignacion');
    const { DeclaracionVarType } = require('../Instrucciones/DeclaracionVarType');
    const { AsignacionVarType } = require('../Instrucciones/AsignacionVarType');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 39
break;
case 5:return 40
break;
case 6:return 25
break;
case 7:return 28
break;
case 8:return 46
break;
case 9:return 47
break;
case 10:return 48
break;
case 11:return 49
break;
case 12:return 19
break;
case 13:return 43
break;
case 14:return 41
break;
case 15:return 42
break;
case 16:return 21
break;
case 17:return 8
break;
case 18:return 14
break;
case 19:return 34
break;
case 20:return 33
break;
case 21:return 35
break;
case 22:return 36
break;
case 23:return 44
break;
case 24:return 37
break;
case 25:return 38
break;
case 26:return 23
break;
case 27:return 16
break;
case 28:return 18
break;
case 29:return ':'
break;
case 30:return 12;
break;
case 31:return 5;
break;
case 32: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:(("[^\"]*")|(`[^"`"]*`)))/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?::)/,/^(?:;)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:["_" | a-z | A-Z]["_" | a-z | A-Z|0-9]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
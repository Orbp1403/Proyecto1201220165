/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,31],$V2=[1,32],$V3=[1,33],$V4=[1,41],$V5=[1,16],$V6=[1,11],$V7=[1,21],$V8=[1,40],$V9=[1,39],$Va=[1,38],$Vb=[1,37],$Vc=[1,13],$Vd=[1,12],$Ve=[1,14],$Vf=[1,15],$Vg=[1,17],$Vh=[1,18],$Vi=[1,19],$Vj=[1,20],$Vk=[1,23],$Vl=[1,35],$Vm=[1,36],$Vn=[1,34],$Vo=[2,5,20,21,22,26,27,28,29,42,43,44,50,55,60,61,70,76,77,78,79,81,84,86,91],$Vp=[1,61],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,52],$Vw=[1,53],$Vx=[1,54],$Vy=[1,56],$Vz=[1,55],$VA=[1,57],$VB=[1,58],$VC=[1,59],$VD=[1,60],$VE=[1,63],$VF=[1,68],$VG=[8,19,24,25,29,32,58,62,63,64,65,66,67,68,69,70,71,72,73,74,75],$VH=[8,24,62,63,64,65,66,67,68,69,70,71,72,73,74,75],$VI=[2,108],$VJ=[1,73],$VK=[1,74],$VL=[1,75],$VM=[1,76],$VN=[1,77],$VO=[1,78],$VP=[1,79],$VQ=[1,80],$VR=[1,81],$VS=[1,82],$VT=[2,5,19,20,21,22,26,27,28,29,42,43,44,47,49,50,55,60,61,70,76,77,78,79,81,84,86,91],$VU=[1,94],$VV=[2,109],$VW=[1,119],$VX=[1,146],$VY=[8,19,24,25,29,32,58,62,63,64,65],$VZ=[8,19,24,25,29,32,58,62,63,64,65,66,67,68,69],$V_=[8,19,24,25,29,32,58,62,63,64,65,66,67,68,69,70,71],$V$=[8,19,24,25,29,32,58,62,63,64,65,66,67,68,69,70,71,72,73,74],$V01=[1,152],$V11=[1,153],$V21=[1,154],$V31=[1,155],$V41=[1,165],$V51=[1,168],$V61=[32,58],$V71=[8,19,25,29,32,58],$V81=[8,19,24,25,29,30,32,58,62,63,64,65,66,67,68,69,70,71,72,73,74,75,82],$V91=[1,173],$Va1=[1,184],$Vb1=[2,5,19,20,21,22,26,27,28,29,42,43,44,47,49,50,52,55,60,61,70,76,77,78,79,81,84,86,91],$Vc1=[2,19,20,21,22,26,27,28,29,42,43,44,47,49,50,60,61,70,76,77,78,79,81,84,86],$Vd1=[8,19,29,30,32,45,58],$Ve1=[1,200],$Vf1=[1,235],$Vg1=[1,254],$Vh1=[19,29],$Vi1=[1,260],$Vj1=[8,19,29,58],$Vk1=[1,294],$Vl1=[1,312],$Vm1=[1,313],$Vn1=[1,314],$Vo1=[1,311],$Vp1=[1,303],$Vq1=[1,284],$Vr1=[1,299],$Vs1=[1,310],$Vt1=[1,309],$Vu1=[1,308],$Vv1=[1,307],$Vw1=[1,285],$Vx1=[1,295],$Vy1=[1,296],$Vz1=[1,297],$VA1=[1,298],$VB1=[1,300],$VC1=[1,301],$VD1=[1,302],$VE1=[1,305],$VF1=[1,306],$VG1=[19,47,49],$VH1=[1,340],$VI1=[1,326],$VJ1=[1,327],$VK1=[1,328],$VL1=[1,329],$VM1=[1,330],$VN1=[1,331],$VO1=[1,332],$VP1=[1,333],$VQ1=[1,335],$VR1=[1,334],$VS1=[1,336],$VT1=[1,337],$VU1=[1,338],$VV1=[1,339],$VW1=[8,19,24,25,29,30,32,58,62,63,64,65,66,67,68,69,70,71,72,73,74,75],$VX1=[1,360],$VY1=[1,379],$VZ1=[1,407],$V_1=[8,19,24,25,29,30,32,58,62,63,64,65],$V$1=[8,19,24,25,29,30,32,58,62,63,64,65,66,67,68,69],$V02=[8,19,24,25,29,30,32,58,62,63,64,65,66,67,68,69,70,71],$V12=[8,19,24,25,29,30,32,58,62,63,64,65,66,67,68,69,70,71,72,73,74],$V22=[1,437],$V32=[8,19,25,29,30,32,58],$V42=[1,487],$V52=[1,496],$V62=[1,497],$V72=[2,184];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"PYC":8,"Declaracion_type":9,"Expresion":10,"Asignacion":11,"Sentencias_control":12,"Funcion":13,"Sentenciaif":14,"Sentenciaswitch":15,"Sentenciawhile":16,"Sentenciadowhile":17,"Sentenciafor":18,"}":19,"BREAK":20,"CONTINUE":21,"RETURN":22,"SentenciaTernaria":23,"?":24,"DP":25,"FOR":26,"(":27,"LET":28,"IDENTIFICADOR":29,"=":30,"Aumento":31,")":32,"InstruccionesSentencias":33,"++":34,"--":35,"+=":36,"-=":37,"*=":38,"/=":39,"%=":40,"**=":41,"DO":42,"WHILE":43,"SWITCH":44,"{":45,"Casos":46,"CASE":47,"InstruccionSentencia":48,"DEFAULT":49,"IF":50,"SentenciaElse":51,"ELSE":52,"Listaatributos":53,"Lvalorestype":54,"TYPE":55,"Latributostype":56,"TipoatributosType":57,",":58,"Tipo":59,"CONST":60,"NOT":61,"AND":62,"OR":63,"==":64,"!=":65,"<":66,">":67,"<=":68,">=":69,"-":70,"+":71,"*":72,"/":73,"%":74,"**":75,"NUMERO":76,"CADENA":77,"TRUE":78,"FALSE":79,"Llamada":80,"NULL":81,".":82,"Listaparam":83,"CONSOLE":84,"LOG":85,"GRAFICAR_TS":86,"STRING":87,"NUMBER":88,"BOOLEAN":89,"VOID":90,"FUNCTION":91,"Funcion1":92,"Lparametrosfuncion":93,"Tipofuncion":94,"InstruccionesFuncion":95,"InstruccionesFuncion1":96,"Linstrucciones":97,"Instruccionfuncion":98,"Linstrucciones1":99,"Expresionesfuncion":100,"Instruccionfuncion1":101,"Llamadas_funcion":102,"Auxdeclaracion":103,"Auxdeclaracion4":104,"sentencia_if":105,"sentencia_switch":106,"sentencia_while":107,"sentencia_dowhile":108,"sentencia_for":109,"sentencia_break":110,"sentencia_continue":111,"Sentencia_return":112,"Auxdeclaracion5":113,"Auxdeclaracion6":114,"Auxdeclaracion1":115,"Auxdeclaracion2":116,"Auxdeclaracion3":117,"ValoresType":118,"Sentencia_return1":119,"sentencia_for1":120,"Lcasosswitch":121,"Lcasos":122,"Lcasos1":123,"Lcasos2":124,"sentencia_else":125,"sentencia_else1":126,"instruccionfuncion12":127,"Atributos":128,"Instruccionfuncion2":129,"Aumento_funcion":130,"Parametrosllamada":131,"Atributo":132,"Atributos1":133,"Parametrollamada":134,"Parametrosllamada1":135,"Valortype":136,"ValoresType1":137,"Parametro":138,"Auxparametros":139,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",19:"}",20:"BREAK",21:"CONTINUE",22:"RETURN",24:"?",25:"DP",26:"FOR",27:"(",28:"LET",29:"IDENTIFICADOR",30:"=",32:")",34:"++",35:"--",36:"+=",37:"-=",38:"*=",39:"/=",40:"%=",41:"**=",42:"DO",43:"WHILE",44:"SWITCH",45:"{",47:"CASE",49:"DEFAULT",50:"IF",52:"ELSE",55:"TYPE",58:",",60:"CONST",61:"NOT",62:"AND",63:"OR",64:"==",65:"!=",66:"<",67:">",68:"<=",69:">=",70:"-",71:"+",72:"*",73:"/",74:"%",75:"**",76:"NUMERO",77:"CADENA",78:"TRUE",79:"FALSE",81:"NULL",82:".",84:"CONSOLE",85:"LOG",86:"GRAFICAR_TS",87:"STRING",88:"NUMBER",89:"BOOLEAN",90:"VOID",91:"FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[12,2],[12,2],[12,3],[23,5],[18,12],[18,11],[31,2],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[17,7],[16,5],[15,7],[15,6],[46,5],[46,4],[46,4],[46,3],[46,4],[46,3],[46,2],[14,5],[14,6],[51,2],[51,2],[33,3],[33,2],[48,3],[48,2],[48,2],[48,3],[48,3],[48,2],[48,2],[48,1],[48,1],[48,2],[11,5],[11,7],[11,6],[11,4],[9,6],[56,5],[56,5],[56,4],[56,4],[56,4],[56,3],[57,1],[57,1],[7,6],[7,4],[7,4],[7,2],[7,8],[7,6],[7,4],[7,6],[7,4],[7,8],[7,6],[54,5],[54,4],[54,4],[54,3],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,1],[10,1],[10,1],[10,1],[10,1],[10,2],[10,1],[10,1],[10,1],[10,1],[53,3],[53,2],[80,3],[80,4],[80,5],[80,6],[80,3],[83,3],[83,1],[59,1],[59,1],[59,1],[59,1],[13,4],[92,5],[92,4],[94,1],[94,1],[95,2],[96,2],[96,1],[97,2],[99,1],[99,0],[98,3],[98,2],[98,3],[98,3],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,2],[98,2],[104,2],[104,3],[113,4],[113,3],[103,2],[103,1],[103,3],[115,2],[115,2],[116,1],[116,3],[117,1],[117,2],[114,4],[114,2],[112,2],[119,2],[119,1],[110,2],[111,2],[109,3],[120,10],[120,9],[108,7],[107,5],[106,6],[121,2],[121,1],[122,4],[122,3],[123,2],[123,1],[123,0],[124,1],[124,0],[105,6],[125,2],[125,0],[126,1],[126,1],[101,2],[101,0],[127,1],[127,3],[100,2],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,2],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,5],[100,1],[100,1],[100,1],[100,2],[100,3],[100,1],[100,1],[100,1],[100,3],[100,1],[130,2],[130,2],[130,3],[130,3],[130,3],[130,3],[130,3],[130,3],[102,5],[102,3],[129,1],[129,2],[128,2],[132,2],[133,1],[133,0],[131,2],[134,1],[135,2],[135,0],[118,2],[136,3],[137,2],[137,1],[137,0],[93,2],[138,3],[138,3],[139,2],[139,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "INICIO", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
        //$$[$0-1].nodo.addPadre(this.$.nodo)
        return this.$;
    
break;
case 2:

        $$[$0-1].instrucciones.push($$[$0].instrucciones)
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 3:

        this.$ = {
            instrucciones : [$$[$0].instrucciones],
            nodo : new Nodo(null, "INST", null)
        };
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 4: case 5: case 6:

        //this.$ = $$[$0-1];
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : $$[$0-1].nodo
        }
    
break;
case 7: case 9:

        //this.$ = $$[$0];
        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : $$[$0].nodo
        }
    
break;
case 8:

        //this.$ = $$[$0]
        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : $$[$0].nodo
        }
    
break;
case 11: case 12: case 13: case 14: case 15: case 110: case 135: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149: case 152: case 159: case 160: case 164: case 185: case 190: case 191: case 192: case 222: case 235: case 239: case 243:

        this.$ = $$[$0];
    
break;
case 17: case 170:

        this.$ = {
            instrucciones : new Break(_$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Break", null, null)
        }
    
break;
case 18:

        this.$ = {
            instrucciones : new Continue(_$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Continue", null, null)
        }
    
break;
case 19:

        this.$ = {
            instrucciones : new SentenciaReturn(null, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Return", null, null)
        }
    
break;
case 20:

        this.$ = {
            instrucciones : new SentenciaReturn($$[$0-1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("Return", null, null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 21: case 212:

        this.$ = {
            instrucciones : new SentenciaTernaria($$[$0-4].instrucciones, $$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "Ternaria", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 22:

        this.$ = {
            instrucciones : new SentenciaFor(1, $$[$0-8], $$[$0-6].instrucciones, $$[$0-4].instrucciones, $$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-11].first_line, _$[$0-11].first_column) ,
            nodo : new Nodo(null, "For", null)
        }
        instruccion = new Nodo("=", null, null)
        instruccion.agregarHijos(new Nodo($$[$0-8], null, null));
        instruccion.agregarHijos($$[$0-6].nodo)
        this.$.nodo.agregarHijos(instruccion)
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(instruccion)
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 23:

        this.$ = {
            instrucciones : new SentenciaFor(0, $$[$0-8], $$[$0-6].instrucciones, $$[$0-4].instrucciones, $$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-10].first_line, _$[$0-10].first_column),
            nodo : new Nodo(null, "For", null)
        }
        instruccion = new Nodo("=", null, null);
        instruccion.agregarHijos(new Nodo($$[$0-8], null, null));
        instruccion.agregarHijos($$[$0-6].nodo)
        this.$.nodo.agregarHijos(instruccion);
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 24: case 223:

        this.$ = {
            instrucciones : new Incremento($$[$0-1], OpcionesAritmeticas.MAS, new Literal(1, _$[$0-1].first_line, _$[$0-1].first_column, 0), _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo(null, "Incremento", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos(new Nodo('++', null, null));
        
    
break;
case 25: case 224:

        this.$ = {
            instrucciones : new Incremento($$[$0-1], OpcionesAritmeticas.MENOS, new Literal(1, _$[$0-1].first_line, _$[$0-1].first_column, 0), _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo(null, "Incremento", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos(new Nodo('--', null, null));
    
break;
case 26: case 225:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.MAS, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("+=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 27: case 226:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.MENOS, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("-=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 28: case 227:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.POR, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("*=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 29: case 228:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.DIV, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column), 
            nodo : new Nodo("/=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 30: case 229:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.MODULO, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('%=', null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 31: case 230:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.POTENCIA, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('**=', null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 32:

        this.$ = {
            instrucciones : new SentenciaDowhile($$[$0-2].instrucciones, $$[$0-5].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo(null, "Do_while", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo)
        if($$[$0-5].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-5].nodo)
        }
        this.$.nodo.agregarHijos(instruccion)
    
break;
case 33:

        this.$ = {
            instrucciones : new SentenciaWhile($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "While", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 34:

        this.$ = {
            instrucciones : new SentenciaSwitch($$[$0-4].instrucciones, $$[$0-1].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo(null, "Switch", null) 
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 35:

        this.$ = {
            instrucciones : new SentenciaSwitch($$[$0-3].instrucciones, null, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Switch", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(instruccion)
    
break;
case 36:

        $$[$0-4].instrucciones.push(new Caso($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        };
        this.$.nodo.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 37:

        $$[$0-3].instrucciones.push(new Caso($$[$0-1].instrucciones, null, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = {
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        }
        this.$.nodo.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 38:

        $$[$0-3].instrucciones.push(new CasoDef($$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = {
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        };
        this.$.nodo.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(new Nodo(null, "Default", null))
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 39:

        $$[$0-2].instrucciones.push(new CasoDef(null, _$[$0-2].first_line, _$[$0-2].first_column));
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        };
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos(new Nodo("Default", null, null))
    
break;
case 40:

        this.$ = {
            instrucciones : [new Caso($$[$0-2], $$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo(null, "Caso", null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 41:

        this.$ = {
            instrucciones : [new Caso($$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column)],
            nodo : new Nodo(null, "Caso", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 42:

        this.$ = {
            instrucciones : [new CasoDef(null, _$[$0-1].first_line, _$[$0-1].first_column)],
            nodo : new Nodo(null, "Caso", null) 
        }
        this.$.nodo.agregarHijos(new Nodo("Default", null, null));
    
break;
case 43:

        this.$ = {
            instrucciones : new SentenciaIf($$[$0-2].instrucciones, $$[$0].instrucciones, null, _$[$0-4].first_line, _$[$0-4].first_column), 
            nodo : new Nodo(null, "IF", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos(instruccion);
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo);
        }
    
break;
case 44:

        this.$ = {
            instrucciones : new SentenciaIf($$[$0-3].instrucciones, $$[$0-1].instrucciones, $$[$0].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "IF", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0-1].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-1].nodo)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 45:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "ELSE", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 46:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "ELSE", null)
        }
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo);
        }
    
break;
case 47:

        this.$ = {
            instrucciones : new Cuerposentencia($$[$0-1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : $$[$0-1].nodo
        }
    
break;
case 48:

        this.$ = {
            instrucciones : new Cuerposentencia(new Array(), _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : null
        }
    
break;
case 49:

        $$[$0-2].instrucciones.push($$[$0-1].instrucciones);
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 50:

        $$[$0-1].instrucciones.push($$[$0].instrucciones);
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 51:

        $$[$0-1].instrucciones.push($$[$0].instrucciones)
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 52:

        $$[$0-2].instrucciones.push($$[$0-1].instrucciones)
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        };
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 54: case 55:

        this.$ = {
            instrucciones : [$$[$0-1].instrucciones],
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 56: case 57:

        this.$ = {
            instrucciones : [$$[$0].instrucciones],
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 59:

        this.$ = {
            instrucciones : new Asignacion($$[$0-4], $$[$0-3].instrucciones, $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo("Asignacion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 60:

        this.$ = {
            instrucciones : new AsignacionVarType($$[$0-6], $$[$0-5].instrucciones, $$[$0-2].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo("Asignacion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-6], null, null))
        this.$.nodo.agregarHijos($$[$0-5].nodo)
        $$[$0-3].nodo.agregarHijos($$[$0-2].nodo)
    
break;
case 61:

        this.$ = {
            instrucciones : new AsignacionVarType($$[$0-5], null, $$[$0-2].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo("Asignacion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-5], null, null));
        this.$.nodo.agregarHijos($$[$0-2].nodo)
    
break;
case 62:

        this.$ = {
            instrucciones : new Asignacion($$[$0-3], null, $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 63:

        this.$ = {
            instrucciones : new DeclaracionTipos($$[$0-4], $$[$0-1].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column), 
            nodo : new Nodo(null, "DECLARACION_TYPE", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 64:

        $$[$0-4].instrucciones.push(new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column))
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo(null, "Valor", null)
        };
        this.$.nodo.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null))
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 65:

        $$[$0-4].instrucciones.push(new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column))
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo(null, "Valor", null)
        }
        this.$.nodo.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null))
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 66:

        $$[$0-3].instrucciones.push(new VariablesTipo($$[$0-2], $$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = {
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo(null, "Valor", null)
        };
        this.$.nodo.agregarHijos($$[$0-3].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 67:

        this.$ = {
            instrucciones : [new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo(null, "Valor", null) 
        };
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 68:

        this.$ = {
            instrucciones : [new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo(null, "Valor", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 69:

        this.$ = {
            instrucciones : [new VariablesTipo($$[$0-2], $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)],
            nodo : new Nodo(null, "Valor", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 70:

        this.$ = {
            instrucciones : $$[$0],
            nodo : new Nodo(Type[$$[$0]], null, null)
        }
    
break;
case 71:

        this.$ = {
            instrucciones : $$[$0],
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 72:

        this.$ = {
            instrucciones :  new Declaracion($$[$0-4], $$[$0].instrucciones, $$[$0-2], TiposSimbolo.VAR, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo("DECLARACION", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0-2]], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null))
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 73:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], $$[$0].instrucciones, null, TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("DECLARACION", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 74:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], null, $$[$0], TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("Declaracion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0]], null, null));
    
break;
case 75:

        this.$ = {
            instrucciones : new Declaracion($$[$0], null, null, TiposSimbolo.VAR, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Declaracion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 76:

        this.$ = {
            instrucciones : new Declaracion($$[$0-6], $$[$0-1].instrucciones, $$[$0-4], TiposSimbolo.VAR, _$[$0-7].first_line, _$[$0-7].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-6], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 77:

        this.$ = {
            instrucciones : new Declaracion($$[$0-4], $$[$0].instrucciones, $$[$0-2], TiposSimbolo.VAR, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 78:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], null, $$[$0], TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
    
break;
case 79:

        this.$ = {
            instrucciones : new Declaracion($$[$0-4], $$[$0].instrucciones, $$[$0-2], TiposSimbolo.CONST, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0-2]], null, null))
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 80:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], $$[$0].instrucciones, null, TiposSimbolo.CONST, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        };
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 81:

        this.$ = {
            instrucciones : new Declaracion($$[$0-6], $$[$0-1].instrucciones, $$[$0-4], TiposSimbolo.CONST, _$[$0-7].first_line, _$[$0-7].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-6], null, null)) ;
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 82:

        this.$ = {
            instrucciones : new Declaracion($$[$0-4], $$[$0], $$[$0-2], TiposSimbolo.CONST, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 83:

        $$[$0-4].instrucciones.push(new ValoresTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null))
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 84:

        $$[$0-3].instrucciones.push(new ValoresTipo($$[$0-2], $$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = { 
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo("Valores", null, null)
        };
        this.$.nodo.agregarHijos($$[$0-3].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 85:

        this.$ = {
            instrucciones : [new ValoresTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 86:

        this.$ = {
            instrucciones : [new ValoresTipo($$[$0-2], $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)],
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 87: case 196:

        this.$ = {
            instrucciones : new Relacional($$[$0].instrucciones, null, OperacionesLogicas.NEGADO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('!', null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 88: case 197:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.AND, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('&&', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 89: case 198:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.OR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('||', null, null) 
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 90: case 199:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo ('==', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 91: case 200:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.NOIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('!=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 92: case 201:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MENOR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('<', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 93: case 202:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('>', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 94: case 203:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('<=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 95: case 204:

        this.$ = {
            instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('>=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 96: case 205:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0].instrucciones, null, OpcionesAritmeticas.NEGATIVO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 97: case 206:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('+', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 98: case 207:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 99: case 208:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.POR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('*', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 100: case 209:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.DIV, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('/', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 101: case 210:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.MODULO, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('%', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 102: case 211:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('**', null, null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 103: case 133: case 178: case 221:

        this.$ = $$[$0-1];
    
break;
case 104: case 213:

        this.$ = {
            instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 105: case 214:

        if($$[$0].includes('\"'))
        {
            this.$ = {
                instrucciones : new Literal($$[$0].replace(/['"]+/g, ''), _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0].replace(/['"]+/g, ''), null, null)
            }
        }
        else if($$[$0].includes("'"))
        {
            this.$ = {
                instrucciones : new Literal($$[$0].replace(/["'"]+/g, ''), _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0].replace(/["'"]+/g, ''), null, null)
            }
        }
        else
        {
            this.$ = {
                instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0], null, null)
            }
        }
    
break;
case 106: case 107: case 218: case 219:

        this.$ = {
            instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 108: case 215:

        this.$ = {
            instrucciones : new Variable($$[$0], null, 7, _$[$0].first_line, _$[$0].first_column),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 109: case 216:

        this.$ = {
            instrucciones : new Variable($$[$0-1], $$[$0].instrucciones, 7, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo(null, 'EXP', null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 111: case 220:

        this.$ = {
            instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 3),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 112: case 113: case 130: case 131: case 156: case 248:

        this.$ = $$[$0]
    
break;
case 114:

        $$[$0-2].instrucciones.push($$[$0]);
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, 'ATRIB', null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
        this.$ = $$[$0-2];
    
break;
case 115:

        this.$ = {
            instrucciones : [$$[$0]],
            nodo : new Nodo(null, 'ATRIB', null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 116:

        this.$ = {
            instrucciones : new Llamada($$[$0-2], new Array(), _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, 'Llamada', null)
        };
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
    
break;
case 117:

        this.$ = {
            instrucciones : new Llamada($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo(null, "Llamada", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 118:

        this.$ = {
            instrucciones : new Imprimir(new Array(), _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "Imprimir", null)
        }
    
break;
case 119:

        this.$ = {
            instrucciones : new Imprimir($$[$0-1].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column) ,
            nodo : new Nodo(null, "Imprimir", null)

        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 120:

        this.$ = {
            instrucciones : new GraficarTs(_$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "GraficarTs", null)
        }
    
break;
case 121:

        $$[$0-2].instrucciones.push($$[$0].instrucciones)
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Parametro", null)
        };
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 122:

        this.$ = {
            instrucciones : [$$[$0].instrucciones],
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 123:

        this.$ = Type.CADENA;
    
break;
case 124:

        this.$ = Type.NUMERO;
    
break;
case 125:

        this.$ = Type.BOOLEANO
    
break;
case 126:

        this.$ = Type.VOID;
    
break;
case 127:

        if($$[$0].parametros != null)
        {
            this.$ = {
                instrucciones : new Funcion($$[$0-2], $$[$0].instrucciones_f.instrucciones, $$[$0].parametros.instrucciones, $$[$0].tipo, _$[$0-3].first_line, _$[$0-3].first_column),
                nodo : new Nodo(null, "Funcion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
            this.$.nodo.agregarHijos($$[$0].parametros.nodo);
            if(isNaN($$[$0].tipo) == false)
            {
                this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
            }
            else
            {
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            }
            if($$[$0].instrucciones_f.nodo != null)
            {
                this.$.nodo.agregarHijos($$[$0].instrucciones_f.nodo)
            }
        }
        else
        {
            this.$ = {
                instrucciones : new Funcion($$[$0-2], $$[$0].instrucciones_f.instrucciones, new Array(), $$[$0].tipo, _$[$0-3].first_line, _$[$0-3].first_column),
                nodo : new Nodo(null, "Funcion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
            this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
            if($$[$0].instrucciones_f.nodo != null)
            {
                this.$.nodo.agregarHijos($$[$0].instrucciones_f.nodo)
            }
        }
    
break;
case 128:

        this.$ = {
            parametros : $$[$0-4],
            tipo : $$[$0-1],
            instrucciones_f : $$[$0]
        }
    
break;
case 129:

        this.$ = {
            parametros : null,
            tipo : $$[$0-1],
            instrucciones_f : $$[$0]
        }
    
break;
case 132:

        if($$[$0].instrucciones != null)
        {
            this.$ = {
                instrucciones : new Cuerposentencia($$[$0].instrucciones, _$[$0-1].linea, _$[$0-1].columna),
                nodo : $$[$0].nodo
            }
        }
        else
        {
            this.$ = $$[$0];
        }
    
break;
case 134:

        this.$ = {
            instrucciones : null,
            nodo : null
        };
    
break;
case 136:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length - 2].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 2].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 137:

        hermano = eval('$$');
        this.$ = {
            instrucciones : [hermano[hermano.length - 1].instrucciones],
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 138:

        if($$[$0-1].contenido.instrucciones != null)
        {
            if($$[$0-1].estype == false)
            {
                this.$ = {
                    instrucciones : new Asignacion($$[$0-2].instrucciones.nombre, $$[$0-2].instrucciones.atributos, $$[$0-1].contenido.instrucciones, $$[$0-2].instrucciones.linea, $$[$0-2].instrucciones.columna),
                    nodo : new Nodo("Asignacion", null, null)
                }
                this.$.nodo.agregarHijos($$[$0-2].nodo);
                this.$.nodo.agregarHijos($$[$0-1].contenido.nodo)
            }
            else
            {
                this.$ = {
                    instrucciones : new AsignacionVarType($$[$0-2].instrucciones.nombre, $$[$0-2].instrucciones.atributos, $$[$0-1].contenido.instrucciones, $$[$0-2].instrucciones.linea, $$[$0-2].instrucciones.columna),
                    nodo : new Nodo("Asignacion", null, null)
                }
                this.$.nodo.agregarHijos($$[$0-2].nodo)
                this.$.nodo.agregarHijos($$[$0-1].contenido.nodo)
            }
        }
        else
        {
            this.$ = $$[$0-2];
        }
    
break;
case 139:

        hermano = eval('$$');
        this.$ = hermano[hermano.length - 2];
    
break;
case 140:

        if($$[$0].estype == false){
            if($$[$0].valor == null && $$[$0].tipo == null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], null, null, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
            }
            else if($$[$0].valor == null && $$[$0].tipo != null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], null, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                if(isNaN($$[$0].tipo) == false)
                {
                    this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                }
                else
                {
                    this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
                }
            }
            else if($$[$0].valor != null && $$[$0].tipo != null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                if(isNaN($$[$0].tipo) == false)
                {
                    this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                }
                else
                {
                    this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
                }
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
            else if($$[$0].valor != null && $$[$0].tipo == null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, null, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo('=', null, null));
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
        else
        {
            if($$[$0].valor == null && $$[$0].tipo != null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], null, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            }
            else if($$[$0].valor != null && $$[$0].tipo != null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
    
break;
case 141:

        if($$[$0].estype == false)
        {
            if($$[$0].valor != null && $$[$0].tipo == null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, null, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
            else
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                this.$.nodo.agregarHijos(new Nodo('=', null, null));
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
        else
        {
            this.$ = {
                instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                nodo : new Nodo(null, "Declaracion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
            this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            this.$.nodo.agregarHijos(new Nodo('=', null, null))
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 153:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : null,
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 154:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 155:

        hermano = eval('$$');
        this.$ = $$[$0]
    
break;
case 157:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : null,
            tipo : null
        };
    
break;
case 158:

        hermano = eval('$$');
        console.log()
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : null,
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 161:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : null,
            tipo : hermano[hermano.length - 2]
        }
    
break;
case 162:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        };
    
break;
case 163:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : null,
            tipo : hermano[hermano.length - 2]
        }
    
break;
case 165:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : hermano[hermano.length - 3].instrucciones,
            tipo : hermano[hermano.length - 6],
            nodo : hermano[hermano.length - 3].nodo
        }
    
break;
case 166:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 167:

        this.$ = {
            instrucciones : new SentenciaReturn($$[$0].instrucciones, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Return", null, null)
        }
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 168:

        hermano = eval('$$');
        this.$ = {
            instrucciones : hermano[hermano.length - 2].instrucciones,
            nodo : hermano[hermano.length - 2].nodo
        };
    
break;
case 169: case 189:

        this.$ = {
            instrucciones : null,
            nodo : null
        }
    
break;
case 171:

        this.$ = {
            instrucciones : new Continue(_$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Continue", null, null)
        };
    
break;
case 172:

        this.$ = {
            instrucciones : new SentenciaFor($$[$0].declarado, $$[$0].id, $$[$0].valor_inicio.instrucciones, $$[$0].condicion.instrucciones, $$[$0].incremento.instrucciones, $$[$0].instrucciones.instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "For", null)
        }
        instruccion = new Nodo("=", null, null)
        instruccion.agregarHijos(new Nodo($$[$0].id, null, null))
        instruccion.agregarHijos($$[$0].valor_inicio.nodo)
        this.$.nodo.agregarHijos(instruccion);
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0].condicion.nodo)
        this.$.nodo.agregarHijos(instruccion)
        this.$.nodo.agregarHijos($$[$0].incremento.nodo)
        if($$[$0].instrucciones.nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].instrucciones.nodo)
        }
    
break;
case 173:

        this.$ = {
            id : $$[$0-8],
            valor_inicio : $$[$0-6],
            condicion : $$[$0-4],
            incremento : $$[$0-2],
            instrucciones : $$[$0],
            declarado : 1
        }
    
break;
case 174:

        this.$ = {
            id : $$[$0-8],
            valor_inicio : $$[$0-6],
            condicion : $$[$0-4],
            incremento : $$[$0-2],
            instrucciones : $$[$0],
            declarado : 0
        }
    
break;
case 175:

        this.$ = {
            instrucciones : new SentenciaDowhile($$[$0-2].instrucciones, $$[$0-5].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo(null, "Do_while", null)
        }
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-2].nodo)
        if($$[$0-5].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-5].nodo)
        }
        this.$.nodo.agregarHijos(instruccion)
    
break;
case 176:

        this.$ = {
            instrucciones : new SentenciaWhile($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "While", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].nodo != null){
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 177:

        this.$ = {
            instrucciones : new SentenciaSwitch($$[$0-3].instrucciones, $$[$0].casos, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Switch", null)
        };
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].casos != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo_casos)
        }
    
break;
case 179:

        this.$ = {
            casos : null,
            nodo_casos : null
        };
    
break;
case 180:

        hermano = eval('$$');
        if(hermano[hermano.length - 1].casos == null)
        {
            this.$ = {
                casos : [new Caso($$[$0-2].instrucciones, hermano[hermano.length - 1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos($$[$0-2].nodo)
            if(hermano[hermano.length - 1].instrucciones != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
        }
        else
        {
            hermano[hermano.length - 1].casos.unshift(new Caso($$[$0-2], hermano[hermano.length - 1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column))
            this.$ = {
                casos : hermano[hermano.length - 1].casos,
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos($$[$0-2].nodo);
            if(hermano[hermano.length - 1].nodo != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }            
            this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo_casos)
        }
    
break;
case 181:

        hermano = eval('$$');
        if(hermano[hermano.length - 1].casos == null)
        {
            this.$ = {
                casos : [new CasoDef(hermano[hermano.length - 1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)],
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos(new Nodo("Default", null, null));
            if(hermano[hermano.length - 1].instrucciones != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
        }
        else
        {
            hermano[hermano.length - 1].casos.unshift(new CasoDef(hermano[hermano.length - 1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column));
            this.$ = {
                casos : hermano[hermano.length - 1].casos,
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos(new Nodo("Default", null, null))
            if(hermano[hermano.length - 1].nodo != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
            this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo_casos)
        }
    
break;
case 182:

        hermano = eval('$$')
        if(hermano[hermano.length - 1] == null)
        {
            this.$ = {
                instrucciones : hermano[hermano.length - 2].instrucciones,
                casos : null,
                nodo : hermano[hermano.length - 2].nodo,
                nodo_casos : null
            }
        }
        else
        {
            this.$ = {
                instrucciones : hermano[hermano.length - 2].instrucciones,
                casos : hermano[hermano.length - 1].casos,
                nodo : hermano[hermano.length - 2].nodo,
                nodo_casos : hermano[hermano.length - 1].nodo_casos
            }
        }
        
    
break;
case 183:

        hermano = eval('$$');
        this.$ = {
            instrucciones : null,
            casos : hermano[hermano.length - 1].casos,
            nodo : null,
            nodo_casos : hermano[hermano.length - 1].nodo_casos
        }
    
break;
case 184:

        this.$ = {
            instrucciones : null,
            casos : null,
            nodo : null,
            nodo_casos : null
        }
    
break;
case 186:

        this.$ = null
    
break;
case 187:

        this.$ = {
            instrucciones : new SentenciaIf($$[$0-3].instrucciones, $$[$0-1].instrucciones, $$[$0].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "IF", null)
        };
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-3].nodo);
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0-1].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-1].nodo)
        }

        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 188:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "ELSE", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 193:

        this.$ = {
            contenido : {
                instrucciones : null
            }
            ,
            nodo : null
        };
    
break;
case 194:

        this.$ = {
            contenido : $$[$0],
            estype : false
        }
    
break;
case 195:

        this.$ = {
            contenido : $$[$0-1],
            estype : true
        }
    
break;
case 217:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Llamada($$[$0-2], hermano[hermano.length-1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "Llamada", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        if(hermano[hermano.length - 1].nodo != null)
        {
            this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
        }
    
break;
case 231:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Imprimir(hermano[hermano.length-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "Imprimir", null)
        }
        if(hermano[hermano.length - 1].nodo != null)
        {
            this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
        }
    
break;
case 232:

        this.$ = {
            instrucciones : new GraficarTs(_$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(NULL, "GraficarTs", null)
        }
    
break;
case 233:

        console.log('entro a parentesis');
        hermano = eval('$$');
        this.$ = {
            instrucciones : [],
            nodo : null
        };
    
break;
case 234:

        console.log("entro a parametros");
        this.$ = $$[$0-1];
    
break;
case 236:

        this.$ = {
            instrucciones : $$[$0],
            nodo : new Nodo(null, "ATRIB", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 237:

        hermano = eval('$$');
        hermano[hermano.length-1].instrucciones.unshift(hermano[hermano.length - 2].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length-1].instrucciones,
            nodo : hermano[hermano.length - 2].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 238: case 242:

        hermano = eval('$$');
        this.$ = {
            instrucciones : [hermano[hermano.length-1].instrucciones],
            nodo : hermano[hermano.length - 1].nodo
        }
    
break;
case 240:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 241:

        hermano = eval('$$');
        hermano[hermano.length-1].instrucciones.unshift(hermano[hermano.length - 3].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length-1].instrucciones,
            nodo : hermano[hermano.length - 3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 244:

        this.$ = {
            instrucciones : new ValoresTipo($$[$0-2], $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 245:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length -3].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : hermano[hermano.length-3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 246:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length - 2].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : hermano[hermano.length -2].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 247: case 252:

        hermano = eval('$$');
        this.$ = {
            instrucciones : [hermano[hermano.length - 1].instrucciones],
            nodo : hermano[hermano.length - 1].nodo
        }
    
break;
case 249:

        this.$ = {
            instrucciones : new VariablesTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "Parametro", null) 
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0]], null, null));
    
break;
case 250:

        this.$ = {
            instrucciones : new VariablesTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
    
break;
case 251:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length - 3].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : hermano[hermano.length - 3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:26,15:27,16:28,17:29,18:30,20:$V1,21:$V2,22:$V3,23:25,26:$V4,27:$V5,28:$V6,29:$V7,31:24,42:$V8,43:$V9,44:$Va,50:$Vb,55:$Vc,60:$Vd,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm,91:$Vn},{1:[3]},{2:$V0,5:[1,42],6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:26,15:27,16:28,17:29,18:30,20:$V1,21:$V2,22:$V3,23:25,26:$V4,27:$V5,28:$V6,29:$V7,31:24,42:$V8,43:$V9,44:$Va,50:$Vb,55:$Vc,60:$Vd,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm,91:$Vn},o($Vo,[2,3]),{8:[1,44]},{8:[1,45]},{8:[1,46],24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},o($Vo,[2,7]),o($Vo,[2,8]),o($Vo,[2,9]),{8:[1,62],19:$VE},{29:[1,64]},{29:[1,65]},{29:[1,66]},{10:67,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:69,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:70,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},o($VG,[2,104]),o($VG,[2,105]),o($VG,[2,106]),o($VG,[2,107]),o($VH,$VI,{53:71,27:$VJ,30:[1,72],34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,82:$VS}),o($VG,[2,110]),o($VG,[2,111]),o($VG,[2,112]),o($VG,[2,113]),o($VT,[2,11]),o($VT,[2,12]),o($VT,[2,13]),o($VT,[2,14]),o($VT,[2,15]),{8:[1,83]},{8:[1,84]},{8:[1,85],10:86,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{29:[1,87]},{82:[1,88]},{27:[1,89]},{27:[1,90]},{27:[1,91]},{27:[1,92]},{33:93,45:$VU},{27:[1,95]},{1:[2,1]},o($Vo,[2,2]),o($Vo,[2,4]),o($Vo,[2,5]),o($Vo,[2,6]),{10:96,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:97,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:98,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:99,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:100,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:101,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:102,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:103,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:104,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:105,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:106,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:107,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:108,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:109,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:110,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},o($Vo,[2,10]),o($VT,[2,16]),{8:[2,75],25:[1,111],30:[1,112]},{25:[1,113],30:[1,114]},{30:[1,115]},o($VG,[2,87]),o($VG,$VI,{53:116,27:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,82:$VS}),o($VG,[2,96]),{24:$Vp,32:[1,117],62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},o($VH,$VV,{30:[1,118],82:$VW}),{10:121,23:25,27:$V5,29:$VF,31:24,45:[1,120],61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:124,23:25,27:$V5,29:$VF,31:24,32:[1,122],61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,83:123,84:$Vl,86:$Vm},o($VG,[2,24]),o($VG,[2,25]),{10:125,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:126,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:127,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:128,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:129,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:130,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{29:[1,131]},o($VT,[2,17]),o($VT,[2,18]),o($VT,[2,19]),{8:[1,132],24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{27:[1,133]},{85:[1,134]},{32:[1,135]},{10:136,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:137,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:138,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{43:[1,139]},{2:$VX,7:142,10:143,11:144,12:145,14:26,15:27,16:28,17:29,18:30,19:[1,141],20:$V1,21:$V2,22:$V3,23:25,26:$V4,27:$V5,28:$V6,29:$V7,31:24,42:$V8,43:$V9,44:$Va,48:140,50:$Vb,60:$Vd,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{28:[1,147],29:[1,148]},o([8,19,24,25,29,32,58,62,63],[2,88],{64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o([8,19,24,25,29,32,58,63],[2,89],{62:$Vq,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o($VY,[2,90],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o($VY,[2,91],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o($VZ,[2,92],{70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o($VZ,[2,93],{70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o($VZ,[2,94],{70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o($VZ,[2,95],{70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o($V_,[2,97],{72:$VA,73:$VB,74:$VC,75:$VD}),o($V_,[2,98],{72:$VA,73:$VB,74:$VC,75:$VD}),o($V$,[2,99],{75:$VD}),o($V$,[2,100],{75:$VD}),o($V$,[2,101],{75:$VD}),o($VG,[2,102]),{24:$Vp,25:[1,149],62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{29:[1,151],59:150,87:$V01,88:$V11,89:$V21,90:$V31},{10:156,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{29:[1,158],59:157,87:$V01,88:$V11,89:$V21,90:$V31},{10:159,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{45:[1,160]},o($VG,$VV,{82:$VW}),o($VG,[2,103]),{10:161,23:25,27:$V5,29:$VF,31:24,45:[1,162],61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{29:[1,163]},{29:$V41,54:164},{8:[1,166],24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},o($VG,[2,116]),{32:[1,167],58:$V51},o($V61,[2,122],{24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o($V71,[2,26],{24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o($V71,[2,27],{24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o($V71,[2,28],{24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o($V71,[2,29],{24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o($V71,[2,30],{24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o($V71,[2,31],{24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o($V81,[2,115]),o($VT,[2,20]),{29:$V91,32:[1,171],92:169,93:170,138:172},{27:[1,174]},o($VG,[2,120]),{24:$Vp,32:[1,175],62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{24:$Vp,32:[1,176],62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{24:$Vp,32:[1,177],62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{27:[1,178]},{2:$Va1,7:180,10:183,11:181,12:182,14:26,15:27,16:28,17:29,18:30,19:[1,179],20:$V1,21:$V2,22:$V3,23:25,26:$V4,27:$V5,28:$V6,29:$V7,31:24,42:$V8,43:$V9,44:$Va,50:$Vb,60:$Vd,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},o($Vb1,[2,48]),{8:[1,185]},{8:[1,186],24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},o($Vc1,[2,56]),o($Vc1,[2,57]),{8:[1,187],19:$VE},{29:[1,188]},{30:[1,189]},{10:190,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{8:[2,74],30:[1,191]},{8:[2,78],30:[1,192]},o($Vd1,[2,123]),o($Vd1,[2,124]),o($Vd1,[2,125]),o($Vd1,[2,126]),{8:[2,73],24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{30:[1,193]},{30:[1,194]},{8:[2,80],24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{29:[1,196],56:195},{8:[1,197],24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{29:$V41,54:198},o($V81,[2,114]),{19:[1,199],29:$Ve1},{25:[1,201]},o($VT,[2,62]),o($VG,[2,117]),{10:202,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},o($Vo,[2,127]),{32:[1,203]},{25:[1,204]},{32:[2,252],58:[1,206],139:205},{25:[1,207]},{10:124,23:25,27:$V5,29:$VF,31:24,32:[1,208],61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,83:209,84:$Vl,86:$Vm},{33:210,45:$VU},{45:[1,211]},{33:212,45:$VU},{10:213,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},o($Vb1,[2,47]),{8:[1,214]},o($Vc1,[2,50]),o($Vc1,[2,51]),{8:[1,215],24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{8:[1,216],19:$VE},o($Vc1,[2,54]),o($Vc1,[2,55]),o($Vc1,[2,58]),{30:[1,217]},{10:218,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},o($V71,[2,21],{24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),{10:219,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:221,23:25,27:$V5,29:$VF,31:24,45:[1,220],61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{10:222,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{29:[1,224],45:[1,223]},{19:[1,225],29:[1,226]},{25:[1,227]},o($VT,[2,59]),{19:[1,228],29:$Ve1},{8:[1,229]},{25:[1,230]},{10:231,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},o($V61,[2,121],{24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),{25:[1,232]},{29:$Vf1,59:234,87:$V01,88:$V11,89:$V21,90:$V31,94:233},{32:[2,248]},{29:$V91,93:236,138:172},{29:[1,238],59:237,87:$V01,88:$V11,89:$V21,90:$V31},o($VG,[2,118]),{32:[1,239],58:$V51},o($VT,[2,43],{51:240,52:[1,241]}),{19:[1,243],46:242,47:[1,244],49:[1,245]},o($VT,[2,33]),{24:$Vp,32:[1,246],62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},o($Vc1,[2,49]),o($Vc1,[2,52]),o($Vc1,[2,53]),{10:247,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{8:[1,248],24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{8:[2,72],24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{29:$V41,54:249},{8:[2,77],24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{8:[2,79],24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{29:$V41,54:250},{8:[2,82]},{8:[2,63]},{25:[1,251]},{29:$Vg1,57:252,59:253,87:$V01,88:$V11,89:$V21,90:$V31},{8:[1,255]},o($VT,[2,61]),{10:256,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},o($Vh1,[2,86],{24:$Vp,58:[1,257],62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),{29:$Vf1,59:234,87:$V01,88:$V11,89:$V21,90:$V31,94:258},{45:$Vi1,95:259},{45:[2,130]},{45:[2,131]},{32:[2,251]},o($V61,[2,249]),o($V61,[2,250]),o($VG,[2,119]),o($VT,[2,44]),{14:261,33:262,45:$VU,50:$Vb},{19:[1,263],47:[1,264],49:[1,265]},o($VT,[2,35]),{10:266,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{25:[1,267]},{8:[1,268]},{8:[1,269],24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{10:270,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{19:[1,271],29:$Ve1},{19:[1,272],29:$Ve1},{29:$Vg1,57:273,59:253,87:$V01,88:$V11,89:$V21,90:$V31},o($Vh1,[2,69],{8:[1,275],58:[1,274]}),o($Vj1,[2,70]),o($Vj1,[2,71]),o($VT,[2,60]),o($Vh1,[2,84],{24:$Vp,58:[1,276],62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),o($Vh1,[2,85]),{45:$Vi1,95:277},o($Vo,[2,129]),{2:$Vk1,19:[1,280],20:$Vl1,21:$Vm1,22:$Vn1,26:$Vo1,27:$Vp1,28:$Vq1,29:$Vr1,42:$Vs1,43:$Vt1,44:$Vu1,50:$Vv1,60:$Vw1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,84:$VE1,86:$VF1,96:278,97:279,98:281,100:282,102:283,105:286,106:287,107:288,108:289,109:290,110:291,111:292,112:293,130:304},o($VT,[2,45]),o($VT,[2,46]),o($VT,[2,34]),{10:315,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{25:[1,316]},{24:$Vp,25:[1,317],62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},o($VG1,[2,42]),o($VT,[2,32]),{10:318,23:25,27:$V5,29:$VF,31:24,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:22,81:$Vk,84:$Vl,86:$Vm},{8:[1,319],24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{8:[2,76]},{8:[2,81]},o($Vh1,[2,66],{8:[1,321],58:[1,320]}),o($Vh1,[2,67]),o($Vh1,[2,68]),o($Vh1,[2,83]),o($Vo,[2,128]),o($Vb1,[2,132]),{19:[1,322]},o($Vb1,[2,134]),o($VG1,[2,137],{98:281,100:282,102:283,105:286,106:287,107:288,108:289,109:290,110:291,111:292,112:293,130:304,99:323,97:324,2:$Vk1,20:$Vl1,21:$Vm1,22:$Vn1,26:$Vo1,27:$Vp1,28:$Vq1,29:$Vr1,42:$Vs1,43:$Vt1,44:$Vu1,50:$Vv1,60:$Vw1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,84:$VE1,86:$VF1}),{8:[2,193],24:$VH1,30:[1,341],62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1,101:325},{8:[1,342]},{29:[1,343]},{29:[1,344]},o($Vc1,[2,142]),o($Vc1,[2,143]),o($Vc1,[2,144]),o($Vc1,[2,145]),o($Vc1,[2,146]),o($Vc1,[2,147]),o($Vc1,[2,148]),o($Vc1,[2,149]),{8:[1,345],19:[1,346]},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:347,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:348,130:304},o($VW1,[2,213]),o($VW1,[2,214]),o($VW1,[2,215],{128:349,132:359,27:[1,350],34:[1,351],35:[1,352],36:[1,353],37:[1,354],38:[1,355],39:[1,356],40:[1,357],41:[1,358],82:$VX1}),o($VW1,[2,218]),o($VW1,[2,219]),o($VW1,[2,220]),{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:361,130:304},o($VW1,[2,222]),{82:[1,362]},{27:[1,363]},{27:[1,364]},{27:[1,365]},{27:[1,366]},{45:$Vi1,95:367},{27:[1,368]},{8:[1,369]},{8:[1,370]},{8:[1,373],27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:372,119:371,130:304},{24:$Vp,25:[1,374],62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},o($VG1,[2,39],{80:22,31:24,23:25,14:26,15:27,16:28,17:29,18:30,7:142,10:143,11:144,12:145,48:375,2:$VX,20:$V1,21:$V2,22:$V3,26:$V4,27:$V5,28:$V6,29:$V7,42:$V8,43:$V9,44:$Va,50:$Vb,60:$Vd,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,81:$Vk,84:$Vl,86:$Vm}),o($VG1,[2,41],{80:22,31:24,23:25,14:26,15:27,16:28,17:29,18:30,7:142,10:143,11:144,12:145,48:376,2:$VX,20:$V1,21:$V2,22:$V3,26:$V4,27:$V5,28:$V6,29:$V7,42:$V8,43:$V9,44:$Va,50:$Vb,60:$Vd,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,81:$Vk,84:$Vl,86:$Vm}),{8:[1,377],24:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD},{29:$VY1,31:378},o($Vh1,[2,64]),o($Vh1,[2,65]),o($Vb1,[2,133]),o($VG1,[2,135]),o($VG1,[2,136]),{8:[1,380]},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:381,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:382,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:383,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:384,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:385,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:386,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:387,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:388,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:389,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:390,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:391,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:392,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:393,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:394,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:395,130:304},{27:$Vp1,29:$Vr1,45:[1,398],61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:397,127:396,130:304},o($Vc1,[2,139]),{8:[1,401],25:[1,400],30:[1,402],103:399},{25:[1,404],30:[1,405],104:403},o($Vc1,[2,150]),o($Vc1,[2,151]),o($VW1,[2,196]),o($VW1,[2,205]),o($VW1,[2,216]),{27:$Vp1,29:$Vr1,32:$VZ1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:410,129:406,130:304,131:408,134:409},o($VW1,[2,223]),o($VW1,[2,224]),{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:411,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:412,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:413,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:414,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:415,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:416,130:304},o($VW1,[2,238],{132:359,133:417,128:418,82:$VX1}),{29:[1,419]},{24:$VH1,32:[1,420],62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},{85:[1,421]},{32:[1,422]},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:423,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:424,130:304},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:425,130:304},{43:[1,426]},{27:$Vp1,28:[1,428],29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:429,120:427,130:304},o($Vc1,[2,170]),o($Vc1,[2,171]),o($Vc1,[2,167]),{8:[1,430],24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},o($Vc1,[2,169]),o($VG1,[2,37],{80:22,31:24,23:25,14:26,15:27,16:28,17:29,18:30,7:142,10:143,11:144,12:145,48:431,2:$VX,20:$V1,21:$V2,22:$V3,26:$V4,27:$V5,28:$V6,29:$V7,42:$V8,43:$V9,44:$Va,50:$Vb,60:$Vd,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,81:$Vk,84:$Vl,86:$Vm}),o($VG1,[2,38],{80:22,31:24,23:25,14:26,15:27,16:28,17:29,18:30,7:180,11:181,12:182,10:183,2:$Va1,20:$V1,21:$V2,22:$V3,26:$V4,27:$V5,28:$V6,29:$V7,42:$V8,43:$V9,44:$Va,50:$Vb,60:$Vd,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,81:$Vk,84:$Vl,86:$Vm}),o($VG1,[2,40],{80:22,31:24,23:25,14:26,15:27,16:28,17:29,18:30,7:180,11:181,12:182,10:183,2:$Va1,20:$V1,21:$V2,22:$V3,26:$V4,27:$V5,28:$V6,29:$V7,42:$V8,43:$V9,44:$Va,50:$Vb,60:$Vd,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,81:$Vk,84:$Vl,86:$Vm}),{29:$VY1,31:432},{32:[1,433]},{34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR},o($Vc1,[2,138]),o([8,19,24,25,29,30,32,58,62,63],[2,197],{64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o([8,19,24,25,29,30,32,58,63],[2,198],{62:$VI1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o($V_1,[2,199],{66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o($V_1,[2,200],{66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o($V$1,[2,201],{70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o($V$1,[2,202],{70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o($V$1,[2,203],{70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o($V$1,[2,204],{70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o($V02,[2,206],{72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o($V02,[2,207],{72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o($V12,[2,208],{75:$VV1}),o($V12,[2,209],{75:$VV1}),o($V12,[2,210],{75:$VV1}),o($VW1,[2,211]),{24:$VH1,25:[1,434],62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},{8:[2,192]},{8:[2,194],24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},{29:$V22,118:435,136:436},o($Vc1,[2,140]),{29:[1,440],59:439,87:$V01,88:$V11,89:$V21,90:$V31,115:438},o($Vc1,[2,157]),{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:441,130:304},o($Vc1,[2,141]),{29:[1,444],59:443,87:$V01,88:$V11,89:$V21,90:$V31,113:442},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:445,130:304},o($VW1,[2,217]),o($VW1,[2,233]),{32:[1,446]},{32:[2,242],58:[1,448],135:447},o($V61,[2,240],{24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o($V32,[2,225],{24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o($V32,[2,226],{24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o($V32,[2,227],{24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o($V32,[2,228],{24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o($V32,[2,229],{24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o($V32,[2,230],{24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),o($VW1,[2,235]),o($VW1,[2,237]),o($V81,[2,236]),o($VW1,[2,221]),{27:[1,449]},{8:[2,232]},{24:$VH1,32:[1,450],62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},{24:$VH1,32:[1,451],62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},{24:$VH1,32:[1,452],62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},{27:[1,453]},o($Vc1,[2,172]),{29:[1,454]},{24:$VH1,30:[1,455],62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},o($Vc1,[2,168]),o($VG1,[2,36],{80:22,31:24,23:25,14:26,15:27,16:28,17:29,18:30,7:180,11:181,12:182,10:183,2:$Va1,20:$V1,21:$V2,22:$V3,26:$V4,27:$V5,28:$V6,29:$V7,42:$V8,43:$V9,44:$Va,50:$Vb,60:$Vd,61:$Ve,70:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,81:$Vk,84:$Vl,86:$Vm}),{32:[1,456]},{33:457,45:$VU},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:458,130:304},{19:[1,459]},{19:[2,247],29:$V22,58:[1,461],118:462,136:436,137:460},{25:[1,463]},o($Vc1,[2,156]),{8:[1,465],30:[1,466],116:464},{8:[1,468],30:[1,469],117:467},{8:[1,470],24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},o($Vc1,[2,152]),{30:[1,471]},{30:[1,472]},{8:[1,473],24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},o($VW1,[2,234]),{32:[2,239]},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:410,130:304,131:474,134:409},{27:$Vp1,29:$Vr1,32:$VZ1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:410,129:475,130:304,131:408,134:409},{45:$Vi1,95:476},{45:[1,477]},{45:$Vi1,95:478},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:479,130:304},{30:[1,480]},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:481,130:304},{33:482,45:$VU},o($VT,[2,23]),o($V32,[2,212],{24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),{8:[2,195]},{19:[2,243]},{29:$V22,118:483,136:436},{19:[2,246]},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:484,130:304},o($Vc1,[2,159]),o($Vc1,[2,161]),{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:485,130:304},o($Vc1,[2,160]),o($Vc1,[2,163]),{27:$Vp1,29:$Vr1,45:$V42,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:488,114:486,130:304},o($Vc1,[2,158]),{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:489,130:304},{27:$Vp1,29:$Vr1,45:$V42,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:488,114:490,130:304},o($Vc1,[2,153]),{32:[2,241]},{8:[2,231]},o($Vc1,[2,189],{125:491,52:[1,492]}),{19:[1,495],47:$V52,49:$V62,121:493,122:494},o($Vc1,[2,176]),{24:$VH1,32:[1,498],62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:499,130:304},{8:[1,500],24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},o($VT,[2,22]),{19:[2,245]},o([19,29,58],[2,244],{24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1}),{8:[1,501],24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},o($Vc1,[2,164]),{29:$V22,118:502,136:436},{8:[1,503],24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},{8:[1,504],24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},o($Vc1,[2,155]),o($Vc1,[2,187]),{45:$Vi1,50:$Vv1,95:507,105:506,126:505},o($Vc1,[2,177]),{19:[1,508]},o($Vc1,[2,179]),{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:509,130:304},{25:[1,510]},{8:[1,511]},{8:[1,512],24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:513,130:304},o($Vc1,[2,162]),{19:[1,514]},o($Vc1,[2,166]),o($Vc1,[2,154]),o($Vc1,[2,188]),o($Vc1,[2,190]),o($Vc1,[2,191]),o($Vc1,[2,178]),{24:$VH1,25:[1,515],62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},{2:$Vk1,19:$V72,20:$Vl1,21:$Vm1,22:$Vn1,26:$Vo1,27:$Vp1,28:$Vq1,29:$Vr1,42:$Vs1,43:$Vt1,44:$Vu1,47:$V52,49:$V62,50:$Vv1,60:$Vw1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,84:$VE1,86:$VF1,97:517,98:281,100:282,102:283,105:286,106:287,107:288,108:289,109:290,110:291,111:292,112:293,122:518,123:516,130:304},o($Vc1,[2,175]),{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:519,130:304},{8:[1,520],24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},{8:[1,521]},{2:$Vk1,19:$V72,20:$Vl1,21:$Vm1,22:$Vn1,26:$Vo1,27:$Vp1,28:$Vq1,29:$Vr1,42:$Vs1,43:$Vt1,44:$Vu1,47:$V52,49:$V62,50:$Vv1,60:$Vw1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,84:$VE1,86:$VF1,97:517,98:281,100:282,102:283,105:286,106:287,107:288,108:289,109:290,110:291,111:292,112:293,122:518,123:522,130:304},{19:[2,181]},{19:[2,186],47:$V52,49:$V62,122:524,124:523},{19:[2,183]},{8:[1,525],24:$VH1,62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:526,130:304},o($Vc1,[2,165]),{19:[2,180]},{19:[2,182]},{19:[2,185]},{27:$Vp1,29:$Vr1,61:$Vx1,70:$Vy1,76:$Vz1,77:$VA1,78:$VB1,79:$VC1,81:$VD1,100:527,130:304},{24:$VH1,32:[1,528],62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},{24:$VH1,32:[1,529],62:$VI1,63:$VJ1,64:$VK1,65:$VL1,66:$VM1,67:$VN1,68:$VO1,69:$VP1,70:$VQ1,71:$VR1,72:$VS1,73:$VT1,74:$VU1,75:$VV1},{45:$Vi1,95:530},{45:$Vi1,95:531},o($Vc1,[2,174]),o($Vc1,[2,173])],
defaultActions: {42:[2,1],205:[2,248],224:[2,82],225:[2,63],234:[2,130],235:[2,131],236:[2,251],271:[2,76],272:[2,81],396:[2,192],422:[2,232],447:[2,239],459:[2,195],460:[2,243],462:[2,246],474:[2,241],475:[2,231],483:[2,245],516:[2,181],518:[2,183],522:[2,180],523:[2,182],524:[2,185]},
parseError: function parseError (str, hash) {
    console.log(hash)
    if (hash.recoverable) {
        this.trace(str);
        let textoerror = "Se encontro: " + hash.text + ", se esperaba: ";
        for(let i = 0; i < hash.expected.length; i++)
        {
            if(i != hash.expected.length - 1)
            {
                textoerror += hash.expected[i] + ",";
            }
            else
            {
                textoerror += hash.expected[i];
            }
        }

        lerrores.push(new _Error(hash.loc.first_line, hash.loc.last_column + 1, "Sintactico", textoerror));
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
 let hermano = null; 
    let instruccion, nodo = null;
    let errores = null;

    exports.inicioerrores = function(){
        errores = new Array();
    }

    exports.geterrores = function () { 
        return errores 
    };

    const { Aritmeticas } = require('../Expresiones/Aritmeticas');
    const { OpcionesAritmeticas } = require('../Expresiones/Opcionesaritmeticas');
    const { Literal } = require('../Expresiones/Literal');
    const { TiposSimbolo, Simbolo } = require('../Entorno/Simbolo');
    const { Declaracion } = require('../Instrucciones/Declaracion');
    const { Type } = require('../Retorno'); 
    const { Variable } = require('../Expresiones/Variable');
    const { DeclaracionTipos } = require('../Instrucciones/DeclaracionTipos');
    const { VariablesTipo, ValoresTipo } = require('../Expresiones/VariablesTipo');
    const { Asignacion } = require('../Instrucciones/Asignacion');
    const { DeclaracionVarType } = require('../Instrucciones/DeclaracionVarType');
    const { AsignacionVarType } = require('../Instrucciones/AsignacionVarType');
    const { Llamada } = require('../Instrucciones/Llamada');
    const { Relacional, OperacionesLogicas } = require('../Expresiones/Relacional');
    const { Imprimir } = require('../Instrucciones/Imprimir');
    const { SentenciaIf } = require('../Instrucciones/SentenciaIf');
    const { Cuerposentencia } = require('../Instrucciones/Cuerposentencia');
    const { Caso } = require('../Instrucciones/Caso');
    const { CasoDef } = require('../Instrucciones/CasoDef');
    const { SentenciaSwitch } = require('../Instrucciones/SentenciaSwitch');
    const { SentenciaWhile } = require('../Instrucciones/SentenciaWhile');
    const { SentenciaDowhile } = require('../Instrucciones/SentenciaDowhile');
    const { Incremento } = require('../Instrucciones/Incremento');
    const { SentenciaFor } = require('../Instrucciones/SentenciaFor');
    const { Funcion } = require('../Instrucciones/Funcion');
    const { SentenciaTernaria } = require('../Instrucciones/SentenciaTernaria');
    const { SentenciaReturn } = require('../Instrucciones/SentenciaReturn');
    const { Break } = require('../Instrucciones/Break');
    const { GraficarTs } = require('../Instrucciones/GraficarTs');
    const { Nodo } = require('../Arbol/Nodo');
    const { _Error, lerrores } = require('../Error');
    const { Continue } = require('../Instrucciones/Continue');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 76
break;
case 5:return 77
break;
case 6:return 28
break;
case 7:return 60
break;
case 8:return 87
break;
case 9:return 88
break;
case 10:return 89
break;
case 11:return 90
break;
case 12:return 55
break;
case 13:return 81
break;
case 14:return 78
break;
case 15:return 79
break;
case 16:return 50
break;
case 17:return 52
break;
case 18:return 44
break;
case 19:return 47
break;
case 20:return 43
break;
case 21:return 42
break;
case 22:return 26
break;
case 23:return 'IN'
break;
case 24:return 'OF'
break;
case 25:return 20
break;
case 26:return 21
break;
case 27:return 22
break;
case 28:return 91
break;
case 29:return 84
break;
case 30:return 85
break;
case 31:return 86
break;
case 32:return 49
break;
case 33:return 34
break;
case 34:return 35
break;
case 35:return 36
break;
case 36:return 37
break;
case 37:return 38
break;
case 38:return 39
break;
case 39:return 40
break;
case 40:return 41
break;
case 41:return 25
break;
case 42:return 8
break;
case 43:return 62
break;
case 44:return 63
break;
case 45:return 64
break;
case 46:return 65
break;
case 47:return 61
break;
case 48:return 74
break;
case 49:return 75
break;
case 50:return 68
break;
case 51:return 69
break;
case 52:return 66
break;
case 53:return 67
break;
case 54:return 30
break;
case 55:return 71
break;
case 56:return 70
break;
case 57:return 72
break;
case 58:return 73
break;
case 59:return 82
break;
case 60:return 27
break;
case 61:return 32
break;
case 62:return 58
break;
case 63:return 45
break;
case 64:return 19
break;
case 65:return 24
break;
case 66:return '['
break;
case 67:return ']'
break;
case 68:return 29;
break;
case 69:return 5;
break;
case 70: 
                            console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
                            errores.push(new _Error(yy_.yylloc.first_line, yy_.yylloc.first_column, "Lexico", "El simbolo: " + yy_.yytext + " no pertenece al lenguaje"))
                        
break;
}
},
rules: [/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:(("[^\"]*")|(`[^"`"]*`)|('[^"'"]*')))/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:default\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\*\*=)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:%)/,/^(?:\*\*)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:[_a-zA-Z][_a-zA-Z0-9]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,30],$V2=[1,31],$V3=[1,37],$V4=[1,16],$V5=[1,11],$V6=[1,21],$V7=[1,36],$V8=[1,35],$V9=[1,34],$Va=[1,33],$Vb=[1,13],$Vc=[1,12],$Vd=[1,14],$Ve=[1,15],$Vf=[1,17],$Vg=[1,18],$Vh=[1,19],$Vi=[1,20],$Vj=[1,22],$Vk=[1,32],$Vl=[2,5,20,21,25,26,27,28,40,41,42,49,54,59,60,69,75,76,77,78,80,90],$Vm=[1,57],$Vn=[1,43],$Vo=[1,44],$Vp=[1,45],$Vq=[1,46],$Vr=[1,47],$Vs=[1,48],$Vt=[1,49],$Vu=[1,50],$Vv=[1,52],$Vw=[1,51],$Vx=[1,53],$Vy=[1,54],$Vz=[1,55],$VA=[1,56],$VB=[1,60],$VC=[1,65],$VD=[8,23,24,28,31,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$VE=[8,23,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$VF=[2,107],$VG=[1,69],$VH=[1,71],$VI=[1,72],$VJ=[1,73],$VK=[1,74],$VL=[1,75],$VM=[1,76],$VN=[1,77],$VO=[1,78],$VP=[1,79],$VQ=[2,5,20,21,25,26,27,28,40,41,42,45,46,48,49,54,59,60,69,75,76,77,78,80,90],$VR=[1,110],$VS=[2,108],$VT=[1,119],$VU=[8,23,24,28,31,45,57,61,62,63,64],$VV=[8,23,24,28,31,45,57,61,62,63,64,65,66,67,68],$VW=[1,146],$VX=[2,5,20,21,25,26,27,28,40,41,42,45,46,48,49,51,54,59,60,69,75,76,77,78,80,90],$VY=[2,20,21,25,26,27,28,40,41,42,45,46,48,49,59,60,69,75,76,77,78,80],$VZ=[1,152],$V_=[1,153],$V$=[1,154],$V01=[1,155],$V11=[31,57],$V21=[1,167],$V31=[8,24,28,31,45,57],$V41=[8,23,24,28,29,31,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81],$V51=[1,173],$V61=[8,28,29,31,43,45,57],$V71=[1,194],$V81=[1,223],$V91=[1,241],$Va1=[28,45],$Vb1=[1,247],$Vc1=[8,28,45,57],$Vd1=[1,280],$Ve1=[1,289],$Vf1=[1,290],$Vg1=[1,288],$Vh1=[1,309],$Vi1=[1,271],$Vj1=[1,305],$Vk1=[1,287],$Vl1=[1,286],$Vm1=[1,285],$Vn1=[1,284],$Vo1=[1,272],$Vp1=[1,298],$Vq1=[1,299],$Vr1=[1,303],$Vs1=[1,304],$Vt1=[1,306],$Vu1=[1,307],$Vv1=[1,308],$Vw1=[1,282],$Vx1=[1,283],$Vy1=[45,46,48],$Vz1=[2,5,20,21,25,26,27,28,40,41,42,45,46,48,49,51,54,59,60,69,75,76,77,78,80,83,85,90],$VA1=[2,20,21,25,26,27,28,40,41,42,45,46,48,49,59,60,69,75,76,77,78,80,83,85],$VB1=[8,24,28,29,31,45,57],$VC1=[8,23,24,28,29,31,45,57],$VD1=[2,203],$VE1=[1,340],$VF1=[1,341],$VG1=[1,342],$VH1=[1,343],$VI1=[1,344],$VJ1=[1,345],$VK1=[8,23,24,28,29,31,34,35,36,37,38,39,45,57],$VL1=[2,207],$VM1=[1,348],$VN1=[1,347],$VO1=[8,23,24,28,29,31,34,35,36,37,38,39,45,57,61,62],$VP1=[2,211],$VQ1=[1,350],$VR1=[1,351],$VS1=[8,23,24,28,29,31,34,35,36,37,38,39,45,57,61,62,63,64],$VT1=[2,217],$VU1=[1,355],$VV1=[1,356],$VW1=[1,354],$VX1=[1,353],$VY1=[8,23,24,28,29,31,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68],$VZ1=[2,221],$V_1=[1,358],$V$1=[1,359],$V02=[8,23,24,28,29,31,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70],$V12=[2,226],$V22=[1,363],$V32=[1,362],$V42=[1,361],$V52=[8,23,24,28,29,31,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73],$V62=[2,229],$V72=[1,365],$V82=[8,23,24,28,29,31,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$V92=[8,23,24,28,29,31,32,33,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$Va2=[1,375],$Vb2=[8,23,24,26,28,29,31,32,33,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81],$Vc2=[1,382],$Vd2=[1,426],$Ve2=[1,439],$Vf2=[1,510],$Vg2=[1,519],$Vh2=[1,520],$Vi2=[2,181];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"PYC":8,"Declaracion_type":9,"Expresion":10,"Asignacion":11,"Sentencias_control":12,"Funcion":13,"Sentenciaif":14,"Sentenciaswitch":15,"Sentenciawhile":16,"Sentenciadowhile":17,"Sentenciafor":18,"InstruccionesSentencias":19,"BREAK":20,"RETURN":21,"SentenciaTernaria":22,"?":23,"DP":24,"FOR":25,"(":26,"LET":27,"IDENTIFICADOR":28,"=":29,"Aumento":30,")":31,"++":32,"--":33,"+=":34,"-=":35,"*=":36,"/=":37,"%=":38,"**=":39,"DO":40,"WHILE":41,"SWITCH":42,"{":43,"Casos":44,"}":45,"CASE":46,"InstruccionSentencia":47,"DEFAULT":48,"IF":49,"SentenciaElse":50,"ELSE":51,"Listaatributos":52,"Lvalorestype":53,"TYPE":54,"Latributostype":55,"TipoatributosType":56,",":57,"Tipo":58,"CONST":59,"NOT":60,"AND":61,"OR":62,"==":63,"!=":64,"<":65,">":66,"<=":67,">=":68,"-":69,"+":70,"*":71,"/":72,"%":73,"**":74,"NUMERO":75,"CADENA":76,"TRUE":77,"FALSE":78,"Listaparam":79,"NULL":80,".":81,"Llamada":82,"CONSOLE":83,"LOG":84,"GRAFICAR_TS":85,"STRING":86,"NUMBER":87,"BOOLEAN":88,"VOID":89,"FUNCTION":90,"Funcion1":91,"Lparametrosfuncion":92,"Tipofuncion":93,"InstruccionesFuncion":94,"InstruccionesFuncion1":95,"Linstrucciones":96,"Instruccionfuncion":97,"Linstrucciones1":98,"Expresionesfuncion":99,"Instruccionfuncion1":100,"Llamadas_funcion":101,"Auxdeclaracion":102,"Auxdeclaracion4":103,"sentencia_if":104,"sentencia_switch":105,"sentencia_while":106,"sentencia_dowhile":107,"sentencia_for":108,"sentencia_break":109,"Sentencia_return":110,"Auxdeclaracion5":111,"Auxdeclaracion6":112,"Auxdeclaracion1":113,"Auxdeclaracion2":114,"Auxdeclaracion3":115,"ValoresType":116,"Sentencia_return1":117,"sentencia_for1":118,"Lcasosswitch":119,"Lcasos":120,"Lcasos1":121,"Lcasos2":122,"sentencia_else":123,"sentencia_else1":124,"instruccionfuncion12":125,"Auxexpresionesfuncion":126,"Auxexpresionesfuncion1":127,"Expresionesfuncion1":128,"Expresionesfuncion2":129,"Expresionesfuncion3":130,"Expresionesfuncion4":131,"Expresionesfuncion5":132,"Expresionesfuncion6":133,"Expresionesfuncion7":134,"Expresionesfuncion8":135,"Expresionesfuncion9":136,"Expresionesfuncion10":137,"Expresionesfuncion11":138,"Expresionesfuncion12":139,"Expresionesfuncion13":140,"Expresionesfuncion14":141,"Expresionesfuncion15":142,"Expresionesfuncion16":143,"Expresionesfuncion17":144,"Expresionesfuncion18":145,"Expresionesfuncion19":146,"Atributos":147,"Instruccionfuncion2":148,"Parametrosllamada":149,"Atributo":150,"Atributos1":151,"Parametrollamada":152,"Parametrosllamada1":153,"Valortype":154,"ValoresType1":155,"Parametro":156,"Auxparametros":157,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",20:"BREAK",21:"RETURN",23:"?",24:"DP",25:"FOR",26:"(",27:"LET",28:"IDENTIFICADOR",29:"=",31:")",32:"++",33:"--",34:"+=",35:"-=",36:"*=",37:"/=",38:"%=",39:"**=",40:"DO",41:"WHILE",42:"SWITCH",43:"{",45:"}",46:"CASE",48:"DEFAULT",49:"IF",51:"ELSE",54:"TYPE",57:",",59:"CONST",60:"NOT",61:"AND",62:"OR",63:"==",64:"!=",65:"<",66:">",67:"<=",68:">=",69:"-",70:"+",71:"*",72:"/",73:"%",74:"**",75:"NUMERO",76:"CADENA",77:"TRUE",78:"FALSE",80:"NULL",81:".",83:"CONSOLE",84:"LOG",85:"GRAFICAR_TS",86:"STRING",87:"NUMBER",88:"BOOLEAN",89:"VOID",90:"FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[12,2],[12,3],[22,5],[18,12],[18,11],[30,2],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[17,7],[16,5],[15,7],[15,6],[44,5],[44,4],[44,4],[44,3],[44,4],[44,3],[44,2],[14,5],[14,6],[50,2],[50,2],[19,3],[19,2],[47,3],[47,2],[47,2],[47,3],[47,3],[47,2],[47,2],[47,1],[47,1],[47,2],[11,5],[11,7],[11,6],[11,4],[9,6],[55,5],[55,5],[55,4],[55,4],[55,4],[55,3],[56,1],[56,1],[7,6],[7,4],[7,4],[7,2],[7,8],[7,6],[7,4],[7,6],[7,4],[7,8],[7,6],[53,5],[53,4],[53,4],[53,3],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,1],[10,1],[10,1],[10,1],[10,1],[10,2],[10,3],[10,4],[10,1],[10,1],[10,1],[52,3],[52,2],[82,3],[82,4],[82,5],[82,6],[82,3],[79,3],[79,1],[58,1],[58,1],[58,1],[58,1],[13,4],[91,5],[91,4],[93,1],[93,1],[94,2],[95,2],[95,1],[96,2],[98,1],[98,0],[97,3],[97,2],[97,3],[97,3],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,2],[103,2],[103,3],[111,4],[111,3],[102,2],[102,1],[102,3],[113,2],[113,2],[114,1],[114,3],[115,1],[115,2],[112,4],[112,2],[110,2],[117,2],[117,1],[109,2],[108,3],[118,10],[118,9],[107,7],[106,5],[105,6],[119,2],[119,1],[120,4],[120,3],[121,2],[121,1],[121,0],[122,1],[122,0],[104,6],[123,2],[123,0],[124,1],[124,1],[100,2],[100,0],[125,1],[125,3],[99,2],[127,4],[127,0],[126,2],[129,3],[129,3],[129,3],[129,3],[129,3],[129,3],[129,0],[128,2],[131,3],[131,3],[131,0],[130,2],[133,3],[133,3],[133,0],[132,2],[135,3],[135,3],[135,3],[135,3],[135,0],[134,2],[137,3],[137,3],[137,0],[136,2],[139,3],[139,3],[139,3],[139,0],[138,2],[141,3],[141,0],[140,2],[140,2],[140,1],[142,2],[144,1],[144,1],[144,0],[143,2],[146,1],[146,2],[146,0],[145,1],[145,1],[145,1],[145,1],[145,1],[145,1],[145,3],[101,5],[101,3],[148,1],[148,2],[147,2],[150,2],[151,1],[151,0],[149,2],[152,1],[153,2],[153,0],[116,2],[154,3],[155,2],[155,1],[155,0],[92,2],[156,3],[156,3],[157,2],[157,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        
        this.$ = {
            instrucciones : $$[$0-1],
            nodo : new Nodo(null, "INICIO", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
        //$$[$0-1].nodo.addPadre(this.$.nodo)
        return this.$;
    
break;
case 2:

        $$[$0-1].instrucciones.push($$[$0].instrucciones)
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 3:

        this.$ = {
            instrucciones : [$$[$0].instrucciones],
            nodo : new Nodo(null, "INST", null)
        };
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 4: case 5: case 6:

        //this.$ = $$[$0-1];
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : $$[$0-1].nodo
        }
    
break;
case 7: case 9:

        //this.$ = $$[$0];
        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : $$[$0].nodo
        }
    
break;
case 8:

        //this.$ = $$[$0]
        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : $$[$0].nodo
        }
    
break;
case 11: case 12: case 13: case 14: case 15: case 132: case 135: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 150: case 157: case 158: case 162: case 182: case 187: case 188: case 189: case 252: case 256: case 260:

        this.$ = $$[$0];
    
break;
case 17: case 168:

        this.$ = {
            instrucciones : new Break(_$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Break", null, null)
        }
    
break;
case 18:

        this.$ = {
            instrucciones : new SentenciaReturn(null, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Return", null, null)
        }
    
break;
case 19:

        this.$ = {
            instrucciones : new SentenciaReturn($$[$0-1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("Return", null, null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 20:

        this.$ = {
            instrucciones : new SentenciaTernaria($$[$0-4].instrucciones, $$[$0-2].instrucciones, $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "Ternaria", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 21:

        this.$ = {
            instrucciones : new SentenciaFor($$[$0-8], $$[$0-6].instrucciones, $$[$0-4].instrucciones, $$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-11].first_line, _$[$0-11].first_column) ,
            nodo : new Nodo(null, "For", null)
        }
        instruccion = new Nodo("=", null, null)
        instruccion.agregarHijos(new Nodo($$[$0-8], null, null));
        instruccion.agregarHijos($$[$0-6].nodo)
        this.$.nodo.agregarHijos(instruccion)
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(instruccion)
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 22:

        this.$ = {
            instrucciones : new SentenciaFor($$[$0-8], $$[$0-6].instruccion, $$[$0-4].instruccion, $$[$0-2].instruccion, $$[$0].instruccion, _$[$0-10].first_line, _$[$0-10].first_column),
            nodo : new Nodo(null, "For", null)
        }
        instruccion = new Nodo("=", null, null);
        instruccion.agregarHijos(new Nodo($$[$0-8], null, null));
        instruccion.agregarHijos($$[$0-6].nodo)
        this.$.nodo.agregarHijos(instruccion);
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 23:

        this.$ = {
            instrucciones : new Incremento($$[$0-1], OpcionesAritmeticas.MAS, new Literal(1, _$[$0-1].first_line, _$[$0-1].first_column, 0), _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo(null, "Incremento", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos(new Nodo('++', null, null));
        
    
break;
case 24:

        this.$ = {
            instrucciones : new Incremento($$[$0-1], OpcionesAritmeticas.MENOS, new Literal(1, _$[$0-1].first_line, _$[$0-1].first_column, 0), _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo(null, "Incremento", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos(new Nodo('--', null, null));
    
break;
case 25:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.MAS, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("+=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 26:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.MENOS, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("-=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 27:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.POR, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("*=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 28:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.DIV, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column), 
            nodo : new Nodo("/=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 29:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.MODULO, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('%=', null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 30:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.POTENCIA, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('**=', null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 31:

        this.$ = {
            instrucciones : new SentenciaDowhile($$[$0-2].instrucciones, $$[$0-5].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo(null, "Do_while", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo)
        if($$[$0-5].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-5].nodo)
        }
        this.$.nodo.agregarHijos(instruccion)
    
break;
case 32:

        this.$ = {
            instrucciones : new SentenciaWhile($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "While", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 33:

        this.$ = {
            instrucciones : new SentenciaSwitch($$[$0-4].instrucciones, $$[$0-1].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo(null, "Switch", null) 
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 34:

        this.$ = {
            instrucciones : new SentenciaSwitch($$[$0-3].instrucciones, null, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Switch", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(instruccion)
    
break;
case 35:

        $$[$0-4].instrucciones.push(new Caso($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        };
        this.$.nodo.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 36:

        $$[$0-3].instrucciones.push(new Caso($$[$0-1].instrucciones, null, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = {
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        }
        this.$.nodo.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 37:

        $$[$0-3].instrucciones.push(new CasoDef($$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = {
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        };
        this.$.nodo.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(new Nodo(null, "Default", null))
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 38:

        $$[$0-2].instrucciones.push(new CasoDef(null, _$[$0-2].first_line, _$[$0-2].first_column));
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        };
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos(new Nodo("Default", null, null))
    
break;
case 39:

        this.$ = {
            instrucciones : [new Caso($$[$0-2], $$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo(null, "Caso", null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 40:

        this.$ = {
            instrucciones : [new Caso($$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column)],
            nodo : new Nodo(null, "Caso", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 41:

        this.$ = {
            instrucciones : [new CasoDef(null, _$[$0-1].first_line, _$[$0-1].first_column)],
            nodo : new Nodo(null, "Caso", null) 
        }
        this.$.nodo.agregarHijos(new Nodo("Default", null, null));
    
break;
case 42:

        this.$ = {
            instrucciones : new SentenciaIf($$[$0-2].instrucciones, $$[$0].instrucciones, null, _$[$0-4].first_line, _$[$0-4].first_column), 
            nodo : new Nodo(null, "IF", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos(instruccion);
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo);
        }
    
break;
case 43:

        this.$ = {
            instrucciones : new SentenciaIf($$[$0-3].instrucciones, $$[$0-1].instrucciones, $$[$0].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "IF", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0-1].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-1].nodo)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 44:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "ELSE", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 45:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "ELSE", null)
        }
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo);
        }
    
break;
case 46:

        this.$ = {
            instrucciones : new Cuerposentencia($$[$0-1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : $$[$0-1].nodo
        }
    
break;
case 47:

        this.$ = {
            instrucciones : new Cuerposentencia(new Array(), _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : null
        }
    
break;
case 48:

        $$[$0-2].instrucciones.push($$[$0-1].instrucciones);
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 49:

        $$[$0-1].instrucciones.push($$[$0].instrucciones);
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 50:

        $$[$0-1].instrucciones.push($$[$0].instrucciones)
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 51:

        $$[$0-2].instrucciones.push($$[$0-1].instrucciones)
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        };
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 53: case 54:

        this.$ = {
            instrucciones : [$$[$0-1].instrucciones],
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 55: case 56:

        this.$ = {
            instrucciones : [$$[$0].instrucciones],
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 58:

        this.$ = {
            instrucciones : new Asignacion($$[$0-4], $$[$0-3].instrucciones, $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo("Asignacion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 59:

        this.$ = {
            instrucciones : new AsignacionVarType($$[$0-6], $$[$0-5].instrucciones, $$[$0-2].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo("Asignacion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-6], null, null))
        this.$.nodo.agregarHijos($$[$0-5].nodo)
        $$[$0-3].nodo.agregarHijos($$[$0-2].nodo)
    
break;
case 60:

        this.$ = {
            instrucciones : new AsignacionVarType($$[$0-5], null, $$[$0-2].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo("Asignacion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-5], null, null));
        this.$.nodo.agregarHijos($$[$0-2].nodo)
    
break;
case 61:

        this.$ = {
            instrucciones : new Asignacion($$[$0-3], null, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 62:

        this.$ = {
            instrucciones : new DeclaracionTipos($$[$0-4], $$[$0-1].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column), 
            nodo : new Nodo(null, "DECLARACION_TYPE", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 63:

        $$[$0-4].instrucciones.push(new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column))
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo(null, "Valor", null)
        };
        this.$.nodo.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null))
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 64:

        $$[$0-4].instrucciones.push(new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column))
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo(null, "Valor", null)
        }
        this.$.nodo.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null))
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 65:

        $$[$0-3].instrucciones.push(new VariablesTipo($$[$0-2], $$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = {
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo(null, "Valor", null)
        };
        this.$.nodo.agregarHijos($$[$0-3].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 66:

        this.$ = {
            instrucciones : [new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo(null, "Valor", null) 
        };
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 67:

        this.$ = {
            instrucciones : [new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo(null, "Valor", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 68:

        this.$ = {
            instrucciones : [new VariablesTipo($$[$0-2], $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)],
            nodo : new Nodo(null, "Valor", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 69:

        this.$ = {
            instrucciones : $$[$0],
            nodo : new Nodo(Type[$$[$0]], null, null)
        }
    
break;
case 70:

        this.$ = {
            instrucciones : $$[$0],
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 71:

        this.$ = {
            instrucciones :  new Declaracion($$[$0-4], $$[$0].instrucciones, $$[$0-2], TiposSimbolo.VAR, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo("DECLARACION", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0-2]], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null))
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 72:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], $$[$0].instrucciones, null, TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("DECLARACION", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 73:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], null, $$[$0], TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("Declaracion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0]], null, null));
    
break;
case 74:

        this.$ = {
            instrucciones : new Declaracion($$[$0], null, null, TiposSimbolo.VAR, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Declaracion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 75:

        this.$ = {
            instrucciones : new DeclaracionVarType($$[$0-6], $$[$0-1].instrucciones, $$[$0-4], TiposSimbolo.VAR, _$[$0-7].first_line, _$[$0-7].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-6], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 76:

        this.$ = {
            instrucciones : new DeclaracionVarType($$[$0-4], $$[$0].instrucciones, $$[$0-2], TiposSimbolo.VAR, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 77:

        this.$ = {
            instrucciones : new DeclaracionVarType($$[$0-2], null, $$[$0], TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
    
break;
case 78:

        this.$ = {
            instrucciones : new Declaracion($$[$0-4], $$[$0].instrucciones, $$[$0-2], TiposSimbolo.CONST, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0-2]], null, null))
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 79:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], $$[$0].instrucciones, null, TiposSimbolo.CONST, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        };
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 80:

        this.$ = {
            instrucciones : new DeclaracionVarType($$[$0-6], $$[$0-1].instrucciones, $$[$0-4], TiposSimbolo.CONST, _$[$0-7].first_line, _$[$0-7].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-6], null, null)) ;
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 81:

        this.$ = {
            instrucciones : new DeclaracionVarType($$[$0-4], $$[$0], $$[$0-2], TiposSimbolo.CONST, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 82:

        $$[$0-4].instrucciones.push(new ValoresTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null))
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 83:

        $$[$0-3].instrucciones.push(new ValoresTipo($$[$0-2], $$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = { 
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo("Valores", null, null)
        };
        this.$.nodo.agregarHijos($$[$0-3].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 84:

        this.$ = {
            instrucciones : [new ValoresTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 85:

        this.$ = {
            instrucciones : [new ValoresTipo($$[$0-2], $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)],
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 86:

        this.$ = {
            instrucciones : new Relacional($$[$0], null, OperacionesLogicas.NEGADO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('!', null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 87:

        this.$ = {
            instrucciones : new Relacional($$[$0-2], $$[$0], OperacionesLogicas.AND, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('&&', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 88:

        this.$ = {
            instrucciones : new Relacional($$[$0-2], $$[$0], OperacionesLogicas.OR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('||', null, null) 
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 89:

        this.$ = {
            instrucciones : new Relacional($$[$0-2], $$[$0], OperacionesLogicas.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo ('==', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 90:

        this.$ = {
            instrucciones : new Relacional($$[$0-2], $$[$0], OperacionesLogicas.NOIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('!=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 91:

        this.$ = {
            instrucciones : new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MENOR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('<', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 92:

        this.$ = {
            instrucciones : new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('>', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 93:

        this.$ = {
            instrucciones : new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('<=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 94:

        this.$ = {
            instrucciones : new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('>=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 95:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0], null, OpcionesAritmeticas.NEGATIVO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 96:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('+', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 97:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 98:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.POR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('*', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 99:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.DIV, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('/', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 100:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.MODULO, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('%', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 101:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('**', null, null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 102: case 133: case 175: case 247: case 251:

        this.$ = $$[$0-1];
    
break;
case 103: case 241:

        this.$ = {
            instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 104:

        if($$[$0].includes('\"'))
        {
            this.$ = {
                instrucciones : new Literal($$[$0].replace(/['"]+/g, ''), _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0].replace(/['"]+/g, ''), null, null)
            }
        }
        else if($$[$0].includes("'"))
        {
            this.$ = {
                instrucciones : new Literal($$[$0].replace(/["'"]+/g, ''), _$[$0].first_line, _$[$0].first_column),
                nodo : new Nodo($$[$0].replace(/["'"]+/g, ''), null, null)
            }
        }
        else
        {
            this.$ = {
                instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column),
                nodo : new Nodo($$[$0], null, null)
            }
        }
    
break;
case 105: case 106: case 244: case 245:

        this.$ = {
            instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 107: case 243:

        this.$ = {
            instrucciones : new Variable($$[$0], null, 7, _$[$0].first_line, _$[$0].first_column),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 108:

        this.$ = {
            instrucciones : new Variable($$[$0-1], $$[$0].instrucciones, 7, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo(null, 'EXP', null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 109: case 116:

        this.$ = {
            instrucciones : new Llamada($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, 'Llamada', null)
        };
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
    
break;
case 110: case 117:

        this.$ = {
            instrucciones : new Llamada($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo(null, "Llamada", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 111: case 246:

        this.$ = {
            instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 3),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 112: case 113: case 130: case 131: case 154: case 265:

        this.$ = $$[$0]
    
break;
case 114:

        $$[$0-2].instrucciones.push($$[$0]);
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, 'ATRIB', null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
        this.$ = $$[$0-2];
    
break;
case 115:

        this.$ = {
            instrucciones : [$$[$0]],
            nodo : new Nodo(null, 'ATRIB', null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 118:

        this.$ = {
            instrucciones : new Imprimir([], _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "Imprimir", null)
        }
    
break;
case 119:

        this.$ = {
            instrucciones : new Imprimir($$[$0-1].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column) ,
            nodo : new Nodo(null, "Imprimir", null)

        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 120:

        this.$ = {
            instrucciones : new GraficarTs(_$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "GraficarTs", null)
        }
    
break;
case 121:

        $$[$0-2].instrucciones.push($$[$0].instrucciones)
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Parametro", null)
        };
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 122:

        this.$ = {
            instrucciones : [$$[$0].instrucciones],
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 123:

        this.$ = Type.CADENA;
    
break;
case 124:

        this.$ = Type.NUMERO;
    
break;
case 125:

        this.$ = Type.BOOLEANO
    
break;
case 126:

        this.$ = Type.VOID;
    
break;
case 127:

        if($$[$0].parametros != null)
        {
            this.$ = {
                instrucciones : new Funcion($$[$0-2], $$[$0].instrucciones_f.instrucciones, $$[$0].parametros.instrucciones, $$[$0].tipo, _$[$0-3].first_line, _$[$0-3].first_column),
                nodo : new Nodo(null, "Funcion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
            this.$.nodo.agregarHijos($$[$0].parametros.nodo);
            if(isNaN($$[$0].tipo) == false)
            {
                this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
            }
            else
            {
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            }
            if($$[$0].instrucciones_f.nodo != null)
            {
                this.$.nodo.agregarHijos($$[$0].instrucciones_f.nodo)
            }
        }
        else
        {
            this.$ = {
                instrucciones : new Funcion($$[$0-2], $$[$0].instrucciones_f.instrucciones, $$[$0].parametros, $$[$0].tipo, _$[$0-3].first_line, _$[$0-3].first_column),
                nodo : new Nodo(null, "Funcion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
            this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
            if($$[$0].instrucciones_f.nodo != null)
            {
                this.$.nodo.agregarHijos($$[$0].instrucciones_f.nodo)
            }
        }
    
break;
case 128:

        this.$ = {
            parametros : $$[$0-4],
            tipo : $$[$0-1],
            instrucciones_f : $$[$0]
        }
    
break;
case 129:

        this.$ = {
            parametros : null,
            tipo : $$[$0-1],
            instrucciones_f : $$[$0]
        }
    
break;
case 134:

        this.$ = {
            instrucciones : null,
            nodo : null
        };
    
break;
case 136:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length - 2].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 2].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 137:

        hermano = eval('$$');
        this.$ = {
            instrucciones : [hermano[hermano.length - 1].instrucciones],
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 138:

        if($$[$0-1].contenido.instrucciones != null)
        {
            if($$[$0-1].estype == false)
            {
                this.$ = {
                    instrucciones : new Asignacion($$[$0-2].instrucciones.nombre, $$[$0-2].instrucciones.atributos, $$[$0-1].contenido.instrucciones, $$[$0-2].instrucciones.linea, $$[$0-2].instrucciones.columna),
                    nodo : new Nodo("Asignacion", null, null)
                }
                this.$.nodo.agregarHijos($$[$0-2].nodo);
                this.$.nodo.agregarHijos($$[$0-1].contenido.nodo)
            }
            else
            {
                this.$ = {
                    instrucciones : new AsignacionVarType($$[$0-2].instrucciones.nombre, $$[$0-2].instrucciones.atributos, $$[$0-1].contenido.instrucciones, $$[$0-2].instrucciones.linea, $$[$0-2].instrucciones.columna),
                    nodo : new Nodo("Asignacion", null, null)
                }
                this.$.nodo.agregarHijos($$[$0-2].nodo)
                this.$.nodo.agregarHijos($$[$0-1].contenido.nodo)
            }
        }
        else
        {
            this.$ = $$[$0-2];
        }
    
break;
case 139:

        hermano = eval('$$');
        this.$ = hermano[hermano.length - 2];
    
break;
case 140:

        if($$[$0].estype == false){
            if($$[$0].valor == null && $$[$0].tipo == null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], null, null, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
            }
            else if($$[$0].valor == null && $$[$0].tipo != null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], null, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                if(isNaN($$[$0].tipo) == false)
                {
                    this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                }
                else
                {
                    this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
                }
            }
            else if($$[$0].valor != null && $$[$0].tipo != null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                if(isNaN($$[$0].tipo) == false)
                {
                    this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                }
                else
                {
                    this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
                }
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
            else if($$[$0].valor != null && $$[$0].tipo == null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, null, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo('=', null, null));
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
        else
        {
            if($$[$0].valor == null && $$[$0].tipo != null)
            {
                this.$ = {
                    instrucciones : new DeclaracionVarType($$[$0-1], null, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            }
            else if($$[$0].valor != null && $$[$0].tipo != null)
            {
                this.$ = {
                    instrucciones : new DeclaracionVarType($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
    
break;
case 141:

        if($$[$0].estype == false)
        {
            if($$[$0].valor != null && $$[$0].tipo == null)
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, null, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
            else
            {
                this.$ = {
                    instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                this.$.nodo.agregarHijos(new Nodo('=', null, null));
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
        else
        {
            this.$ = {
                instrucciones : new DeclaracionVarType($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                nodo : new Nodo(null, "Declaracion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
            this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            this.$.nodo.agregarHijos(new Nodo('=', null, null))
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 151: case 156:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : null,
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 152:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 153:

        hermano = eval('$$');
        this.$ = $$[$0]
    
break;
case 155:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : null,
            tipo : null
        };
    
break;
case 159:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : null,
            tipo : hermano[hermano.length - 2]
        }
    
break;
case 160:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        };
    
break;
case 161:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : null,
            tipo : hermano[hermano.length - 2]
        }
    
break;
case 163:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : hermano[hermano.length - 3].instrucciones,
            tipo : hermano[hermano.length - 6],
            nodo : hermano[hermano.length - 3].nodo
        }
    
break;
case 164:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 165:

        this.$ = {
            instrucciones : new SentenciaReturn($$[$0].instrucciones, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Return", null, null)
        }
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 166:

        hermano = eval('$$');
        this.$ = {
            instrucciones : hermano[hermano.length - 2].instrucciones,
            nodo : hermano[hermano.length - 2].nodo
        };
    
break;
case 167: case 186:

        this.$ = {
            instrucciones : null,
            nodo : null
        }
    
break;
case 169:

        this.$ = {
            instrucciones : new SentenciaFor($$[$0].id, $$[$0].valor_inicio.instrucciones, $$[$0].condicion.instrucciones, $$[$0].incremento.instrucciones, $$[$0].instrucciones.instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "For", null)
        }
        instruccion = new Nodo("=", null, null)
        instruccion.agregarHijos(new Nodo($$[$0].id, null, null))
        instruccion.agregarHijos($$[$0].valor_inicio.nodo)
        this.$.nodo.agregarHijos(instruccion);
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0].condicion.nodo)
        this.$.nodo.agregarHijos(instruccion)
        this.$.nodo.agregarHijos($$[$0].incremento.nodo)
        if($$[$0].instrucciones.nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].instrucciones.nodo)
        }
    
break;
case 170: case 171:

        this.$ = {
            id : $$[$0-8],
            valor_inicio : $$[$0-6],
            condicion : $$[$0-4],
            incremento : $$[$0-2],
            instrucciones : $$[$0]
        }
    
break;
case 172:

        this.$ = {
            instrucciones : new SentenciaDowhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo(null, "Do_while", null)
        }
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-2].nodo)
        if($$[$0-5].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-5].nodo)
        }
        this.$.nodo.agregarHijos(instruccion)
    
break;
case 173:

        this.$ = {
            instrucciones : new SentenciaWhile($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "While", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].nodo != null){
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 174:

        this.$ = {
            instrucciones : new SentenciaSwitch($$[$0-3].instrucciones, $$[$0].casos, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Switch", null)
        };
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].casos != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo_casos)
        }
    
break;
case 176:

        this.$ = {
            casos : null,
            nodo_casos : null
        };
    
break;
case 177:

        hermano = eval('$$');
        if(hermano[hermano.length - 1].casos == null)
        {
            this.$ = {
                casos : [new Caso($$[$0-2].instrucciones, hermano[hermano.length - 1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos($$[$0-2].nodo)
            if(hermano[hermano.length - 1].instrucciones != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
        }
        else
        {
            hermano[hermano.length - 1].casos.unshift(new Caso($$[$0-2], hermano[hermano.length - 1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column))
            this.$ = {
                casos : hermano[hermano.length - 1].casos,
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos($$[$0-2].nodo);
            if(hermano[hermano.length - 1].nodo != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }            
            this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo_casos)
        }
    
break;
case 178:

        hermano = eval('$$');
        if(hermano[hermano.length - 1].casos == null)
        {
            this.$ = {
                casos : [new CasoDef(hermano[hermano.length - 1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)],
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos(new Nodo("Default", null, null));
            if(hermano[hermano.length - 1].instrucciones != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
        }
        else
        {
            hermano[hermano.length - 1].casos.unshift(new CasoDef(hermano[hermano.length - 1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column));
            this.$ = {
                casos : hermano[hermano.length - 1].casos,
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos(new Nodo("Default", null, null))
            if(hermano[hermano.length - 1].nodo != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
            this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo_casos)
        }
    
break;
case 179:

        hermano = eval('$$')
        if(hermano[hermano.length - 1] == null)
        {
            this.$ = {
                instrucciones : hermano[hermano.length - 2].instrucciones,
                casos : null,
                nodo : hermano[hermano.length - 2].nodo,
                nodo_casos : null
            }
        }
        else
        {
            this.$ = {
                instrucciones : hermano[hermano.length - 2].instrucciones,
                casos : hermano[hermano.length - 1].casos,
                nodo : hermano[hermano.length - 2].nodo,
                nodo_casos : hermano[hermano.length - 1].nodo_casos
            }
        }
        
    
break;
case 180:

        hermano = eval('$$');
        this.$ = {
            instrucciones : null,
            casos : hermano[hermano.length - 1].casos,
            nodo : null,
            nodo_casos : hermano[hermano.length - 1].nodo_casos
        }
    
break;
case 181:

        this.$ = {
            instrucciones : null,
            casos : null,
            nodo : null,
            nodo_casos : null
        }
    
break;
case 183:

        this.$ = null
    
break;
case 184:

        this.$ = {
            instrucciones : new SentenciaIf($$[$0-3].instrucciones, $$[$0-1].instrucciones, $$[$0].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "IF", null)
        };
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-3].nodo);
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0-1].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-1].nodo)
        }

        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 185:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "ELSE", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 190:

        this.$ = {
            contenido : {
                instrucciones : null
            }
            ,
            nodo : null
        };
    
break;
case 191:

        this.$ = {
            contenido : $$[$0],
            estype : false
        }
    
break;
case 192:

        this.$ = {
            contenido : $$[$0-1],
            estype : true
        }
    
break;
case 193: case 195: case 196: case 203: case 204: case 207: case 208: case 211: case 212: case 217: case 218: case 221: case 222: case 226: case 227: case 229: case 232: case 233: case 236: case 237: case 240:

        hermano = eval('$$');
        this.$ = hermano[hermano.length-1];
    
break;
case 194:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new SentenciaTernaria(hermano[hermano.length - 5].instrucciones, hermano[hermano.length-3].instrucciones, hermano[hermano.length - 1].instrucciones, hermano[hermano.length - 5].instrucciones.linea, hermano[hermano.length - 5].instrucciones.columna),
            nodo : new Nodo(null, "Ternaria", null)
        }
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos(hermano[hermano.length - 5].nodo)
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos(hermano[hermano.length - 3].nodo) 
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 197:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Incremento(hermano[hermano.length - 4].instrucciones, OpcionesAritmeticas.MAS, hermano[hermano.length - 1].instrucciones, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo("+=", null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 198:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Incremento(hermano[hermano.length - 4].instrucciones, OpcionesAritmeticas.MAS, hermano[hermano.length - 1].instrucciones, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo("-=", null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 199:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Incremento(hermano[hermano.length - 4].instrucciones, OpcionesAritmeticas.MAS, hermano[hermano.length - 1].instrucciones, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo("*=", null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 200:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Incremento(hermano[hermano.length - 4].instrucciones, OpcionesAritmeticas.MAS, hermano[hermano.length - 1].instrucciones, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo("/=", null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 201:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Incremento(hermano[hermano.length - 4].instrucciones, OpcionesAritmeticas.MAS, hermano[hermano.length - 1].instrucciones, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo("%=", null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 202:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Incremento(hermano[hermano.length - 4].instrucciones, OpcionesAritmeticas.MAS, hermano[hermano.length - 1].instrucciones, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo("**=", null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 205:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Relacional(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OperacionesLogicas.OR, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length-4].instrucciones.columna),
            nodo : new Nodo('||', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 206:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Relacional(hermano[hermano.length - 4], hermano[hermano.length - 1], OperacionesLogicas.AND, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna),
            nodo : new Nodo('&&', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 209:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Relacional(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OperacionesLogicas.IGUAL, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('==', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo);
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 210:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Relacional(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OperacionesLogicas.NOIGUAL, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna), 
            nodo : new Nodo('!=', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo);
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 213:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Relacional(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OperacionesLogicas.MAYORIGUAL, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('>=', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 214:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Relacional(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OperacionesLogicas.MENORIGUAL, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('<=', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 215:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Relacional(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OperacionesLogicas.MENOR, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('<', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 216:

        hermano = eval('$$');
        this.$ ={
            instrucciones : new Relacional(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OperacionesLogicas.MAYOR, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('>', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 219:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Aritmeticas(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OpcionesAritmeticas.MENOS, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo);
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 220:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Aritmeticas(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OpcionesAritmeticas.MAS, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('+', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo);
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 223:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Aritmeticas(hermano[hermano.length - 4], hermano[hermano.length - 1], OpcionesAritmeticas.MODULO, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna),
            nodo : new Nodo('%', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo);
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 224:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Aritmeticas(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OpcionesAritmeticas.DIV, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna) ,
            nodo : new Nodo('/', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo);
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 225:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Aritmeticas(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OpcionesAritmeticas.POR, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('*', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo);
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 228:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Aritmeticas(hermano[hermano.length - 4].instrucciones, hermano[hermano.length - 1].instrucciones, OpcionesAritmeticas.POTENCIA, hermano[hermano.length - 4].instrucciones.linea, hermano[hermano.length - 4].instrucciones.columna),
            nodo : new Nodo('**', null, null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 4].nodo);
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 230:

        this.$ = {
            instrucciones : new Relacional($$[$0].instrucciones, null, OperacionesLogicas.NEGADO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('!', null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 231:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0].instrucciones, null, OpcionesAritmeticas.NEGATIVO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 234:

        hermano = eval('$$');
        if(hermano[hermano.length-2].tipo == 7){
            this.$ = {
                instrucciones : new Incremento(hermano[hermano.length-2].instrucciones.nombre, OpcionesAritmeticas.MAS, new Literal(1, _$[$0].first_line, _$[$0].first_column, 0), hermano[hermano.length-2].instrucciones.linea, hermano[hermano.length-2].instrucciones.columna), 
                nodo : new Nodo(null, "Incremento", null)
            }
            this.$.nodo.agregarHijos(new Nodo(hermano[hermano.length-2].instrucciones.nombre, null, null));
            this.$.nodo.agregarHijos(new Nodo('--', null, null))
        }else{
            //TODO error
        }
    
break;
case 235:

        hermano = eval('$$');
        if(hermano[hermano.length-2].tipo == 7){
            this.$ = {
                instrucciones : new Incremento(hermano[hermano.length-2].instrucciones.nombre, OpcionesAritmeticas.MENOS, new Literal(1, _$[$0].first_line, _$[$0].first_column, 0), hermano[hermano.length-2].instrucciones.linea, hermano[hermano.length-2].instrucciones.columna),
                nodo : new Nodo(null, "Incremento", null)
            }
            this.$.nodo.agregarHijos(new Nodo(hermano[hermano.length-2].instrucciones.nombre, null, null));
            this.$.nodo.agregarHijos(new Nodo('--', null, null))
        }else{
            //TODO error
        }
    
break;
case 238:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Variable(hermano[hermano.length-2].instrucciones.nombre, hermano[hermano.length-1].instrucciones, 7, hermano[hermano.length-2].instrucciones.linea, hermano[hermano.length-2].instrucciones.columna),
            nodo : new Nodo(null, 'EXP', null)
        }
        this.$.nodo.agregarHijos(new Nodo(hermano[hermano.length - 2].instrucciones.nombre, null, null))
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
        
    
break;
case 239:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Llamada(hermano[hermano.length-3].instrucciones.nombre, hermano[hermano.length-1].instrucciones, hermano[hermano.length-3].instrucciones.linea, hermano[hermano.length-3].instrucciones.columna),
            nodo : new Nodo(null, "Llamada", null)
        }
        this.$.nodo.agregarHijos(new Nodo(hermano[hermano.length - 3].instrucciones.nombre, null, null));
        if(hermano[hermano.length - 1].nodo != null)
        {
            this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
        }
    
break;
case 242:

         if($$[$0].includes('\"'))
        {
            this.$ = {
                instrucciones : new Literal($$[$0].replace(/['"]+/g, ''), _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0].replace(/['"]+/g, ''), null, null)
            }
        }
        else if($$[$0].includes("'"))
        {
            this.$ = {
                instrucciones : new Literal($$[$0].replace(/["'"]+/g, ''), _$[$0].first_line, _$[$0].first_column),
                nodo : new Nodo($$[$0].replace(/["'"]+/g, ''), null, null)
            }
        }
        else
        {
            this.$ = {
                instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column),
                nodo : new Nodo($$[$0], null, null)
            }
        }
    
break;
case 248:

        hermano = eval('$$');
        this.$ = {
            instrucciones : new Imprimir(hermano[hermano.length-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "Imprimir", null)
        }
        if(hermano[hermano.length - 1].nodo != null)
        {
            this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
        }
    
break;
case 249:

        this.$ = {
            instrucciones : new GraficarTs(_$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(NULL, "GraficarTs", null)
        }
    
break;
case 250:

        hermano = eval('$$');
        this.$ = {
            instrucciones : [],
            nodo : null
        };
    
break;
case 253:

        this.$ = {
            instrucciones : $$[$0],
            nodo : new Nodo(null, "ATRIB", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 254:

        hermano = eval('$$');
        hermano[hermano.length-1].instrucciones.unshift(hermano[hermano.length - 2].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length-1].instrucciones,
            nodo : hermano[hermano.length - 2].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 255: case 259:

        hermano = eval('$$');
        this.$ = {
            instrucciones : [hermano[hermano.length-1].instrucciones],
            nodo : hermano[hermano.length - 1].nodo
        }
    
break;
case 257:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 258:

        hermano = eval('$$');
        hermano[hermano.length-1].instrucciones.unshift(hermano[hermano.length - 3].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length-1].instrucciones,
            nodo : hermano[hermano.length - 3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 261:

        this.$ = {
            instrucciones : new ValoresTipo($$[$0-2], $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 262:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length -3].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : hermano[hermano.length-3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 263:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length - 2].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : hermano[hermano.length -2].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 264: case 269:

        hermano = eval('$$');
        this.$ = {
            instrucciones : [hermano[hermano.length - 1].instrucciones],
            nodo : hermano[hermano.length - 1].nodo
        }
    
break;
case 266:

        this.$ = {
            instrucciones : new VariablesTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "Parametro", null) 
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0]], null, null));
    
break;
case 267:

        this.$ = {
            instrucciones : new VariablesTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
    
break;
case 268:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length - 3].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : hermano[hermano.length - 3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:25,15:26,16:27,17:28,18:29,20:$V1,21:$V2,22:24,25:$V3,26:$V4,27:$V5,28:$V6,30:23,40:$V7,41:$V8,42:$V9,49:$Va,54:$Vb,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj,90:$Vk},{1:[3]},{2:$V0,5:[1,38],6:39,7:4,9:5,10:6,11:7,12:8,13:9,14:25,15:26,16:27,17:28,18:29,20:$V1,21:$V2,22:24,25:$V3,26:$V4,27:$V5,28:$V6,30:23,40:$V7,41:$V8,42:$V9,49:$Va,54:$Vb,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj,90:$Vk},o($Vl,[2,3]),{8:[1,40]},{8:[1,41]},{8:[1,42],23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},o($Vl,[2,7]),o($Vl,[2,8]),o($Vl,[2,9]),{8:[1,58],19:59,43:$VB},{28:[1,61]},{28:[1,62]},{28:[1,63]},{10:64,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:66,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:67,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},o($VD,[2,103]),o($VD,[2,104]),o($VD,[2,105]),o($VD,[2,106]),o($VE,$VF,{52:68,26:$VG,29:[1,70],32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,81:$VP}),o($VD,[2,111]),o($VD,[2,112]),o($VD,[2,113]),o($VQ,[2,11]),o($VQ,[2,12]),o($VQ,[2,13]),o($VQ,[2,14]),o($VQ,[2,15]),{8:[1,80]},{8:[1,81],10:82,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{28:[1,83]},{26:[1,84]},{26:[1,85]},{26:[1,86]},{19:87,43:$VB},{26:[1,88]},{1:[2,1]},o($Vl,[2,2]),o($Vl,[2,4]),o($Vl,[2,5]),o($Vl,[2,6]),{10:89,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:90,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:91,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:92,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:93,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:94,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:95,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:96,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:97,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:98,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:99,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:100,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:101,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:102,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:103,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},o($Vl,[2,10]),o($VQ,[2,16]),{2:$VR,7:106,10:107,11:108,12:109,14:25,15:26,16:27,17:28,18:29,20:$V1,21:$V2,22:24,25:$V3,26:$V4,27:$V5,28:$V6,30:23,40:$V7,41:$V8,42:$V9,45:[1,105],47:104,49:$Va,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{8:[2,74],24:[1,111],29:[1,112]},{24:[1,113],29:[1,114]},{29:[1,115]},o($VD,[2,86]),o($VD,$VF,{52:116,26:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,81:$VP}),o($VD,[2,95]),{23:$Vm,31:[1,117],61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},o($VE,$VS,{29:[1,118],81:$VT}),{10:122,22:24,26:$V4,28:$VC,30:23,31:[1,120],60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:121,80:$Vj},{10:124,22:24,26:$V4,28:$VC,30:23,43:[1,123],60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},o($VD,[2,23]),o($VD,[2,24]),{10:125,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:126,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:127,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:128,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:129,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:130,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{28:[1,131]},o($VQ,[2,17]),o($VQ,[2,18]),{8:[1,132],23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{26:[1,133]},{10:134,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:135,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:136,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{41:[1,137]},{27:[1,138],28:[1,139]},o([8,23,24,28,31,45,57,61,62],[2,87],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o([8,23,24,28,31,45,57,62],[2,88],{61:$Vn,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o($VU,[2,89],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o($VU,[2,90],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o($VV,[2,91],{69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o($VV,[2,92],{69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o($VV,[2,93],{69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o($VV,[2,94],{69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o([8,23,24,28,31,45,57,61,62,63,64,65,66,67,68,69,70],[2,96],{71:$Vx,72:$Vy,73:$Vz,74:$VA}),o([8,23,24,28,31,45,57,61,62,63,64,65,66,67,68,69],[2,97],{70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o([8,23,24,28,31,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73],[2,98],{74:$VA}),o([8,23,24,28,31,45,57,61,62,63,64,65,66,67,68,69,70,72,73],[2,99],{71:$Vx,74:$VA}),o([8,23,24,28,31,45,57,61,62,63,64,65,66,67,68,69,70,73],[2,100],{71:$Vx,72:$Vy,74:$VA}),o($VD,[2,101]),{23:$Vm,24:[1,140],61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{2:$VW,7:142,10:145,11:143,12:144,14:25,15:26,16:27,17:28,18:29,20:$V1,21:$V2,22:24,25:$V3,26:$V4,27:$V5,28:$V6,30:23,40:$V7,41:$V8,42:$V9,45:[1,141],49:$Va,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},o($VX,[2,47]),{8:[1,147]},{8:[1,148],23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},o($VY,[2,55]),o($VY,[2,56]),{8:[1,149],19:59,43:$VB},{28:[1,151],58:150,86:$VZ,87:$V_,88:$V$,89:$V01},{10:156,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{28:[1,158],58:157,86:$VZ,87:$V_,88:$V$,89:$V01},{10:159,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{43:[1,160]},o($VD,$VS,{81:$VT}),o($VD,[2,102]),{10:161,22:24,26:$V4,28:$VC,30:23,43:[1,162],60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{28:[1,163]},o($VD,[2,109]),{31:[1,164],57:[1,165]},o($V11,[2,122],{23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),{28:$V21,53:166},{8:[1,168],23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},o($V31,[2,25],{23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o($V31,[2,26],{23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o($V31,[2,27],{23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o($V31,[2,28],{23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o($V31,[2,29],{23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o($V31,[2,30],{23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o($V41,[2,115]),o($VQ,[2,19]),{28:$V51,31:[1,171],91:169,92:170,156:172},{23:$Vm,31:[1,174],61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{23:$Vm,31:[1,175],61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{23:$Vm,31:[1,176],61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{26:[1,177]},{28:[1,178]},{29:[1,179]},{10:180,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},o($VX,[2,46]),{8:[1,181]},o($VY,[2,49]),o($VY,[2,50]),{8:[1,182],23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{8:[1,183],19:59,43:$VB},o($VY,[2,53]),o($VY,[2,54]),o($VY,[2,57]),{8:[2,73],29:[1,184]},{8:[2,77],29:[1,185]},o($V61,[2,123]),o($V61,[2,124]),o($V61,[2,125]),o($V61,[2,126]),{8:[2,72],23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{29:[1,186]},{29:[1,187]},{8:[2,79],23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{28:[1,189],55:188},{8:[1,190],23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{28:$V21,53:191},o($V41,[2,114]),o($VD,[2,110]),{10:192,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{28:$V71,45:[1,193]},{24:[1,195]},o($VQ,[2,61]),o($Vl,[2,127]),{31:[1,196]},{24:[1,197]},{31:[2,269],57:[1,199],157:198},{24:[1,200]},{19:201,43:$VB},{43:[1,202]},{19:203,43:$VB},{10:204,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{29:[1,205]},{10:206,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},o($V31,[2,20],{23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o($VY,[2,48]),o($VY,[2,51]),o($VY,[2,52]),{10:207,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:209,22:24,26:$V4,28:$VC,30:23,43:[1,208],60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{10:210,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{28:[1,212],43:[1,211]},{28:[1,214],45:[1,213]},{24:[1,215]},o($VQ,[2,58]),{28:$V71,45:[1,216]},o($V11,[2,121],{23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),{8:[1,217]},{24:[1,218]},{10:219,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{24:[1,220]},{28:$V81,58:222,86:$VZ,87:$V_,88:$V$,89:$V01,93:221},{31:[2,265]},{28:$V51,92:224,156:172},{28:[1,226],58:225,86:$VZ,87:$V_,88:$V$,89:$V01},o($VQ,[2,42],{50:227,51:[1,228]}),{44:229,45:[1,230],46:[1,231],48:[1,232]},o($VQ,[2,32]),{23:$Vm,31:[1,233],61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{10:234,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{8:[1,235],23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{8:[2,71],23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{28:$V21,53:236},{8:[2,76],23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{8:[2,78],23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{28:$V21,53:237},{8:[2,81]},{8:[2,62]},{24:[1,238]},{28:$V91,56:239,58:240,86:$VZ,87:$V_,88:$V$,89:$V01},{8:[1,242]},o($VQ,[2,60]),{10:243,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},o($Va1,[2,85],{23:$Vm,57:[1,244],61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),{28:$V81,58:222,86:$VZ,87:$V_,88:$V$,89:$V01,93:245},{43:$Vb1,94:246},{43:[2,130]},{43:[2,131]},{31:[2,268]},o($V11,[2,266]),o($V11,[2,267]),o($VQ,[2,43]),{14:248,19:249,43:$VB,49:$Va},{45:[1,250],46:[1,251],48:[1,252]},o($VQ,[2,34]),{10:253,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{24:[1,254]},{8:[1,255]},{8:[1,256],23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{10:257,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{28:$V71,45:[1,258]},{28:$V71,45:[1,259]},{28:$V91,56:260,58:240,86:$VZ,87:$V_,88:$V$,89:$V01},o($Va1,[2,68],{8:[1,262],57:[1,261]}),o($Vc1,[2,69]),o($Vc1,[2,70]),o($VQ,[2,59]),o($Va1,[2,83],{23:$Vm,57:[1,263],61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA}),o($Va1,[2,84]),{43:$Vb1,94:264},o($Vl,[2,129]),{2:$Vd1,20:$Ve1,21:$Vf1,25:$Vg1,26:$Vh1,27:$Vi1,28:$Vj1,40:$Vk1,41:$Vl1,42:$Vm1,45:[1,267],49:$Vn1,59:$Vo1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,83:$Vw1,85:$Vx1,95:265,96:266,97:268,99:269,101:270,104:273,105:274,106:275,107:276,108:277,109:278,110:279,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},o($VQ,[2,44]),o($VQ,[2,45]),o($VQ,[2,33]),{10:310,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{24:[1,311]},{23:$Vm,24:[1,312],61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},o($Vy1,[2,41]),o($VQ,[2,31]),{10:313,22:24,26:$V4,28:$VC,30:23,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj},{8:[1,314],23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{8:[2,75]},{8:[2,80]},o($Va1,[2,65],{8:[1,316],57:[1,315]}),o($Va1,[2,66]),o($Va1,[2,67]),o($Va1,[2,82]),o($Vl,[2,128]),o($Vz1,[2,132]),{45:[1,317]},o($Vz1,[2,134]),o($Vy1,[2,137],{97:268,99:269,101:270,104:273,105:274,106:275,107:276,108:277,109:278,110:279,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302,98:318,96:319,2:$Vd1,20:$Ve1,21:$Vf1,25:$Vg1,26:$Vh1,27:$Vi1,28:$Vj1,40:$Vk1,41:$Vl1,42:$Vm1,49:$Vn1,59:$Vo1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,83:$Vw1,85:$Vx1}),{8:[2,190],29:[1,321],100:320},{8:[1,322]},{28:[1,323]},{28:[1,324]},o($VA1,[2,142]),o($VA1,[2,143]),o($VA1,[2,144]),o($VA1,[2,145]),o($VA1,[2,146]),o($VA1,[2,147]),o($VA1,[2,148]),{8:[1,325]},o($VB1,[2,195],{127:326,23:[1,327]}),{81:[1,328]},{26:[1,329]},{26:[1,330]},{26:[1,331]},{26:[1,332]},{43:$Vb1,94:333},{26:[1,334]},{8:[1,335]},{8:[1,338],26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:337,117:336,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},o($VC1,$VD1,{129:339,34:$VE1,35:$VF1,36:$VG1,37:$VH1,38:$VI1,39:$VJ1}),o($VK1,$VL1,{131:346,61:$VM1,62:$VN1}),o($VO1,$VP1,{133:349,63:$VQ1,64:$VR1}),o($VS1,$VT1,{135:352,65:$VU1,66:$VV1,67:$VW1,68:$VX1}),o($VY1,$VZ1,{137:357,69:$V_1,70:$V$1}),o($V02,$V12,{139:360,71:$V22,72:$V32,73:$V42}),o($V52,$V62,{141:364,74:$V72}),{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,140:366,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,140:367,142:300,143:301,145:302},o($V82,[2,232]),o($V82,[2,236],{144:368,32:[1,369],33:[1,370]}),o($V92,[2,240],{146:371,147:372,150:374,26:[1,373],81:$Va2}),o($Vb2,[2,241]),o($Vb2,[2,242]),o($Vb2,[2,243]),o($Vb2,[2,244]),o($Vb2,[2,245]),o($Vb2,[2,246]),{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:376,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{23:$Vm,24:[1,377],61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},o($Vy1,[2,38],{30:23,22:24,14:25,15:26,16:27,17:28,18:29,7:106,10:107,11:108,12:109,47:378,2:$VR,20:$V1,21:$V2,25:$V3,26:$V4,27:$V5,28:$V6,40:$V7,41:$V8,42:$V9,49:$Va,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj}),o($Vy1,[2,40],{30:23,22:24,14:25,15:26,16:27,17:28,18:29,7:106,10:107,11:108,12:109,47:379,2:$VR,20:$V1,21:$V2,25:$V3,26:$V4,27:$V5,28:$V6,40:$V7,41:$V8,42:$V9,49:$Va,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj}),{8:[1,380],23:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA},{28:$Vc2,30:381},o($Va1,[2,63]),o($Va1,[2,64]),o($Vz1,[2,133]),o($Vy1,[2,135]),o($Vy1,[2,136]),{8:[1,383]},{26:$Vh1,28:$Vj1,43:[1,386],60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:385,125:384,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},o($VA1,[2,139]),{8:[1,389],24:[1,388],29:[1,390],102:387},{24:[1,392],29:[1,393],103:391},o($VA1,[2,149]),o($VB1,[2,193]),{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,126:394,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{84:[1,395]},{31:[1,396]},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:397,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:398,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:399,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{41:[1,400]},{26:$Vh1,27:[1,402],28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:403,118:401,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},o($VA1,[2,168]),o($VA1,[2,165]),{8:[1,404]},o($VA1,[2,167]),o($VC1,[2,196]),{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,128:405,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,128:406,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,128:407,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,128:408,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,128:409,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,128:410,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},o($VK1,[2,204]),{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,130:411,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,130:412,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},o($VO1,[2,208]),{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,132:413,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,132:414,134:294,136:295,138:296,140:297,142:300,143:301,145:302},o($VS1,[2,212]),{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,134:415,136:295,138:296,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,134:416,136:295,138:296,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,134:417,136:295,138:296,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,134:418,136:295,138:296,140:297,142:300,143:301,145:302},o($VY1,[2,218]),{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,136:419,138:296,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,136:420,138:296,140:297,142:300,143:301,145:302},o($V02,[2,222]),{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,138:421,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,138:422,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,138:423,140:297,142:300,143:301,145:302},o($V52,[2,227]),{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,140:424,142:300,143:301,145:302},o($V82,[2,230]),o($V82,[2,231]),o($V82,[2,233]),o($V82,[2,234]),o($V82,[2,235]),o($V92,[2,237]),o($V92,[2,238]),{26:$Vh1,28:$Vj1,31:$Vd2,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:429,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302,148:425,149:427,152:428},o($V92,[2,255],{150:374,151:430,147:431,81:$Va2}),{28:[1,432]},{31:[1,433]},o($Vy1,[2,36],{30:23,22:24,14:25,15:26,16:27,17:28,18:29,7:106,10:107,11:108,12:109,47:434,2:$VR,20:$V1,21:$V2,25:$V3,26:$V4,27:$V5,28:$V6,40:$V7,41:$V8,42:$V9,49:$Va,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj}),o($Vy1,[2,37],{30:23,22:24,14:25,15:26,16:27,17:28,18:29,7:142,11:143,12:144,10:145,2:$VW,20:$V1,21:$V2,25:$V3,26:$V4,27:$V5,28:$V6,40:$V7,41:$V8,42:$V9,49:$Va,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj}),o($Vy1,[2,39],{30:23,22:24,14:25,15:26,16:27,17:28,18:29,7:142,11:143,12:144,10:145,2:$VW,20:$V1,21:$V2,25:$V3,26:$V4,27:$V5,28:$V6,40:$V7,41:$V8,42:$V9,49:$Va,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj}),{28:$Vc2,30:435},{31:[1,436]},{32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO},o($VA1,[2,138]),{8:[2,189]},{8:[2,191]},{28:$Ve2,116:437,154:438},o($VA1,[2,140]),{28:[1,442],58:441,86:$VZ,87:$V_,88:$V$,89:$V01,113:440},o($VA1,[2,155]),{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:443,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},o($VA1,[2,141]),{28:[1,446],58:445,86:$VZ,87:$V_,88:$V$,89:$V01,111:444},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:447,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{24:[1,448]},{26:[1,449]},{8:[2,249]},{31:[1,450]},{31:[1,451]},{31:[1,452]},{26:[1,453]},o($VA1,[2,169]),{28:[1,454]},{29:[1,455]},o($VA1,[2,166]),o($VC1,$VD1,{129:456,34:$VE1,35:$VF1,36:$VG1,37:$VH1,38:$VI1,39:$VJ1}),o($VC1,$VD1,{129:457,34:$VE1,35:$VF1,36:$VG1,37:$VH1,38:$VI1,39:$VJ1}),o($VC1,$VD1,{129:458,34:$VE1,35:$VF1,36:$VG1,37:$VH1,38:$VI1,39:$VJ1}),o($VC1,$VD1,{129:459,34:$VE1,35:$VF1,36:$VG1,37:$VH1,38:$VI1,39:$VJ1}),o($VC1,$VD1,{129:460,34:$VE1,35:$VF1,36:$VG1,37:$VH1,38:$VI1,39:$VJ1}),o($VC1,$VD1,{129:461,34:$VE1,35:$VF1,36:$VG1,37:$VH1,38:$VI1,39:$VJ1}),o($VK1,$VL1,{131:462,61:$VM1,62:$VN1}),o($VK1,$VL1,{131:463,61:$VM1,62:$VN1}),o($VO1,$VP1,{133:464,63:$VQ1,64:$VR1}),o($VO1,$VP1,{133:465,63:$VQ1,64:$VR1}),o($VS1,$VT1,{135:466,65:$VU1,66:$VV1,67:$VW1,68:$VX1}),o($VS1,$VT1,{135:467,65:$VU1,66:$VV1,67:$VW1,68:$VX1}),o($VS1,$VT1,{135:468,65:$VU1,66:$VV1,67:$VW1,68:$VX1}),o($VS1,$VT1,{135:469,65:$VU1,66:$VV1,67:$VW1,68:$VX1}),o($VY1,$VZ1,{137:470,69:$V_1,70:$V$1}),o($VY1,$VZ1,{137:471,69:$V_1,70:$V$1}),o($V02,$V12,{139:472,71:$V22,72:$V32,73:$V42}),o($V02,$V12,{139:473,71:$V22,72:$V32,73:$V42}),o($V02,$V12,{139:474,71:$V22,72:$V32,73:$V42}),o($V52,$V62,{141:475,74:$V72}),o($V92,[2,239]),o($V92,[2,250]),{31:[1,476]},{31:[2,259],57:[1,478],153:477},o($V11,[2,257]),o($V92,[2,252]),o($V92,[2,254]),o([8,23,24,28,29,31,32,33,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81],[2,253]),o($Vb2,[2,247]),o($Vy1,[2,35],{30:23,22:24,14:25,15:26,16:27,17:28,18:29,7:142,11:143,12:144,10:145,2:$VW,20:$V1,21:$V2,25:$V3,26:$V4,27:$V5,28:$V6,40:$V7,41:$V8,42:$V9,49:$Va,59:$Vc,60:$Vd,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,80:$Vj}),{31:[1,479]},{19:480,43:$VB},{45:[1,481]},{28:$Ve2,45:[2,264],57:[1,483],116:484,154:438,155:482},{24:[1,485]},o($VA1,[2,154]),{8:[1,487],29:[1,488],114:486},{8:[1,490],29:[1,491],115:489},{8:[1,492]},o($VA1,[2,150]),{29:[1,493]},{29:[1,494]},{8:[1,495]},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,126:496,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,31:$Vd2,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:429,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302,148:497,149:427,152:428},{43:$Vb1,94:498},{43:[1,499]},{43:$Vb1,94:500},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:501,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{29:[1,502]},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:503,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},o($VC1,[2,197]),o($VC1,[2,198]),o($VC1,[2,199]),o($VC1,[2,200]),o($VC1,[2,201]),o($VC1,[2,202]),o($VK1,[2,205]),o($VK1,[2,206]),o($VO1,[2,209]),o($VO1,[2,210]),o($VS1,[2,213]),o($VS1,[2,214]),o($VS1,[2,215]),o($VS1,[2,216]),o($VY1,[2,219]),o($VY1,[2,220]),o($V02,[2,223]),o($V02,[2,224]),o($V02,[2,225]),o($V52,[2,228]),o($V92,[2,251]),{31:[2,256]},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:429,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302,149:504,152:428},{19:505,43:$VB},o($VQ,[2,22]),{8:[2,192]},{45:[2,260]},{28:$Ve2,116:506,154:438},{45:[2,263]},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:507,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},o($VA1,[2,157]),o($VA1,[2,159]),{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:508,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},o($VA1,[2,158]),o($VA1,[2,161]),{26:$Vh1,28:$Vj1,43:$Vf2,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:511,112:509,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},o($VA1,[2,156]),{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:512,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{26:$Vh1,28:$Vj1,43:$Vf2,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:511,112:513,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},o($VA1,[2,151]),o($VB1,[2,194]),{8:[2,248]},o($VA1,[2,186],{123:514,51:[1,515]}),{45:[1,518],46:$Vg2,48:$Vh2,119:516,120:517},o($VA1,[2,173]),{31:[1,521]},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:522,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{8:[1,523]},{31:[2,258]},o($VQ,[2,21]),{45:[2,262]},o([28,45,57],[2,261]),{8:[1,524]},o($VA1,[2,162]),{28:$Ve2,116:525,154:438},{8:[1,526]},{8:[1,527]},o($VA1,[2,153]),o($VA1,[2,184]),{43:$Vb1,49:$Vn1,94:530,104:529,124:528},o($VA1,[2,174]),{45:[1,531]},o($VA1,[2,176]),{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:532,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{24:[1,533]},{8:[1,534]},{8:[1,535]},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:536,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},o($VA1,[2,160]),{45:[1,537]},o($VA1,[2,164]),o($VA1,[2,152]),o($VA1,[2,185]),o($VA1,[2,187]),o($VA1,[2,188]),o($VA1,[2,175]),{24:[1,538]},{2:$Vd1,20:$Ve1,21:$Vf1,25:$Vg1,26:$Vh1,27:$Vi1,28:$Vj1,40:$Vk1,41:$Vl1,42:$Vm1,45:$Vi2,46:$Vg2,48:$Vh2,49:$Vn1,59:$Vo1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,83:$Vw1,85:$Vx1,96:540,97:268,99:269,101:270,104:273,105:274,106:275,107:276,108:277,109:278,110:279,120:541,121:539,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},o($VA1,[2,172]),{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:542,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{8:[1,543]},{8:[1,544]},{2:$Vd1,20:$Ve1,21:$Vf1,25:$Vg1,26:$Vh1,27:$Vi1,28:$Vj1,40:$Vk1,41:$Vl1,42:$Vm1,45:$Vi2,46:$Vg2,48:$Vh2,49:$Vn1,59:$Vo1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,83:$Vw1,85:$Vx1,96:540,97:268,99:269,101:270,104:273,105:274,106:275,107:276,108:277,109:278,110:279,120:541,121:545,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{45:[2,178]},{45:[2,183],46:$Vg2,48:$Vh2,120:547,122:546},{45:[2,180]},{8:[1,548]},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:549,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},o($VA1,[2,163]),{45:[2,177]},{45:[2,179]},{45:[2,182]},{26:$Vh1,28:$Vj1,60:$Vp1,69:$Vq1,75:$Vr1,76:$Vs1,77:$Vt1,78:$Vu1,80:$Vv1,99:550,126:281,128:291,130:292,132:293,134:294,136:295,138:296,140:297,142:300,143:301,145:302},{31:[1,551]},{31:[1,552]},{43:$Vb1,94:553},{43:$Vb1,94:554},o($VA1,[2,171]),o($VA1,[2,170])],
defaultActions: {38:[2,1],198:[2,265],212:[2,81],213:[2,62],222:[2,130],223:[2,131],224:[2,268],258:[2,75],259:[2,80],384:[2,189],385:[2,191],396:[2,249],477:[2,256],481:[2,192],482:[2,260],484:[2,263],497:[2,248],504:[2,258],506:[2,262],539:[2,178],541:[2,180],545:[2,177],546:[2,179],547:[2,182]},
parseError: function parseError (str, hash) {
    console.log(hash)
    if (hash.recoverable) {
        this.trace(str);
        let textoerror = "Se encontro: " + hash.text + ", se esperaba: ";
        for(let i = 0; i < hash.expected.length; i++)
        {
            if(i != hash.expected.length - 1)
            {
                textoerror += hash.expected[i] + ",";
            }
            else
            {
                textoerror += hash.expected[i];
            }
        }

        errores.push(new _Error(hash.loc.first_line, hash.loc.last_column + 1, "Sintactico", textoerror));
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
 let hermano = null; 
    let instruccion, nodo = null;
    let errores = null;

    exports.inicioerrores = function(){
        errores = new Array();
    }

    exports.geterrores = function () { 
        return errores 
    };

    const { Aritmeticas } = require('../Expresiones/Aritmeticas');
    const { OpcionesAritmeticas } = require('../Expresiones/Opcionesaritmeticas');
    const { Literal } = require('../Expresiones/Literal');
    const { TiposSimbolo, Simbolo } = require('../Entorno/Simbolo');
    const { Declaracion } = require('../Instrucciones/Declaracion');
    const { Type } = require('../Retorno'); 
    const { Variable } = require('../Expresiones/Variable');
    const { DeclaracionTipos } = require('../Instrucciones/DeclaracionTipos');
    const { VariablesTipo, ValoresTipo } = require('../Expresiones/VariablesTipo');
    const { Asignacion } = require('../Instrucciones/Asignacion');
    const { DeclaracionVarType } = require('../Instrucciones/DeclaracionVarType');
    const { AsignacionVarType } = require('../Instrucciones/AsignacionVarType');
    const { Llamada } = require('../Instrucciones/Llamada');
    const { Relacional, OperacionesLogicas } = require('../Expresiones/Relacional');
    const { Imprimir } = require('../Instrucciones/Imprimir');
    const { SentenciaIf } = require('../Instrucciones/SentenciaIf');
    const { Cuerposentencia } = require('../Instrucciones/Cuerposentencia');
    const { Caso } = require('../Instrucciones/Caso');
    const { CasoDef } = require('../Instrucciones/CasoDef');
    const { SentenciaSwitch } = require('../Instrucciones/SentenciaSwitch');
    const { SentenciaWhile } = require('../Instrucciones/SentenciaWhile');
    const { SentenciaDowhile } = require('../Instrucciones/SentenciaDowhile');
    const { Incremento } = require('../Instrucciones/Incremento');
    const { SentenciaFor } = require('../Instrucciones/SentenciaFor');
    const { Funcion } = require('../Instrucciones/Funcion');
    const { SentenciaTernaria } = require('../Instrucciones/SentenciaTernaria');
    const { SentenciaReturn } = require('../Instrucciones/SentenciaReturn');
    const { Break } = require('../Instrucciones/Break');
    const { GraficarTs } = require('../Instrucciones/GraficarTs');
    const { Nodo } = require('../Arbol/Nodo');
    const { _Error } = require('../Error');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 75
break;
case 5:return 76
break;
case 6:return 27
break;
case 7:return 59
break;
case 8:return 86
break;
case 9:return 87
break;
case 10:return 88
break;
case 11:return 89
break;
case 12:return 54
break;
case 13:return 80
break;
case 14:return 77
break;
case 15:return 78
break;
case 16:return 49
break;
case 17:return 51
break;
case 18:return 42
break;
case 19:return 46
break;
case 20:return 41
break;
case 21:return 40
break;
case 22:return 25
break;
case 23:return 'IN'
break;
case 24:return 'OF'
break;
case 25:return 20
break;
case 26:return 'CONTINUE'
break;
case 27:return 21
break;
case 28:return 90
break;
case 29:return 83
break;
case 30:return 84
break;
case 31:return 85
break;
case 32:return 48
break;
case 33:return 32
break;
case 34:return 33
break;
case 35:return 34
break;
case 36:return 35
break;
case 37:return 36
break;
case 38:return 37
break;
case 39:return 38
break;
case 40:return 39
break;
case 41:return 24
break;
case 42:return 8
break;
case 43:return 61
break;
case 44:return 62
break;
case 45:return 63
break;
case 46:return 64
break;
case 47:return 60
break;
case 48:return 73
break;
case 49:return 74
break;
case 50:return 67
break;
case 51:return 68
break;
case 52:return 65
break;
case 53:return 66
break;
case 54:return 29
break;
case 55:return 70
break;
case 56:return 69
break;
case 57:return 71
break;
case 58:return 72
break;
case 59:return 81
break;
case 60:return 26
break;
case 61:return 31
break;
case 62:return 57
break;
case 63:return 43
break;
case 64:return 45
break;
case 65:return 23
break;
case 66:return '['
break;
case 67:return ']'
break;
case 68:return 28;
break;
case 69:return 5;
break;
case 70: 
                            console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
                            errores.push(new _Error(yy_.yylloc.first_line, yy_.yylloc.first_column, "Lexico", "El simbolo: " + yy_.yytext + " no pertenece al lenguaje"))
                        
break;
}
},
rules: [/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:(("[^\"]*")|(`[^"`"]*`)|('[^"'"]*')))/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:default\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\*\*=)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:%)/,/^(?:\*\*)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:["_" | a-z | A-Z]["_" | a-z | A-Z|0-9]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
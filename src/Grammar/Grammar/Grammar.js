/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,30],$V1=[1,31],$V2=[1,39],$V3=[1,15],$V4=[1,10],$V5=[1,20],$V6=[1,38],$V7=[1,37],$V8=[1,36],$V9=[1,35],$Va=[1,12],$Vb=[1,11],$Vc=[1,13],$Vd=[1,14],$Ve=[1,16],$Vf=[1,17],$Vg=[1,18],$Vh=[1,19],$Vi=[1,22],$Vj=[1,33],$Vk=[1,34],$Vl=[1,32],$Vm=[5,19,20,24,25,26,27,40,41,42,49,54,59,60,69,75,76,77,78,80,83,85,90],$Vn=[1,59],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,52],$Vw=[1,54],$Vx=[1,53],$Vy=[1,55],$Vz=[1,56],$VA=[1,57],$VB=[1,58],$VC=[1,64],$VD=[8,22,23,27,30,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$VE=[8,22,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$VF=[2,103],$VG=[1,69],$VH=[1,70],$VI=[1,71],$VJ=[1,72],$VK=[1,73],$VL=[1,74],$VM=[1,75],$VN=[1,76],$VO=[1,77],$VP=[1,78],$VQ=[5,19,20,24,25,26,27,40,41,42,45,46,48,49,54,59,60,69,75,76,77,78,80,83,85,90],$VR=[1,89],$VS=[2,104],$VT=[1,114],$VU=[8,22,23,27,30,45,57,61,62,63,64],$VV=[8,22,23,27,30,45,57,61,62,63,64,65,66,67,68],$VW=[1,146],$VX=[1,147],$VY=[1,148],$VZ=[1,149],$V_=[1,159],$V$=[1,162],$V01=[30,57],$V11=[8,23,27,30,45,57],$V21=[8,22,23,27,28,30,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81],$V31=[1,167],$V41=[5,19,20,24,25,26,27,40,41,42,45,46,48,49,51,54,59,60,69,75,76,77,78,80,83,85,90],$V51=[19,20,24,25,26,27,40,41,42,45,46,48,49,59,60,69,75,76,77,78,80,83,85],$V61=[8,27,28,30,43,45,57],$V71=[1,192],$V81=[1,226],$V91=[1,245],$Va1=[27,45],$Vb1=[1,251],$Vc1=[8,27,45,57],$Vd1=[1,292],$Ve1=[1,293],$Vf1=[1,291],$Vg1=[1,312],$Vh1=[1,275],$Vi1=[1,308],$Vj1=[1,290],$Vk1=[1,289],$Vl1=[1,288],$Vm1=[1,287],$Vn1=[1,276],$Vo1=[1,301],$Vp1=[1,302],$Vq1=[1,306],$Vr1=[1,307],$Vs1=[1,309],$Vt1=[1,310],$Vu1=[1,311],$Vv1=[1,285],$Vw1=[1,286],$Vx1=[45,46,48],$Vy1=[8,23,27,28,30,45,57],$Vz1=[8,22,23,27,28,30,45,57],$VA1=[2,200],$VB1=[1,342],$VC1=[1,343],$VD1=[1,344],$VE1=[1,345],$VF1=[1,346],$VG1=[1,347],$VH1=[8,22,23,27,28,30,34,35,36,37,38,39,45,57],$VI1=[2,204],$VJ1=[1,350],$VK1=[1,349],$VL1=[8,22,23,27,28,30,34,35,36,37,38,39,45,57,61,62],$VM1=[2,208],$VN1=[1,352],$VO1=[1,353],$VP1=[8,22,23,27,28,30,34,35,36,37,38,39,45,57,61,62,63,64],$VQ1=[2,214],$VR1=[1,357],$VS1=[1,358],$VT1=[1,356],$VU1=[1,355],$VV1=[8,22,23,27,28,30,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68],$VW1=[2,218],$VX1=[1,360],$VY1=[1,361],$VZ1=[8,22,23,27,28,30,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70],$V_1=[2,223],$V$1=[1,365],$V02=[1,364],$V12=[1,363],$V22=[8,22,23,27,28,30,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73],$V32=[2,226],$V42=[1,367],$V52=[8,22,23,27,28,30,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$V62=[8,22,23,27,28,30,32,33,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$V72=[1,377],$V82=[8,22,23,25,27,28,30,32,33,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81],$V92=[1,384],$Va2=[1,428],$Vb2=[1,441],$Vc2=[1,512],$Vd2=[1,521],$Ve2=[1,522],$Vf2=[2,175];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"PYC":8,"Declaracion_type":9,"Expresion":10,"Asignacion":11,"Sentencias_control":12,"Funcion":13,"Sentenciaif":14,"Sentenciaswitch":15,"Sentenciawhile":16,"Sentenciadowhile":17,"Sentenciafor":18,"BREAK":19,"RETURN":20,"SentenciaTernaria":21,"?":22,"DP":23,"FOR":24,"(":25,"LET":26,"IDENTIFICADOR":27,"=":28,"Aumento":29,")":30,"InstruccionesSentencias":31,"++":32,"--":33,"+=":34,"-=":35,"*=":36,"/=":37,"%=":38,"**=":39,"DO":40,"WHILE":41,"SWITCH":42,"{":43,"Casos":44,"}":45,"CASE":46,"InstruccionSentencia":47,"DEFAULT":48,"IF":49,"SentenciaElse":50,"ELSE":51,"Listaatributos":52,"Lvalorestype":53,"TYPE":54,"Latributostype":55,"TipoatributosType":56,",":57,"Tipo":58,"CONST":59,"NOT":60,"AND":61,"OR":62,"==":63,"!=":64,"<":65,">":66,"<=":67,">=":68,"-":69,"+":70,"*":71,"/":72,"%":73,"**":74,"NUMERO":75,"CADENA":76,"TRUE":77,"FALSE":78,"Llamada":79,"NULL":80,".":81,"Listaparam":82,"CONSOLE":83,"LOG":84,"GRAFICAR_TS":85,"STRING":86,"NUMBER":87,"BOOLEAN":88,"VOID":89,"FUNCTION":90,"Funcion1":91,"Lparametrosfuncion":92,"Tipofuncion":93,"InstruccionesFuncion":94,"InstruccionesFuncion1":95,"Linstrucciones":96,"Instruccionfuncion":97,"Linstrucciones1":98,"Expresionesfuncion":99,"Instruccionfuncion1":100,"Llamadas_funcion":101,"Auxdeclaracion":102,"Auxdeclaracion4":103,"sentencia_if":104,"sentencia_switch":105,"sentencia_while":106,"sentencia_dowhile":107,"sentencia_for":108,"sentencia_break":109,"Sentencia_return":110,"Auxdeclaracion5":111,"Auxdeclaracion6":112,"Auxdeclaracion1":113,"Auxdeclaracion2":114,"Auxdeclaracion3":115,"ValoresType":116,"Sentencia_return1":117,"sentencia_for1":118,"Lcasosswitch":119,"Lcasos":120,"Lcasos1":121,"Lcasos2":122,"sentencia_else":123,"sentencia_else1":124,"instruccionfuncion12":125,"AuxInstruccionfuncion1":126,"Instruccionfuncion2":127,"Atributos":128,"Auxexpresionesfuncion":129,"Auxexpresionesfuncion1":130,"Expresionesfuncion1":131,"Expresionesfuncion2":132,"Expresionesfuncion3":133,"Expresionesfuncion4":134,"Expresionesfuncion5":135,"Expresionesfuncion6":136,"Expresionesfuncion7":137,"Expresionesfuncion8":138,"Expresionesfuncion9":139,"Expresionesfuncion10":140,"Expresionesfuncion11":141,"Expresionesfuncion12":142,"Expresionesfuncion13":143,"Expresionesfuncion14":144,"Expresionesfuncion15":145,"Expresionesfuncion16":146,"Expresionesfuncion17":147,"Expresionesfuncion18":148,"Expresionesfuncion19":149,"Ternario":150,"Ternario2":151,"Ternario3":152,"Parametrosllamada":153,"Atributo":154,"Atributos1":155,"Parametrollamada":156,"Parametrosllamada1":157,"Instruccionfuncion3":158,"Valortype":159,"ValoresType1":160,"Parametro":161,"Auxparametros":162,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",19:"BREAK",20:"RETURN",22:"?",23:"DP",24:"FOR",25:"(",26:"LET",27:"IDENTIFICADOR",28:"=",30:")",32:"++",33:"--",34:"+=",35:"-=",36:"*=",37:"/=",38:"%=",39:"**=",40:"DO",41:"WHILE",42:"SWITCH",43:"{",45:"}",46:"CASE",48:"DEFAULT",49:"IF",51:"ELSE",54:"TYPE",57:",",59:"CONST",60:"NOT",61:"AND",62:"OR",63:"==",64:"!=",65:"<",66:">",67:"<=",68:">=",69:"-",70:"+",71:"*",72:"/",73:"%",74:"**",75:"NUMERO",76:"CADENA",77:"TRUE",78:"FALSE",80:"NULL",81:".",83:"CONSOLE",84:"LOG",85:"GRAFICAR_TS",86:"STRING",87:"NUMBER",88:"BOOLEAN",89:"VOID",90:"FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[12,3],[21,5],[18,12],[18,11],[29,2],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[17,7],[16,5],[15,7],[15,6],[44,5],[44,4],[44,4],[44,3],[44,4],[44,3],[44,2],[14,5],[14,6],[50,2],[50,2],[31,3],[31,2],[47,3],[47,2],[47,2],[47,3],[47,2],[47,2],[47,1],[47,1],[11,5],[11,7],[11,6],[11,4],[9,6],[55,5],[55,5],[55,4],[55,4],[55,4],[55,3],[56,1],[56,1],[7,6],[7,4],[7,4],[7,2],[7,8],[7,6],[7,4],[7,6],[7,4],[7,8],[7,6],[53,5],[53,4],[53,4],[53,3],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,1],[10,1],[10,1],[10,1],[10,1],[10,2],[10,1],[10,1],[10,1],[10,1],[52,3],[52,2],[79,3],[79,4],[79,5],[79,6],[79,3],[82,3],[82,1],[58,1],[58,1],[58,1],[58,1],[13,4],[91,5],[91,4],[93,1],[93,1],[94,2],[95,2],[95,1],[96,2],[98,1],[98,0],[97,3],[97,2],[97,3],[97,3],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[103,2],[103,3],[111,4],[111,3],[102,2],[102,1],[102,3],[113,2],[113,2],[114,1],[114,3],[115,1],[115,2],[112,4],[112,2],[110,2],[117,2],[117,1],[109,2],[108,3],[118,10],[118,9],[107,7],[106,5],[105,6],[119,2],[119,1],[120,4],[120,3],[121,2],[121,1],[121,0],[122,1],[122,0],[104,6],[123,2],[123,0],[124,1],[124,1],[100,2],[100,0],[125,1],[125,3],[126,2],[126,1],[126,0],[99,2],[130,4],[130,0],[129,2],[132,3],[132,3],[132,3],[132,3],[132,3],[132,3],[132,0],[131,2],[134,3],[134,3],[134,0],[133,2],[136,3],[136,3],[136,0],[135,2],[138,3],[138,3],[138,3],[138,3],[138,0],[137,2],[140,3],[140,3],[140,0],[139,2],[142,3],[142,3],[142,3],[142,0],[141,2],[144,3],[144,0],[143,2],[143,2],[143,1],[145,2],[147,1],[147,1],[147,0],[146,2],[149,1],[149,2],[149,0],[148,1],[148,1],[148,1],[148,1],[148,1],[148,1],[148,3],[150,3],[151,3],[152,1],[152,1],[101,5],[101,3],[127,1],[127,2],[128,2],[154,2],[155,1],[155,0],[153,2],[156,1],[157,2],[157,0],[158,3],[158,1],[116,2],[159,3],[160,2],[160,1],[160,0],[92,2],[161,3],[161,3],[162,2],[162,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        
        this.$ = {
            instrucciones : $$[$0-1],
            nodo : new Nodo(null, "INICIO", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
        //$$[$0-1].nodo.addPadre(this.$.nodo)
        return this.$;
    
break;
case 2:

        $$[$0-1].instrucciones.push($$[$0].instrucciones)
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 3:

        this.$ = {
            instrucciones : [$$[$0].instrucciones],
            nodo : new Nodo(null, "INST", null)
        };
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 4: case 5: case 6:

        //this.$ = $$[$0-1];
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : $$[$0-1].nodo
        }
    
break;
case 7: case 9:

        //this.$ = $$[$0];
        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : $$[$0].nodo
        }
    
break;
case 8:

        //this.$ = $$[$0]
        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : $$[$0].nodo
        }
    
break;
case 10: case 11: case 12: case 13: case 14: case 105: case 127: case 130: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 151: case 152: case 156: case 176: case 179: case 181: case 182: case 183: case 253: case 254: case 257: case 258: case 263:

        this.$ = $$[$0];
    
break;
case 15:

        this.$ = {
            instrucciones : new Break(_$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Break", null, null)
        }
    
break;
case 16:

        this.$ = {
            instrucciones : new Return(null, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Return", null, null)
        }
    
break;
case 17:

        this.$ = {
            instrucciones : new Return($$[$0-1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("Return", null, null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 18:

        this.$ = {
            instrucciones : new SentenciaTernaria($$[$0-4].instrucciones, $$[$0-2].instrucciones, $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "Ternaria", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 19:

        this.$ = {
            instrucciones : new SentenciaFor($$[$0-8], $$[$0-6].instrucciones, $$[$0-4].instrucciones, $$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-11].first_line, _$[$0-11].first_column) ,
            nodo : new Nodo(null, "For", null)
        }
        instruccion = new Nodo("=", null, null)
        instruccion.agregarHijos(new Nodo($$[$0-8], null, null));
        instruccion.agregarHijos($$[$0-6].nodo)
        this.$.nodo.agregarHijos(instruccion)
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(instruccion)
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 20:

        this.$ = {
            instrucciones : new SentenciaFor($$[$0-8], $$[$0-6].instruccion, $$[$0-4].instruccion, $$[$0-2].instruccion, $$[$0].instruccion, _$[$0-10].first_line, _$[$0-10].first_column),
            nodo : new Nodo(null, "For", null)
        }
        instruccion = new Nodo("=", null, null);
        instruccion.agregarHijos(new Nodo($$[$0-8], null, null));
        instruccion.agregarHijos($$[$0-6].nodo)
        this.$.nodo.agregarHijos(instruccion);
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 21:

        console.log("aumento")
        this.$ = {
            instrucciones : new Incremento($$[$0-1], OpcionesAritmeticas.MAS, new Literal(1, _$[$0-1].first_line, _$[$0-1].first_column, 0), _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo(null, "Incremento", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos(new Nodo('++', null, null));
        console.log(this.$)
    
break;
case 22:

        this.$ = {
            instrucciones : new Incremento($$[$0-1], OpcionesAritmeticas.MENOS, new Literal(1, _$[$0-1].first_line, _$[$0-1].first_column, 0), _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo(null, "Incremento", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos(new Nodo('--', null, null));
    
break;
case 23:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.MAS, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("+=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 24:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.MENOS, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("-=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 25:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.POR, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("*=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 26:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.DIV, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column), 
            nodo : new Nodo("/=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 27:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.MODULO, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('%=', null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 28:

        this.$ = {
            instrucciones : new Incremento($$[$0-2], OpcionesAritmeticas.POTENCIA, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('**=', null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 29:

        this.$ = {
            instrucciones : new SentenciaDowhile($$[$0-2].instrucciones, $$[$0-5].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo(null, "Do_while", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo)
        if($$[$0-5].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-5].nodo)
        }
        this.$.nodo.agregarHijos(instruccion)
    
break;
case 30:

        this.$ = {
            instrucciones : new SentenciaWhile($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "While", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 31:

        this.$ = {
            instrucciones : new SentenciaSwitch($$[$0-4].instrucciones, $$[$0-1].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo(null, "Switch", null) 
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 32:

        this.$ = {
            instrucciones : new SentenciaSwitch($$[$0-3].instrucciones, null, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Switch", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(instruccion)
    
break;
case 33:

        $$[$0-4].instrucciones.push(new Caso($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        };
        this.$.nodo.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 34:

        $$[$0-3].instrucciones.push(new Caso($$[$0-1].instrucciones, null, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = {
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        }
        this.$.nodo.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 35:

        $$[$0-3].instrucciones.push(new CasoDef($$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = {
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        };
        this.$.nodo.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(new Nodo(null, "Default", null))
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 36:

        $$[$0-2].instrucciones.push(new CasoDef(null, _$[$0-2].first_line, _$[$0-2].first_column));
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Caso", null)
        };
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos(new Nodo("Default", null, null))
    
break;
case 37:

        this.$ = {
            instrucciones : [new Caso($$[$0-2], $$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo(null, "Caso", null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 38:

        this.$ = {
            instrucciones : [new Caso($$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column)],
            nodo : new Nodo(null, "Caso", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 39:

        this.$ = {
            instrucciones : [new CasoDef(null, _$[$0-1].first_line, _$[$0-1].first_column)],
            nodo : new Nodo(null, "Caso", null) 
        }
        this.$.nodo.agregarHijos(new Nodo("Default", null, null));
    
break;
case 40:

        this.$ = {
            instrucciones : new SentenciaIf($$[$0-2].instrucciones, $$[$0].instrucciones, null, _$[$0-4].first_line, _$[$0-4].first_column), 
            nodo : new Nodo(null, "IF", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos(instruccion);
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo);
        }
    
break;
case 41:

        this.$ = {
            instrucciones : new SentenciaIf($$[$0-3].instrucciones, $$[$0-1].instrucciones, $$[$0].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "IF", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0-1].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-1].nodo)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 42:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "ELSE", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 43:

        this.$ = {
            instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "ELSE", null)
        }
        if($$[$0].nodo != null)
        {
            console.log("$$[$0] no es null")
            this.$.nodo.agregarHijos($$[$0].nodo);
        }
    
break;
case 44:

        this.$ = {
            instrucciones : new Cuerposentencia($$[$0-1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : $$[$0-1].nodo
        }
    
break;
case 45:

        this.$ = {
            instrucciones : new Cuerposentencia(new Array(), _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : null
        }
    
break;
case 46:

        $$[$0-2].instrucciones.push($$[$0-1].instrucciones);
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 47:

        $$[$0-1].instrucciones.push($$[$0].instrucciones);
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 48:

        $$[$0-1].instrucciones.push($$[$0].instrucciones)
        this.$ = {
            instrucciones : $$[$0-1].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 49:

        $$[$0-2].instrucciones.push($$[$0-1].instrucciones)
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Inst", null)
        };
        this.$.nodo.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 50: case 51:

        this.$ = {
            instrucciones : [$$[$0-1].instrucciones],
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 52: case 53:

        this.$ = {
            instrucciones : [$$[$0].instrucciones],
            nodo : new Nodo(null, "Inst", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 54:

        this.$ = {
            instrucciones : new Asignacion($$[$0-4], $$[$0-3].instrucciones, $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo("Asignacion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 55:

        this.$ = {
            instrucciones : new AsignacionVarType($$[$0-6], $$[$0-5].instrucciones, $$[$0-2].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo("Asignacion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-6], null, null))
        this.$.nodo.agregarHijos($$[$0-5].nodo)
        $$[$0-3].nodo.agregarHijos($$[$0-2].nodo)
    
break;
case 56:

        this.$ = {
            instrucciones : new AsignacionVarType($$[$0-5], null, $$[$0-2].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo("Asignacion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-5], null, null));
        this.$.nodo.agregarHijos($$[$0-2].nodo)
    
break;
case 57:

        this.$ = {
            instrucciones : new Asignacion($$[$0-3], null, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 58:

        this.$ = {
            instrucciones : new DeclaracionTipos($$[$0-4], $$[$0-1].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column), 
            nodo : new Nodo(null, "DECLARACION_TYPE", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 59:

        $$[$0-4].instrucciones.push(new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column))
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo(null, "Valor", null)
        };
        this.$.nodo.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null))
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 60:

        $$[$0-4].instrucciones.push(new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column))
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo(null, "Valor", null)
        }
        this.$.nodo.agregarHijos($$[$0-4].nodo)
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null))
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 61:

        $$[$0-3].instrucciones.push(new VariablesTipo($$[$0-2], $$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = {
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo(null, "Valor", null)
        };
        this.$.nodo.agregarHijos($$[$0-3].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 62:

        this.$ = {
            instrucciones : [new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo(null, "Valor", null) 
        };
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 63:

        this.$ = {
            instrucciones : [new VariablesTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo(null, "Valor", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 64:

        this.$ = {
            instrucciones : [new VariablesTipo($$[$0-2], $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)],
            nodo : new Nodo(null, "Valor", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 65:

        this.$ = {
            instrucciones : $$[$0],
            nodo : new Nodo(Type[$$[$0]], null, null)
        }
    
break;
case 66:

        this.$ = {
            instrucciones : $$[$0],
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 67:

        this.$ = {
            instrucciones :  new Declaracion($$[$0-4], $$[$0].instrucciones, $$[$0-2], TiposSimbolo.VAR, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo("DECLARACION", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0-2]], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null))
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 68:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], $$[$0].instrucciones, null, TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("DECLARACION", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 69:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], null, $$[$0], TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("Declaracion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0]], null, null));
    
break;
case 70:

        this.$ = {
            instrucciones : new Declaracion($$[$0], null, null, TiposSimbolo.VAR, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Declaracion", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 71:

        this.$ = {
            instrucciones : new DeclaracionVarType($$[$0-6], $$[$0-1].instrucciones, $$[$0-4], TiposSimbolo.VAR, _$[$0-7].first_line, _$[$0-7].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-6], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 72:

        this.$ = {
            instrucciones : new DeclaracionVarType($$[$0-4], $$[$0].instrucciones, $$[$0-2], TiposSimbolo.VAR, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 73:

        this.$ = {
            instrucciones : new DeclaracionVarType($$[$0-2], null, $$[$0], TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
    
break;
case 74:

        this.$ = {
            instrucciones : new Declaracion($$[$0-4], $$[$0].instrucciones, $$[$0-2], TiposSimbolo.CONST, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0-2]], null, null))
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 75:

        this.$ = {
            instrucciones : new Declaracion($$[$0-2], $$[$0].instrucciones, null, TiposSimbolo.CONST, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        };
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 76:

        this.$ = {
            instrucciones : new DeclaracionVarType($$[$0-6], $$[$0-1].instrucciones, $$[$0-4], TiposSimbolo.CONST, _$[$0-7].first_line, _$[$0-7].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-6], null, null)) ;
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 77:

        this.$ = {
            instrucciones : new DeclaracionVarType($$[$0-4], $$[$0], $$[$0-2], TiposSimbolo.CONST, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Declaracion", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-4], null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo('=', null, null));
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 78:

        $$[$0-4].instrucciones.push(new ValoresTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = {
            instrucciones : $$[$0-4].instrucciones,
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null))
        this.$.nodo.agregarHijos($$[$0-1].nodo)
    
break;
case 79:

        $$[$0-3].instrucciones.push(new ValoresTipo($$[$0-2], $$[$0].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = { 
            instrucciones : $$[$0-3].instrucciones,
            nodo : new Nodo("Valores", null, null)
        };
        this.$.nodo.agregarHijos($$[$0-3].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 80:

        this.$ = {
            instrucciones : [new ValoresTipo($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 81:

        this.$ = {
            instrucciones : [new ValoresTipo($$[$0-2], $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)],
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 82:

        this.$ = {
            instrucciones : new Relacional($$[$0], null, OperacionesLogicas.NEGADO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('!', null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 83:

        this.$ = {
            instrucciones : new Relacional($$[$0-2], $$[$0], OperacionesLogicas.AND, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('&&', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 84:

        this.$ = {
            instrucciones : new Relacional($$[$0-2], $$[$0], OperacionesLogicas.OR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('||', null, null) 
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 85:

        this.$ = {
            instrucciones : new Relacional($$[$0-2], $$[$0], OperacionesLogicas.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo ('==', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 86:

        this.$ = {
            instrucciones : new Relacional($$[$0-2], $$[$0], OperacionesLogicas.NOIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('!=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 87:

        this.$ = {
            instrucciones : new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MENOR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('<', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 88:

        this.$ = {
            instrucciones : new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('>', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 89:

        this.$ = {
            instrucciones : new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('<=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 90:

        this.$ = {
            instrucciones : new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('>=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 91:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0], null, OpcionesAritmeticas.NEGATIVO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 92:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('+', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 93:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 94:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.POR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('*', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 95:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.DIV, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('/', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 96:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.MODULO, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('%', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 97:

        this.$ = {
            instrucciones : new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('**', null, null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 98: case 128: case 169: case 244: case 252:

        this.$ = $$[$0-1];
    
break;
case 99:

        this.$ = {
            instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 100:

        if($$[$0].includes('\"'))
        {
            this.$ = {
                instrucciones : new Literal($$[$0].replace(/['"]+/g, ''), _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0].replace(/['"]+/g, ''), null, null)
            }
        }
        else if($$[$0].includes("'"))
        {
            this.$ = {
                instrucciones : new Literal($$[$0].replace(/["'"]+/g, ''), _$[$0].first_line, _$[$0].first_column),
                nodo : new Nodo($$[$0].replace(/["'"]+/g, ''), null, null)
            }
        }
        else
        {
            this.$ = {
                instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column),
                nodo : new Nodo($$[$0], null, null)
            }
        }
    
break;
case 101: case 102:

        this.$ = {
            instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 103:

        this.$ = {
            instrucciones : new Variable($$[$0], null, 7, _$[$0].first_line, _$[$0].first_column),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 104:

        this.$ = {
            instrucciones : new Variable($$[$0-1], $$[$0].instrucciones, 7, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo(null, 'EXP', null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 106:

        this.$ = {
            instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 3),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 107:

        console.log($$[$0])
        this.$ = $$[$0]
    
break;
case 108: case 125: case 126: case 148: case 268:

        this.$ = $$[$0]
    
break;
case 109:

        $$[$0-2].instrucciones.push($$[$0]);
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, 'ATRIB', null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
        this.$ = $$[$0-2];
    
break;
case 110:

        this.$ = {
            instrucciones : [$$[$0]],
            nodo : new Nodo(null, 'ATRIB', null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 111:

        this.$ = {
            instrucciones : new Llamada($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, 'Llamada', null)
        };
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
    
break;
case 112:

        this.$ = {
            instrucciones : new Llamada($$[$0-3], $$[$0-1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo(null, "Llamada", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-3], null, null));
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 113:

        this.$ = {
            instrucciones : new Imprimir([], _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "Imprimir", null)
        }
    
break;
case 114:

        this.$ = {
            instrucciones : new Imprimir($$[$0-1].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column) ,
            nodo : new Nodo(null, "Imprimir", null)

        }
        this.$.nodo.agregarHijos($$[$0-1].nodo);
    
break;
case 115:

        this.$ = {
            instrucciones : new GraficarTs(_$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "GraficarTs", null)
        }
    
break;
case 116:

        $$[$0-2].instrucciones.push($$[$0].instrucciones)
        this.$ = {
            instrucciones : $$[$0-2].instrucciones,
            nodo : new Nodo(null, "Parametro", null)
        };
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 117:

        this.$ = {
            instrucciones : [$$[$0].instrucciones],
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 118:

        console.log()
        this.$ = Type.CADENA;
    
break;
case 119:

        this.$ = Type.NUMERO;
    
break;
case 120:

        this.$ = Type.BOOLEANO
    
break;
case 121:

        this.$ = Type.VOID;
    
break;
case 122:

        /*if($$[$0].parametros != null)
        {
            this.$ = {
                instrucciones : new Funcion($$[$0-2], $$[$0].instrucciones_f.instrucciones, $$[$0].parametros.instrucciones, $$[$0].tipo, _$[$0-3].first_line, _$[$0-3].first_column),
                nodo : new Nodo(null, "Funcion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
            this.$.nodo.agregarHijos($$[$0].parametros.nodo);
            this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
            if($$[$0].instrucciones_f.nodo != null)
            {
                this.$.nodo.agregarHijos($$[$0].instrucciones_f.nodo)
            }
        }
        else
        {
            this.$ = {
                instrucciones : new Funcion($$[$0-2], $$[$0].instrucciones_f.instrucciones, $$[$0].parametros.instrucciones, $$[$0].tipo, _$[$0-3].first_line, _$[$0-3].first_column),
                nodo : new Nodo(null, "Funcion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
            this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
            if($$[$0].instrucciones_f.nodo != null)
            {
                this.$.nodo.agregarHijos($$[$0].instrucciones_f.nodo)
            }
        }*/
        this.$ = $$[$0].parametros
    
break;
case 123:

        this.$ = {
            parametros : $$[$0-4],
            tipo : $$[$0-1],
            instrucciones_f : $$[$0]
        }
    
break;
case 124:

        this.$ = {
            parametros : null,
            tipo : $$[$0-1],
            instrucciones_f : $$[$0]
        }
    
break;
case 129: case 170: case 180: case 184:

        this.$ = null;
    
break;
case 131:

        hermano = eval('$$');
        hermano[hermano.length - 1].unshift(hermano[hermano.length - 2]);
        this.$ = hermano[hermano.length - 1];
    
break;
case 132: case 267:

        hermano = eval('$$');
        this.$ = [hermano[hermano.length - 1]];
    
break;
case 133:

        hermano = eval('$$');
        if(hermano[hermano.length - 2] == null){
            this.$ = hermano[hermano.length-3];
        }else{
            this.$ = hermano[hermano.length - 2];
        }
    
break;
case 134:

        hermano = eval('$$');
        this.$ = hermano[hermano.length - 2];
    
break;
case 135:

        if($$[$0].estype == false){
            if($$[$0].valor == null && $$[$0].tipo == null)
            {
                this.$ = new Declaracion($$[$0-1], null, null, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column);
            }
            else if($$[$0].valor == null && $$[$0].tipo != null)
            {
                this.$ = new Declaracion($$[$0-1], null, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column);
            }
            else if($$[$0].valor != null && $$[$0].tipo != null)
            {
                this.$ = new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column);
            }
            else if($$[$0].valor != null && $$[$0].tipo == null)
            {
                this.$ = new Declaracion($$[$0-1], $$[$0].valor, null, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column);
            }
        }
        else
        {
            if($$[$0].valor == null && $$[$0].tipo != null)
            {
                this.$ = new DeclaracionVarType($$[$0-1], null, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column);
            }
            else if($$[$0].valor != null && $$[$0].tipo != null)
            {
                this.$ = new DeclaracionVarType($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column);
            }
        }
    
break;
case 136:

        if($$[$0].estype == false)
        {
            if($$[$0].valor != null && $$[$0].tipo == null)
            {
                this.$ = new Declaracion($$[$0-1], $$[$0].valor, null, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column);
            }
            else
            {
                this.$ = new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column);
            }
        }
        else
        {
            this.$ = new DeclaracionVarType($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column);
        }
    
break;
case 145: case 150:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2],
            tipo : null
        }
    
break;
case 146:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2],
            tipo : hermano[hermano.length - 4]
        }
    
break;
case 147:

        hermano = eval('$$');
        this.$ = $$[$0]
    
break;
case 149:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : null,
            tipo : null
        };
    
break;
case 153:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : null,
            tipo : hermano[hermano.length - 2]
        }
    
break;
case 154:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2],
            tipo : hermano[hermano.length - 4]
        };
    
break;
case 155:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : null,
            tipo : hermano[hermano.length - 2]
        }
    
break;
case 157:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : hermano[hermano.length - 3],
            tipo : hermano[hermano.length - 6]
        }
    
break;
case 158:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : hermano[hermano.length - 2],
            tipo : hermano[hermano.length - 4]
        }
    
break;
case 159:

        this.$ = new SentenciaReturn($$[$0].valor, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 160:

        hermano = eval('$$');
        this.$ = {
            valor : hermano[hermano.length - 2]
        };
    
break;
case 161:

        this.$ = {
            valor : null
        }
    
break;
case 162:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 163:

        this.$ = new SentenciaFor($$[$0].id, $$[$0].valor_inicio, $$[$0].condicion, $$[$0].incremento, $$[$0].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 164: case 165:

        this.$ = {
            id : $$[$0-8],
            valor_inicio : $$[$0-6],
            condicion : $$[$0-4],
            incremento : $$[$0-2],
            instrucciones : $$[$0]
        }
    
break;
case 166:

        this.$ = new SentenciaDowhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column)
    
break;
case 167:

        this.$ = new SentenciaWhile($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 168:

        this.$ = new SentenciaSwitch($$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 171:

        hermano = eval('$$');
        if(hermano[hermano.length - 1].casos == null)
        {
            this.$ = [new Caso($$[$0-2], hermano[hermano.length - 1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)];
        }
        else
        {
            hermano[hermano.length - 1].casos.unshift(new Caso($$[$0-2], hermano[hermano.length - 1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column))
            this.$ = hermano[hermano.length - 1].casos;
        }
    
break;
case 172:

        hermano = eval('$$');
        if(hermano[hermano.length - 1].casos == null)
        {
            this.$ = [new CasoDef(hermano[hermano.length - 1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)];
        }
        else
        {
            hermano[hermano.length - 1].casos.unshift(new CasoDef(hermano[hermano.length - 1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column));
            this.$ = hermano[hermano.length - 1].casos;
        }
    
break;
case 173:

        hermano = eval('$$')
        this.$ = {
            instrucciones: hermano[hermano.length - 2],
            casos : hermano[hermano.length - 1]
        }
    
break;
case 174:

        hermano = eval('$$');
        this.$ = {
            instrucciones : null,
            casos : hermano[hermano.length - 1]
        }
    
break;
case 175:

        this.$ = {
            instrucciones : null,
            casos : null
        }
    
break;
case 177:

        this.$ = null
    
break;
case 178:

        this.$ = new SentenciaIf($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 185:

        hermano = eval('$$');
        this.$ = new Asignacion(hermano[hermano.length - 3].nombre, hermano[hermano.length - 3].atributos, hermano[hermano.length - 1], hermano[hermano.length - 3].linea, hermano[hermano.length - 3].columna);
    
break;
case 186:

        hermano = eval('$$');
        this.$ = new AsignacionVarType(hermano[hermano.length - 5].nombre, hermano[hermano.length - 5].atributos, hermano[hermano.length - 2], hermano[hermano.length - 5].linea, hermano[hermano.length - 5].columna);
    
break;
case 190: case 192: case 193: case 200: case 201: case 204: case 205: case 208: case 209: case 214: case 215: case 218: case 219: case 223: case 224: case 226: case 229: case 230: case 233: case 234: case 237:

        hermano = eval('$$');
        this.$ = hermano[hermano.length-1];
    
break;
case 194:

        hermano = eval('$$');
        this.$ = new Incremento(hermano[hermano.length - 4], OpcionesAritmeticas.MAS, hermano[hermano.length - 1], hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna);
    
break;
case 195:

        hermano = eval('$$');
        this.$ = new Incremento(hermano[hermano.length - 4], OpcionesAritmeticas.MENOS, hermano[hermano.length - 1], hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna);
    
break;
case 196:

        hermano = eval('$$');
        this.$ = new Incremento(hermano[hermano.length - 4], OpcionesAritmeticas.POR, hermano[hermano.length - 1], hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna);
    
break;
case 197:

        hermano = eval('$$')
        this.$ = new Incremento(hermano[hermano.length - 4], Opcionesaritmeticas.DIV, hermano[hermano.length - 1], hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna);
    
break;
case 198:

        hermano = eval('$$');
        this.$ = new Incremento(hermano[hermano.length - 4], OpcionesAritmeticas.MODULO, hermano[hermano.length - 1], hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna);
    
break;
case 199:

        hermano = eval('$$');
        this.$ = new Incremento(hermano[hermano.length - 4], OpcionesAritmeticas.POTENCIA, hermano[hermano.length-1], hermano[hermano.length - 4].linea, hermano[hermano.left - 4].columna);
    
break;
case 202:

        hermano = eval('$$');
        this.$ = new Relacional(hermano[hermano.length - 4], hermano[hermano.length - 1], OperacionesLogicas.OR, hermano[hermano.length - 4].linea, hermano[hermano.left-4].columna);
    
break;
case 203:

        hermano = eval('$$');
        this.$ = new Relacional(hermano[hermano.length - 4], hermano[hermano.length - 1], OperacionesLogicas.AND, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna);
    
break;
case 206:

        hermano = eval('$$');
        this.$ = new Relacional(hermano[hermano.length - 4], hermano[hermano.length - 1], OperacionesLogicas.IGUAL, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna);
    
break;
case 207:

        hermano = eval('$$');
        this.$ = new Relacional(hermano[hermano.length - 4], hermano[hermano.length - 1], OperacionesLogicas.NOIGUAL, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna);
    
break;
case 210:

        hermano = eval('$$');
        this.$ = new Relacional(hermano[hermano.length - 4], hermano[hermano.length - 1], OperacionesLogicas.MAYORIGUAL, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna)
    
break;
case 211:

        hermano = eval('$$');
        this.$ = new Relacional(hermano[hermano.length - 4], hermano[hermano.length - 1], OperacionesLogicas.MENORIGUAL, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna)
    
break;
case 212:

        hermano = eval('$$');
        this.$ = new Relacional(hermano[hermano.length - 4], hermano[hermano.length - 1], OperacionesLogicas.MENOR, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna)
    
break;
case 213:

        hermano = eval('$$');
        this.$ = new Relacional(hermano[hermano.length - 4], hermano[hermano.length - 1], OperacionesLogicas.MAYOR, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna)
    
break;
case 216:

        hermano = eval('$$');
        this.$ = new Aritmeticas(hermano[hermano.length - 4], hermano[hermano.length - 1], OpcionesAritmeticas.MENOS, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna);
    
break;
case 217:

        hermano = eval('$$');
        this.$ = new Aritmeticas(hermano[hermano.length - 4], hermano[hermano.length - 1], OpcionesAritmeticas.MAS, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna);
    
break;
case 220:

        hermano = eval('$$');
        this.$ = new Aritmeticas(hermano[hermano.length - 4], hermano[hermano.length - 1], OpcionesAritmeticas.MODULO, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna);
    
break;
case 221:

        hermano = eval('$$');
        this.$ = new Aritmeticas(hermano[hermano.length - 4], hermano[hermano.length - 1], OpcionesAritmeticas.DIV, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna);
    
break;
case 222:

        hermano = eval('$$');
        this.$ = new Aritmeticas(hermano[hermano.length - 4], hermano[hermano.length - 1], OpcionesAritmeticas.POR, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna);
    
break;
case 225:

        hermano = eval('$$');
        this.$ = new Aritmeticas(hermano[hermano.length - 4], hermano[hermano.length - 1], OpcionesAritmeticas.POTENCIA, hermano[hermano.length - 4].linea, hermano[hermano.length - 4].columna);
    
break;
case 227:

        this.$ = new Relacional($$[$0], null, OperacionesLogicas.NEGADO, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 228:

        this.$ = new Aritmeticas($$[$0], null, OpcionesAritmeticas.NEGATIVO, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 231:

        hermano = eval('$$');
        if(hermano[hermano.length-2].tipo == 7){
            this.$ = new Incremento(hermano[hermano.length-2].nombre, OpcionesAritmeticas.MAS, new Literal(1, _$[$0].first_line, _$[$0].first_column, 0), hermano[hermano.length-2].linea, hermano[hermano.length-2].columna);
        }else{
            //TODO error
        }
    
break;
case 232:

        hermano = eval('$$');
        if(hermano[hermano.length-2].tipo == 7){
            this.$ = new Incremento(hermano[hermano.length-2].nombre, OpcionesAritmeticas.MENOS, new Literal(1, _$[$0].first_line, _$[$0].first_column, 0), hermano[hermano.length-2].linea, hermano[hermano.length-2].columna);
        }else{
            //TODO error
        }
    
break;
case 235:

        hermano = eval('$$');
        if(hermano[hermano.length-2].tipo == 7){
            this.$ = new Variable(hermano[hermano.length-2].nombre, hermano[hermano.length-1], 7, hermano[hermano.length-2].linea, hermano[hermano.length-2].columna);
        }else{
            //TODO error
        }
    
break;
case 236:

        hermano = eval('$$');
        if(hermano[hermano.length - 3].tipo == 7){
            this.$ = new Llamada(hermano[hermano.length-3].nombre, hermano[hermano.length-1], hermano[hermano.length-3].linea, hermano[hermano.length-3].columna);
        }else{
            //TODO ERROR
        }
    
break;
case 238:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 239:

        if($$[$0].includes('\"'))
        {
            this.$ = new Literal($$[$0].replace(/['"]+/g, ''), _$[$0].first_line, _$[$0].first_column, 1);
        }
        else if($$[$0].includes("'"))
        {
            this.$ = new Literal($$[$0].replace(/["'"]+/g, ''), _$[$0].first_line, _$[$0].first_column);
        }
        else
        {
            this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column);
        }
    
break;
case 240:

        this.$ = new Variable($$[$0], null, 7, _$[$0].first_line, _$[$0].first_column);
    
break;
case 241: case 242:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 243:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 3);
    
break;
case 249:

        hermano = eval('$$');
        this.$ = new Imprimir(hermano[hermano.length-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 250:

        this.$ = new GraficarTs(_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 251:

        hermano = eval('$$');
        this.$ = [];
    
break;
case 255:

        hermano = eval('$$');
        hermano[hermano.length-1].unshift(hermano[hermano.length - 2]);
        this.$ = hermano[hermano.length-1];
    
break;
case 256: case 260:

        hermano = eval('$$');
        this.$ = [hermano[hermano.length-1]];
    
break;
case 259:

        hermano = eval('$$');
        hermano[hermano.length-1].unshift(hermano[hermano.length - 3]);
        this.$ = hermano[hermano.length-1];
    
break;
case 264:

        this.$ = new ValoresTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 265:

        hermano = eval('$$');
        hermano[hermano.length - 1].unshift(hermano[hermano.length -3]);
        this.$ = hermano[hermano.length - 1];
    
break;
case 266:

        hermano = eval('$$');
        hermano[hermano.length - 1].unshift(hermano[hermano.length - 3]);
        this.$ = hermano[hermano.length - 1];
    
break;
case 269:

        this.$ = {
            instrucciones : new VariablesTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "Parametro", null) 
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0]], null, null));
    
break;
case 270:

        this.$ = {
            instrucciones : new VariablesTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
    
break;
case 271:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length - 3].instrucciones);
        this.$ = {
            instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : hermano[hermano.length - 3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 272:

        hermano = eval('$$');
        this.$ = {
            instrucciones : [hermano[hermano.length - 1].instrucciones],
            nodo : hermano[hermano.length - 1].nodo
        }
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:25,15:26,16:27,17:28,18:29,19:$V0,20:$V1,21:24,24:$V2,25:$V3,26:$V4,27:$V5,29:23,40:$V6,41:$V7,42:$V8,49:$V9,54:$Va,59:$Vb,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk,90:$Vl},{1:[3]},{5:[1,40],6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:25,15:26,16:27,17:28,18:29,19:$V0,20:$V1,21:24,24:$V2,25:$V3,26:$V4,27:$V5,29:23,40:$V6,41:$V7,42:$V8,49:$V9,54:$Va,59:$Vb,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk,90:$Vl},o($Vm,[2,3]),{8:[1,42]},{8:[1,43]},{8:[1,44],22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},o($Vm,[2,7]),o($Vm,[2,8]),o($Vm,[2,9]),{27:[1,60]},{27:[1,61]},{27:[1,62]},{10:63,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:65,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:66,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},o($VD,[2,99]),o($VD,[2,100]),o($VD,[2,101]),o($VD,[2,102]),o($VE,$VF,{52:67,25:$VG,28:[1,68],32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,81:$VP}),o($VD,[2,105]),o($VD,[2,106]),o($VD,[2,107]),o($VD,[2,108]),o($VQ,[2,10]),o($VQ,[2,11]),o($VQ,[2,12]),o($VQ,[2,13]),o($VQ,[2,14]),{8:[1,79]},{8:[1,80],10:81,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{27:[1,82]},{81:[1,83]},{25:[1,84]},{25:[1,85]},{25:[1,86]},{25:[1,87]},{31:88,43:$VR},{25:[1,90]},{1:[2,1]},o($Vm,[2,2]),o($Vm,[2,4]),o($Vm,[2,5]),o($Vm,[2,6]),{10:91,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:92,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:93,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:94,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:95,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:96,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:97,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:98,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:99,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:100,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:101,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:102,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:103,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:104,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:105,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{8:[2,70],23:[1,106],28:[1,107]},{23:[1,108],28:[1,109]},{28:[1,110]},o($VD,[2,82]),o($VD,$VF,{52:111,25:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,81:$VP}),o($VD,[2,91]),{22:$Vn,30:[1,112],61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},o($VE,$VS,{28:[1,113],81:$VT}),{10:116,21:24,25:$V3,27:$VC,29:23,43:[1,115],60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:119,21:24,25:$V3,27:$VC,29:23,30:[1,117],60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,82:118,83:$Vj,85:$Vk},o($VD,[2,21]),o($VD,[2,22]),{10:120,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:121,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:122,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:123,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:124,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:125,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{27:[1,126]},o($VQ,[2,15]),o($VQ,[2,16]),{8:[1,127],22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:[1,128]},{84:[1,129]},{30:[1,130]},{10:131,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:132,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:133,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{41:[1,134]},{7:137,10:138,11:139,12:140,14:25,15:26,16:27,17:28,18:29,19:$V0,20:$V1,21:24,24:$V2,25:$V3,26:$V4,27:$V5,29:23,40:$V6,41:$V7,42:$V8,45:[1,136],47:135,49:$V9,59:$Vb,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{26:[1,141],27:[1,142]},o([8,22,23,27,30,45,57,61,62],[2,83],{63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o([8,22,23,27,30,45,57,62],[2,84],{61:$Vo,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o($VU,[2,85],{65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o($VU,[2,86],{65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o($VV,[2,87],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o($VV,[2,88],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o($VV,[2,89],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o($VV,[2,90],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o([8,22,23,27,30,45,57,61,62,63,64,65,66,67,68,69,70],[2,92],{71:$Vy,72:$Vz,73:$VA,74:$VB}),o([8,22,23,27,30,45,57,61,62,63,64,65,66,67,68,69],[2,93],{70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o([8,22,23,27,30,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73],[2,94],{74:$VB}),o([8,22,23,27,30,45,57,61,62,63,64,65,66,67,68,69,70,72,73],[2,95],{71:$Vy,74:$VB}),o([8,22,23,27,30,45,57,61,62,63,64,65,66,67,68,69,70,73],[2,96],{71:$Vy,72:$Vz,74:$VB}),o($VD,[2,97]),{22:$Vn,23:[1,143],61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},{27:[1,145],58:144,86:$VW,87:$VX,88:$VY,89:$VZ},{10:150,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{27:[1,152],58:151,86:$VW,87:$VX,88:$VY,89:$VZ},{10:153,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{43:[1,154]},o($VD,$VS,{81:$VT}),o($VD,[2,98]),{10:155,21:24,25:$V3,27:$VC,29:23,43:[1,156],60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{27:[1,157]},{27:$V_,53:158},{8:[1,160],22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},o($VD,[2,111]),{30:[1,161],57:$V$},o($V01,[2,117],{22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o($V11,[2,23],{22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o($V11,[2,24],{22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o($V11,[2,25],{22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o($V11,[2,26],{22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o($V11,[2,27],{22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o($V11,[2,28],{22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o($V21,[2,110]),o($VQ,[2,17]),{27:$V31,30:[1,165],91:163,92:164,161:166},{25:[1,168]},o($VD,[2,115]),{22:$Vn,30:[1,169],61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},{22:$Vn,30:[1,170],61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},{22:$Vn,30:[1,171],61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:[1,172]},{7:174,10:177,11:175,12:176,14:25,15:26,16:27,17:28,18:29,19:$V0,20:$V1,21:24,24:$V2,25:$V3,26:$V4,27:$V5,29:23,40:$V6,41:$V7,42:$V8,45:[1,173],49:$V9,59:$Vb,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},o($V41,[2,45]),{8:[1,178]},{8:[1,179],22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},o($V51,[2,52]),o($V51,[2,53]),{27:[1,180]},{28:[1,181]},{10:182,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{8:[2,69],28:[1,183]},{8:[2,73],28:[1,184]},o($V61,[2,118]),o($V61,[2,119]),o($V61,[2,120]),o($V61,[2,121]),{8:[2,68],22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},{28:[1,185]},{28:[1,186]},{8:[2,75],22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},{27:[1,188],55:187},{8:[1,189],22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},{27:$V_,53:190},o($V21,[2,109]),{27:$V71,45:[1,191]},{23:[1,193]},o($VQ,[2,57]),o($VD,[2,112]),{10:194,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},o($Vm,[2,122]),{30:[1,195]},{23:[1,196]},{30:[2,272],57:[1,198],162:197},{23:[1,199]},{10:119,21:24,25:$V3,27:$VC,29:23,30:[1,200],60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,82:201,83:$Vj,85:$Vk},{31:202,43:$VR},{43:[1,203]},{31:204,43:$VR},{10:205,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},o($V41,[2,44]),{8:[1,206]},o($V51,[2,47]),o($V51,[2,48]),{8:[1,207],22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},o($V51,[2,50]),o($V51,[2,51]),{28:[1,208]},{10:209,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},o($V11,[2,18],{22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),{10:210,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:212,21:24,25:$V3,27:$VC,29:23,43:[1,211],60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{10:213,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{27:[1,215],43:[1,214]},{27:[1,217],45:[1,216]},{23:[1,218]},o($VQ,[2,54]),{27:$V71,45:[1,219]},{8:[1,220]},{23:[1,221]},{10:222,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},o($V01,[2,116],{22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),{23:[1,223]},{27:$V81,58:225,86:$VW,87:$VX,88:$VY,89:$VZ,93:224},{30:[2,268]},{27:$V31,92:227,161:166},{27:[1,229],58:228,86:$VW,87:$VX,88:$VY,89:$VZ},o($VD,[2,113]),{30:[1,230],57:$V$},o($VQ,[2,40],{50:231,51:[1,232]}),{44:233,45:[1,234],46:[1,235],48:[1,236]},o($VQ,[2,30]),{22:$Vn,30:[1,237],61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},o($V51,[2,46]),o($V51,[2,49]),{10:238,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{8:[1,239],22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},{8:[2,67],22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},{27:$V_,53:240},{8:[2,72],22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},{8:[2,74],22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},{27:$V_,53:241},{8:[2,77]},{8:[2,58]},{23:[1,242]},{27:$V91,56:243,58:244,86:$VW,87:$VX,88:$VY,89:$VZ},{8:[1,246]},o($VQ,[2,56]),{10:247,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},o($Va1,[2,81],{22:$Vn,57:[1,248],61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),{27:$V81,58:225,86:$VW,87:$VX,88:$VY,89:$VZ,93:249},{43:$Vb1,94:250},{43:[2,125]},{43:[2,126]},{30:[2,271]},o($V01,[2,269]),o($V01,[2,270]),o($VD,[2,114]),o($VQ,[2,41]),{14:252,31:253,43:$VR,49:$V9},{45:[1,254],46:[1,255],48:[1,256]},o($VQ,[2,32]),{10:257,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{23:[1,258]},{8:[1,259]},{8:[1,260],22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},{10:261,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{27:$V71,45:[1,262]},{27:$V71,45:[1,263]},{27:$V91,56:264,58:244,86:$VW,87:$VX,88:$VY,89:$VZ},o($Va1,[2,64],{8:[1,266],57:[1,265]}),o($Vc1,[2,65]),o($Vc1,[2,66]),o($VQ,[2,55]),o($Va1,[2,79],{22:$Vn,57:[1,267],61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB}),o($Va1,[2,80]),{43:$Vb1,94:268},o($Vm,[2,124]),{19:$Vd1,20:$Ve1,24:$Vf1,25:$Vg1,26:$Vh1,27:$Vi1,40:$Vj1,41:$Vk1,42:$Vl1,45:[1,271],49:$Vm1,59:$Vn1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,83:$Vv1,85:$Vw1,95:269,96:270,97:272,99:273,101:274,104:277,105:278,106:279,107:280,108:281,109:282,110:283,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},o($VQ,[2,42]),o($VQ,[2,43]),o($VQ,[2,31]),{10:313,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{23:[1,314]},{22:$Vn,23:[1,315],61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},o($Vx1,[2,39]),o($VQ,[2,29]),{10:316,21:24,25:$V3,27:$VC,29:23,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:21,80:$Vi,83:$Vj,85:$Vk},{8:[1,317],22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},{8:[2,71]},{8:[2,76]},o($Va1,[2,61],{8:[1,319],57:[1,318]}),o($Va1,[2,62]),o($Va1,[2,63]),o($Va1,[2,78]),o($Vm,[2,123]),o($V41,[2,127]),{45:[1,320]},o($V41,[2,129]),o($Vx1,[2,132],{97:272,99:273,101:274,104:277,105:278,106:279,107:280,108:281,109:282,110:283,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305,98:321,96:322,19:$Vd1,20:$Ve1,24:$Vf1,25:$Vg1,26:$Vh1,27:$Vi1,40:$Vj1,41:$Vk1,42:$Vl1,49:$Vm1,59:$Vn1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,83:$Vv1,85:$Vw1}),{8:[2,184],28:[1,324],100:323},{8:[1,325]},{27:[1,326]},{27:[1,327]},o($V51,[2,137]),o($V51,[2,138]),o($V51,[2,139]),o($V51,[2,140]),o($V51,[2,141]),o($V51,[2,142]),o($V51,[2,143]),o($Vy1,[2,192],{130:328,22:[1,329]}),{81:[1,330]},{25:[1,331]},{25:[1,332]},{25:[1,333]},{25:[1,334]},{43:$Vb1,94:335},{25:[1,336]},{8:[1,337]},{8:[1,340],25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:339,117:338,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},o($Vz1,$VA1,{132:341,34:$VB1,35:$VC1,36:$VD1,37:$VE1,38:$VF1,39:$VG1}),o($VH1,$VI1,{134:348,61:$VJ1,62:$VK1}),o($VL1,$VM1,{136:351,63:$VN1,64:$VO1}),o($VP1,$VQ1,{138:354,65:$VR1,66:$VS1,67:$VT1,68:$VU1}),o($VV1,$VW1,{140:359,69:$VX1,70:$VY1}),o($VZ1,$V_1,{142:362,71:$V$1,72:$V02,73:$V12}),o($V22,$V32,{144:366,74:$V42}),{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,143:368,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,143:369,145:303,146:304,148:305},o($V52,[2,229]),o($V52,[2,233],{147:370,32:[1,371],33:[1,372]}),o($V62,[2,237],{149:373,128:374,154:376,25:[1,375],81:$V72}),o($V82,[2,238]),o($V82,[2,239]),o($V82,[2,240]),o($V82,[2,241]),o($V82,[2,242]),o($V82,[2,243]),{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:378,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{22:$Vn,23:[1,379],61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},o($Vx1,[2,36],{79:21,29:23,21:24,14:25,15:26,16:27,17:28,18:29,7:137,10:138,11:139,12:140,47:380,19:$V0,20:$V1,24:$V2,25:$V3,26:$V4,27:$V5,40:$V6,41:$V7,42:$V8,49:$V9,59:$Vb,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,80:$Vi,83:$Vj,85:$Vk}),o($Vx1,[2,38],{79:21,29:23,21:24,14:25,15:26,16:27,17:28,18:29,7:137,10:138,11:139,12:140,47:381,19:$V0,20:$V1,24:$V2,25:$V3,26:$V4,27:$V5,40:$V6,41:$V7,42:$V8,49:$V9,59:$Vb,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,80:$Vi,83:$Vj,85:$Vk}),{8:[1,382],22:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB},{27:$V92,29:383},o($Va1,[2,59]),o($Va1,[2,60]),o($V41,[2,128]),o($Vx1,[2,130]),o($Vx1,[2,131]),{8:[1,385]},{25:$Vg1,27:$Vi1,43:[1,388],60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:387,125:386,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},o($V51,[2,134]),{8:[1,391],23:[1,390],28:[1,392],102:389},{23:[1,394],28:[1,395],103:393},o($Vy1,[2,190]),{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,129:396,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{84:[1,397]},{30:[1,398]},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:399,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:400,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:401,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{41:[1,402]},{25:$Vg1,26:[1,404],27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:405,118:403,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},o($V51,[2,162]),o($V51,[2,159]),{8:[1,406]},o($V51,[2,161]),o($Vz1,[2,193]),{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,131:407,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,131:408,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,131:409,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,131:410,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,131:411,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,131:412,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},o($VH1,[2,201]),{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,133:413,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,133:414,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},o($VL1,[2,205]),{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,135:415,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,135:416,137:297,139:298,141:299,143:300,145:303,146:304,148:305},o($VP1,[2,209]),{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,137:417,139:298,141:299,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,137:418,139:298,141:299,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,137:419,139:298,141:299,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,137:420,139:298,141:299,143:300,145:303,146:304,148:305},o($VV1,[2,215]),{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,139:421,141:299,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,139:422,141:299,143:300,145:303,146:304,148:305},o($VZ1,[2,219]),{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,141:423,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,141:424,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,141:425,143:300,145:303,146:304,148:305},o($V22,[2,224]),{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,143:426,145:303,146:304,148:305},o($V52,[2,227]),o($V52,[2,228]),o($V52,[2,230]),o($V52,[2,231]),o($V52,[2,232]),o($V62,[2,234]),o($V62,[2,235]),{25:$Vg1,27:$Vi1,30:$Va2,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:431,127:427,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305,153:429,156:430},o($V62,[2,256],{154:376,155:432,128:433,81:$V72}),{27:[1,434]},{30:[1,435]},o($Vx1,[2,34],{79:21,29:23,21:24,14:25,15:26,16:27,17:28,18:29,7:137,10:138,11:139,12:140,47:436,19:$V0,20:$V1,24:$V2,25:$V3,26:$V4,27:$V5,40:$V6,41:$V7,42:$V8,49:$V9,59:$Vb,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,80:$Vi,83:$Vj,85:$Vk}),o($Vx1,[2,35],{79:21,29:23,21:24,14:25,15:26,16:27,17:28,18:29,7:174,11:175,12:176,10:177,19:$V0,20:$V1,24:$V2,25:$V3,26:$V4,27:$V5,40:$V6,41:$V7,42:$V8,49:$V9,59:$Vb,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,80:$Vi,83:$Vj,85:$Vk}),o($Vx1,[2,37],{79:21,29:23,21:24,14:25,15:26,16:27,17:28,18:29,7:174,11:175,12:176,10:177,19:$V0,20:$V1,24:$V2,25:$V3,26:$V4,27:$V5,40:$V6,41:$V7,42:$V8,49:$V9,59:$Vb,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,80:$Vi,83:$Vj,85:$Vk}),{27:$V92,29:437},{30:[1,438]},{32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO},o($V51,[2,133]),{8:[2,183]},{8:[2,185]},{27:$Vb2,116:439,159:440},o($V51,[2,135]),{27:[1,444],58:443,86:$VW,87:$VX,88:$VY,89:$VZ,113:442},o($V51,[2,149]),{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:445,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},o($V51,[2,136]),{27:[1,448],58:447,86:$VW,87:$VX,88:$VY,89:$VZ,111:446},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:449,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{23:[1,450]},{25:[1,451]},{8:[2,250]},{30:[1,452]},{30:[1,453]},{30:[1,454]},{25:[1,455]},o($V51,[2,163]),{27:[1,456]},{28:[1,457]},o($V51,[2,160]),o($Vz1,$VA1,{132:458,34:$VB1,35:$VC1,36:$VD1,37:$VE1,38:$VF1,39:$VG1}),o($Vz1,$VA1,{132:459,34:$VB1,35:$VC1,36:$VD1,37:$VE1,38:$VF1,39:$VG1}),o($Vz1,$VA1,{132:460,34:$VB1,35:$VC1,36:$VD1,37:$VE1,38:$VF1,39:$VG1}),o($Vz1,$VA1,{132:461,34:$VB1,35:$VC1,36:$VD1,37:$VE1,38:$VF1,39:$VG1}),o($Vz1,$VA1,{132:462,34:$VB1,35:$VC1,36:$VD1,37:$VE1,38:$VF1,39:$VG1}),o($Vz1,$VA1,{132:463,34:$VB1,35:$VC1,36:$VD1,37:$VE1,38:$VF1,39:$VG1}),o($VH1,$VI1,{134:464,61:$VJ1,62:$VK1}),o($VH1,$VI1,{134:465,61:$VJ1,62:$VK1}),o($VL1,$VM1,{136:466,63:$VN1,64:$VO1}),o($VL1,$VM1,{136:467,63:$VN1,64:$VO1}),o($VP1,$VQ1,{138:468,65:$VR1,66:$VS1,67:$VT1,68:$VU1}),o($VP1,$VQ1,{138:469,65:$VR1,66:$VS1,67:$VT1,68:$VU1}),o($VP1,$VQ1,{138:470,65:$VR1,66:$VS1,67:$VT1,68:$VU1}),o($VP1,$VQ1,{138:471,65:$VR1,66:$VS1,67:$VT1,68:$VU1}),o($VV1,$VW1,{140:472,69:$VX1,70:$VY1}),o($VV1,$VW1,{140:473,69:$VX1,70:$VY1}),o($VZ1,$V_1,{142:474,71:$V$1,72:$V02,73:$V12}),o($VZ1,$V_1,{142:475,71:$V$1,72:$V02,73:$V12}),o($VZ1,$V_1,{142:476,71:$V$1,72:$V02,73:$V12}),o($V22,$V32,{144:477,74:$V42}),o($V62,[2,236]),o($V62,[2,251]),{30:[1,478]},{30:[2,260],57:[1,480],157:479},o($V01,[2,258]),o($V62,[2,253]),o($V62,[2,255]),o([8,22,23,27,28,30,32,33,34,35,36,37,38,39,45,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81],[2,254]),o($V82,[2,244]),o($Vx1,[2,33],{79:21,29:23,21:24,14:25,15:26,16:27,17:28,18:29,7:174,11:175,12:176,10:177,19:$V0,20:$V1,24:$V2,25:$V3,26:$V4,27:$V5,40:$V6,41:$V7,42:$V8,49:$V9,59:$Vb,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,80:$Vi,83:$Vj,85:$Vk}),{30:[1,481]},{31:482,43:$VR},{45:[1,483]},{27:$Vb2,45:[2,267],57:[1,485],116:486,159:440,160:484},{23:[1,487]},o($V51,[2,148]),{8:[1,489],28:[1,490],114:488},{8:[1,492],28:[1,493],115:491},{8:[1,494]},o($V51,[2,144]),{28:[1,495]},{28:[1,496]},{8:[1,497]},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,129:498,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,30:$Va2,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:431,127:499,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305,153:429,156:430},{43:$Vb1,94:500},{43:[1,501]},{43:$Vb1,94:502},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:503,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{28:[1,504]},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:505,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},o($Vz1,[2,194]),o($Vz1,[2,195]),o($Vz1,[2,196]),o($Vz1,[2,197]),o($Vz1,[2,198]),o($Vz1,[2,199]),o($VH1,[2,202]),o($VH1,[2,203]),o($VL1,[2,206]),o($VL1,[2,207]),o($VP1,[2,210]),o($VP1,[2,211]),o($VP1,[2,212]),o($VP1,[2,213]),o($VV1,[2,216]),o($VV1,[2,217]),o($VZ1,[2,220]),o($VZ1,[2,221]),o($VZ1,[2,222]),o($V22,[2,225]),o($V62,[2,252]),{30:[2,257]},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:431,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305,153:506,156:430},{31:507,43:$VR},o($VQ,[2,20]),{8:[2,186]},{45:[2,263]},{27:$Vb2,116:508,159:440},{45:[2,266]},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:509,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},o($V51,[2,151]),o($V51,[2,153]),{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:510,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},o($V51,[2,152]),o($V51,[2,155]),{25:$Vg1,27:$Vi1,43:$Vc2,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:513,112:511,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},o($V51,[2,150]),{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:514,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{25:$Vg1,27:$Vi1,43:$Vc2,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:513,112:515,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},o($V51,[2,145]),o($Vy1,[2,191]),{8:[2,249]},o($V51,[2,180],{123:516,51:[1,517]}),{45:[1,520],46:$Vd2,48:$Ve2,119:518,120:519},o($V51,[2,167]),{30:[1,523]},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:524,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{8:[1,525]},{30:[2,259]},o($VQ,[2,19]),{45:[2,265]},o([27,45,57],[2,264]),{8:[1,526]},o($V51,[2,156]),{27:$Vb2,116:527,159:440},{8:[1,528]},{8:[1,529]},o($V51,[2,147]),o($V51,[2,178]),{43:$Vb1,49:$Vm1,94:532,104:531,124:530},o($V51,[2,168]),{45:[1,533]},o($V51,[2,170]),{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:534,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{23:[1,535]},{8:[1,536]},{8:[1,537]},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:538,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},o($V51,[2,154]),{45:[1,539]},o($V51,[2,158]),o($V51,[2,146]),o($V51,[2,179]),o($V51,[2,181]),o($V51,[2,182]),o($V51,[2,169]),{23:[1,540]},{19:$Vd1,20:$Ve1,24:$Vf1,25:$Vg1,26:$Vh1,27:$Vi1,40:$Vj1,41:$Vk1,42:$Vl1,45:$Vf2,46:$Vd2,48:$Ve2,49:$Vm1,59:$Vn1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,83:$Vv1,85:$Vw1,96:542,97:272,99:273,101:274,104:277,105:278,106:279,107:280,108:281,109:282,110:283,120:543,121:541,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},o($V51,[2,166]),{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:544,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{8:[1,545]},{8:[1,546]},{19:$Vd1,20:$Ve1,24:$Vf1,25:$Vg1,26:$Vh1,27:$Vi1,40:$Vj1,41:$Vk1,42:$Vl1,45:$Vf2,46:$Vd2,48:$Ve2,49:$Vm1,59:$Vn1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,83:$Vv1,85:$Vw1,96:542,97:272,99:273,101:274,104:277,105:278,106:279,107:280,108:281,109:282,110:283,120:543,121:547,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{45:[2,172]},{45:[2,177],46:$Vd2,48:$Ve2,120:549,122:548},{45:[2,174]},{8:[1,550]},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:551,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},o($V51,[2,157]),{45:[2,171]},{45:[2,173]},{45:[2,176]},{25:$Vg1,27:$Vi1,60:$Vo1,69:$Vp1,75:$Vq1,76:$Vr1,77:$Vs1,78:$Vt1,80:$Vu1,99:552,129:284,131:294,133:295,135:296,137:297,139:298,141:299,143:300,145:303,146:304,148:305},{30:[1,553]},{30:[1,554]},{43:$Vb1,94:555},{43:$Vb1,94:556},o($V51,[2,165]),o($V51,[2,164])],
defaultActions: {40:[2,1],197:[2,268],215:[2,77],216:[2,58],225:[2,125],226:[2,126],227:[2,271],262:[2,71],263:[2,76],386:[2,183],387:[2,185],398:[2,250],479:[2,257],483:[2,186],484:[2,263],486:[2,266],499:[2,249],506:[2,259],508:[2,265],541:[2,172],543:[2,174],547:[2,171],548:[2,173],549:[2,176]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
 let hermano = null; 
    let instruccion, nodo = null;
    const { Aritmeticas } = require('../Expresiones/Aritmeticas');
    const { OpcionesAritmeticas } = require('../Expresiones/Opcionesaritmeticas');
    const { Literal } = require('../Expresiones/Literal');
    const { TiposSimbolo, Simbolo } = require('../Entorno/Simbolo');
    const { Declaracion } = require('../Instrucciones/Declaracion');
    const { Type } = require('../Retorno'); 
    const { Variable } = require('../Expresiones/Variable');
    const { DeclaracionTipos } = require('../Instrucciones/DeclaracionTipos');
    const { VariablesTipo, ValoresTipo } = require('../Expresiones/VariablesTipo');
    const { Asignacion } = require('../Instrucciones/Asignacion');
    const { DeclaracionVarType } = require('../Instrucciones/DeclaracionVarType');
    const { AsignacionVarType } = require('../Instrucciones/AsignacionVarType');
    const { Llamada } = require('../Instrucciones/Llamada');
    const { Relacional, OperacionesLogicas } = require('../Expresiones/Relacional');
    const { Imprimir } = require('../Instrucciones/Imprimir');
    const { SentenciaIf } = require('../Instrucciones/SentenciaIf');
    const { Cuerposentencia } = require('../Instrucciones/Cuerposentencia');
    const { Caso } = require('../Instrucciones/Caso');
    const { CasoDef } = require('../Instrucciones/CasoDef');
    const { SentenciaSwitch } = require('../Instrucciones/SentenciaSwitch');
    const { SentenciaWhile } = require('../Instrucciones/SentenciaWhile');
    const { SentenciaDowhile } = require('../Instrucciones/SentenciaDowhile');
    const { Incremento } = require('../Instrucciones/Incremento');
    const { SentenciaFor } = require('../Instrucciones/SentenciaFor');
    const { Funcion } = require('../Instrucciones/Funcion');
    const { SentenciaTernaria } = require('../Instrucciones/SentenciaTernaria');
    const { SentenciaReturn } = require('../Instrucciones/SentenciaReturn');
    const { Break } = require('../Instrucciones/Break');
    const { GraficarTs } = require('../Instrucciones/GraficarTs');
    const { Nodo } = require('../Arbol/Nodo');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 75
break;
case 5:return 76
break;
case 6:return 26
break;
case 7:return 59
break;
case 8:return 86
break;
case 9:return 87
break;
case 10:return 88
break;
case 11:return 89
break;
case 12:return 54
break;
case 13:return 80
break;
case 14:return 77
break;
case 15:return 78
break;
case 16:return 49
break;
case 17:return 51
break;
case 18:return 42
break;
case 19:return 46
break;
case 20:return 41
break;
case 21:return 40
break;
case 22:return 24
break;
case 23:return 'IN'
break;
case 24:return 'OF'
break;
case 25:return 19
break;
case 26:return 'CONTINUE'
break;
case 27:return 20
break;
case 28:return 90
break;
case 29:return 83
break;
case 30:return 84
break;
case 31:return 85
break;
case 32:return 48
break;
case 33:return 32
break;
case 34:return 33
break;
case 35:return 34
break;
case 36:return 35
break;
case 37:return 36
break;
case 38:return 37
break;
case 39:return 38
break;
case 40:return 39
break;
case 41:return 23
break;
case 42:return 8
break;
case 43:return 61
break;
case 44:return 62
break;
case 45:return 63
break;
case 46:return 64
break;
case 47:return 60
break;
case 48:return 73
break;
case 49:return 74
break;
case 50:return 67
break;
case 51:return 68
break;
case 52:return 65
break;
case 53:return 66
break;
case 54:return 28
break;
case 55:return 70
break;
case 56:return 69
break;
case 57:return 71
break;
case 58:return 72
break;
case 59:return 81
break;
case 60:return 25
break;
case 61:return 30
break;
case 62:return 57
break;
case 63:return 43
break;
case 64:return 45
break;
case 65:return 22
break;
case 66:return '['
break;
case 67:return ']'
break;
case 68:return 27;
break;
case 69:return 5;
break;
case 70: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:(("[^\"]*")|(`[^"`"]*`)|('[^"'"]*')))/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:default\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\*\*=)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:%)/,/^(?:\*\*)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:["_" | a-z | A-Z]["_" | a-z | A-Z|0-9]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
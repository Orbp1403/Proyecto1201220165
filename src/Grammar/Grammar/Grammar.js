/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,29],$V1=[1,30],$V2=[1,36],$V3=[1,14],$V4=[1,9],$V5=[1,19],$V6=[1,35],$V7=[1,34],$V8=[1,33],$V9=[1,32],$Va=[1,11],$Vb=[1,10],$Vc=[1,12],$Vd=[1,13],$Ve=[1,15],$Vf=[1,16],$Vg=[1,17],$Vh=[1,18],$Vi=[1,21],$Vj=[1,31],$Vk=[5,18,19,23,24,25,26,39,40,41,48,54,59,60,69,75,76,77,78,79,82],$Vl=[1,56],$Vm=[1,42],$Vn=[1,43],$Vo=[1,44],$Vp=[1,45],$Vq=[1,46],$Vr=[1,47],$Vs=[1,48],$Vt=[1,49],$Vu=[1,51],$Vv=[1,50],$Vw=[1,52],$Vx=[1,53],$Vy=[1,54],$Vz=[1,55],$VA=[1,61],$VB=[8,21,22,26,29,44,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$VC=[8,21,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$VD=[2,101],$VE=[1,66],$VF=[1,65],$VG=[1,67],$VH=[1,68],$VI=[1,69],$VJ=[1,70],$VK=[1,71],$VL=[1,72],$VM=[1,73],$VN=[1,74],$VO=[1,75],$VP=[5,18,19,23,24,25,26,39,40,41,44,45,47,48,54,59,60,69,75,76,77,78,79,82],$VQ=[1,84],$VR=[8,21,22,26,29,44,57,61,62,63,64,65,66,67,68,69,70,71,72,73],$VS=[2,102],$VT=[1,108],$VU=[1,109],$VV=[1,134],$VW=[8,21,22,26,29,44,57,61,62,63,64],$VX=[8,21,22,26,29,44,57,61,62,63,64,65,66,67,68],$VY=[1,140],$VZ=[1,141],$V_=[1,142],$V$=[1,143],$V01=[1,152],$V11=[1,155],$V21=[29,57],$V31=[8,22,26,29,44,57],$V41=[8,21,22,26,27,29,44,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74,80],$V51=[5,18,19,23,24,25,26,39,40,41,44,45,47,48,50,54,59,60,69,75,76,77,78,79,82],$V61=[18,19,23,25,26,39,40,41,44,45,47,48,59,82],$V71=[8,26,27,44,57],$V81=[1,180],$V91=[1,220],$Va1=[26,44],$Vb1=[44,45,47],$Vc1=[8,26,44,57],$Vd1=[1,249];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"PYC":8,"Declaracion_type":9,"Expresion":10,"Asignacion":11,"Sentencias_control":12,"Sentenciaif":13,"Sentenciaswitch":14,"Sentenciawhile":15,"Sentenciadowhile":16,"Sentenciafor":17,"BREAK":18,"RETURN":19,"SentenciaTernaria":20,"?":21,"DP":22,"FOR":23,"(":24,"LET":25,"IDENTIFICADOR":26,"=":27,"Aumento":28,")":29,"InstruccionesSentencias":30,"++":31,"--":32,"+=":33,"-=":34,"*=":35,"/=":36,"%=":37,"**=":38,"DO":39,"WHILE":40,"SWITCH":41,"{":42,"Casos":43,"}":44,"CASE":45,"InstruccionSentencia":46,"DEFAULT":47,"IF":48,"SentenciaElse":49,"ELSE":50,"Llamada":51,"Listaatributos":52,"Lvalorestype":53,"TYPE":54,"Latributostype":55,"TipoatributosType":56,",":57,"Tipo":58,"CONST":59,"NOT":60,"AND":61,"OR":62,"==":63,"!=":64,"<":65,">":66,"<=":67,">=":68,"-":69,"+":70,"*":71,"/":72,"%":73,"**":74,"NUMERO":75,"CADENA":76,"TRUE":77,"FALSE":78,"NULL":79,".":80,"Listaparam":81,"CONSOLE":82,"LOG":83,"STRING":84,"NUMBER":85,"BOOLEAN":86,"VOID":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",18:"BREAK",19:"RETURN",21:"?",22:"DP",23:"FOR",24:"(",25:"LET",26:"IDENTIFICADOR",27:"=",29:")",31:"++",32:"--",33:"+=",34:"-=",35:"*=",36:"/=",37:"%=",38:"**=",39:"DO",40:"WHILE",41:"SWITCH",42:"{",44:"}",45:"CASE",47:"DEFAULT",48:"IF",50:"ELSE",54:"TYPE",57:",",59:"CONST",60:"NOT",61:"AND",62:"OR",63:"==",64:"!=",65:"<",66:">",67:"<=",68:">=",69:"-",70:"+",71:"*",72:"/",73:"%",74:"**",75:"NUMERO",76:"CADENA",77:"TRUE",78:"FALSE",79:"NULL",80:".",82:"CONSOLE",83:"LOG",84:"STRING",85:"NUMBER",86:"BOOLEAN",87:"VOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[12,3],[20,5],[17,12],[17,11],[28,2],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[16,6],[15,5],[14,7],[14,6],[43,5],[43,4],[43,4],[43,3],[43,4],[43,3],[43,1],[13,5],[13,6],[49,2],[49,2],[30,3],[30,2],[46,3],[46,3],[46,2],[46,2],[46,2],[46,2],[46,1],[46,1],[11,5],[11,6],[11,4],[9,6],[55,5],[55,5],[55,4],[55,4],[55,4],[55,3],[56,1],[56,1],[7,6],[7,4],[7,4],[7,2],[7,8],[7,6],[7,4],[7,6],[7,4],[7,8],[7,6],[53,5],[53,4],[53,4],[53,3],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,1],[10,1],[10,1],[10,1],[10,1],[10,2],[10,1],[10,1],[10,1],[10,1],[52,3],[52,2],[51,3],[51,4],[51,5],[51,6],[81,3],[81,1],[58,1],[58,1],[58,1],[58,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1]
    
break;
case 3: case 114:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6: case 96:

        this.$ = $$[$0-1];
    
break;
case 7: case 9: case 10: case 11: case 12: case 13: case 41: case 42: case 63: case 103:

        this.$ = $$[$0];
    
break;
case 8: case 64: case 105: case 106:

        this.$ = $$[$0]
    
break;
case 14:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 15:

        this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 16:

        this.$ = new Return(Expresion, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 17:

        this.$ = new SentenciaTernaria($$[$0-4], $$[$0-2], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 18:

        this.$ = new SentenciaFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-11].first_line, _$[$0-11].first_column);
    
break;
case 19:

        this.$ = new SentenciaFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-10].first_line, _$[$0-10].first_column);
    
break;
case 20:

        this.$ = new Incremento($$[$0-1], OpcionesAritmeticas.MAS, new Literal(1, _$[$0-1].first_line, _$[$0-1].first_column, 0), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 21:

        this.$ = new Incremento($$[$0-1], OpcionesAritmeticas.MENOS, new Literal(1, _$[$0-1].first_line, _$[$0-1].first_column, 0), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 22:

        this.$ = new Incremento($$[$0-2], OpcionesAritmeticas.MAS, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 23:

        this.$ = new Incremento($$[$0-2], OpcionesAritmeticas.MENOS, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 24:

        this.$ = new Incremento($$[$0-2], OpcionesAritmeticas.POR, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 25:

        this.$ = new Incremento($$[$0-2], OpcionesAritmeticas.DIV, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 26:

        this.$ = new Incremento($$[$0-2], OpcionesAritmeticas.MODULO, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 27:

        this.$ = new Incremento($$[$0-2], OpcionesAritmeticas.POTENCIA, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 28:

        this.$ = new SentenciaDowhile($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 29:

        this.$ = new SentenciaWhile($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 30:

        this.$ = new SentenciaSwitch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 31:

        this.$ = new SentenciaSwitch($$[$0-3], null, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 32:

        $$[$0-4].push(new Caso($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = $$[$0-4];
    
break;
case 33:

        $$[$0-3].push(new Caso($$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = $$[$0-3]
    
break;
case 34:

        $$[$0-3].push(new CasoDef($$[$0], _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = $$[$0-3];
    
break;
case 35:

        $$[$0-2].push(new CasoDef(null, _$[$0-2].first_line, _$[$0-2].first_column));
        this.$ = $$[$0-2];
    
break;
case 36:

        this.$ = [new Caso($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column)];
    
break;
case 37:

        this.$ = [new Caso($$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column)];
    
break;
case 38:

        this.$ = [new CasoDef(null, _$[$0].first_line, _$[$0].first_column)];
    
break;
case 39:

        this.$ = new SentenciaIf($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 40:

        this.$ = new SentenciaIf($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 43:

        this.$ = new Cuerposentencia($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 44:

        this.$ = new Cuerposentencia(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 45:

        $$[$0-2].push($$[$0-1]);
        this.$ = $$[$0-2];
    
break;
case 46:

        $$[$0-2].push($$[$0-1])
        this.$ = $$[$0-2];
    
break;
case 47:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 48:

        $$[$0-1].push($$[$0])
        this.$ = $$[$0-1]
    
break;
case 49: case 50:

        this.$ = [$$[$0-1]]
    
break;
case 51: case 52:

        this.$ = [$$[$0]]
    
break;
case 54:

        this.$ = new AsignacionVarType($$[$0-5], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 55:

        this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 56:

        this.$ = new DeclaracionTipos($$[$0-4], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
    
break;
case 57: case 58:

        $$[$0-4].push(new VariablesTipo($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column))
        this.$ = $$[$0-4];
    
break;
case 59:

        $$[$0-3].push(new VariablesTipo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = $$[$0-3];
    
break;
case 60: case 61:

        this.$ = [new VariablesTipo($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)];
    
break;
case 62:

        this.$ = [new VariablesTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)];
    
break;
case 65: case 70:

        this.$ = new Declaracion($$[$0-4], $$[$0], $$[$0-2], TiposSimbolo.VAR, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 66:

        this.$ = new Declaracion($$[$0-2], $$[$0], null, TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 67: case 71:

        this.$ = new Declaracion($$[$0-2], null, $$[$0], TiposSimbolo.VAR, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 68:

        this.$ = new Declaracion($$[$0], null, null, TiposSimbolo.VAR, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 69:

        this.$ = new DeclaracionVarType($$[$0-6], $$[$0-1], $$[$0-4], TiposSimbolo.VAR, _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 72: case 75:

        this.$ = new Declaracion($$[$0-4], $$[$0], $$[$0-2], TiposSimbolo.CONST, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 73:

        this.$ = new Declaracion($$[$0-2], $$[$0], null, TiposSimbolo.CONST, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 74:

        this.$ = new DeclaracionVarType($$[$0-7], $$[$0-1], $$[$0-4], TiposSimbolo.CONST, _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 76:

        $$[$0-4].push(new ValoresTipo($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = $$[$0-4];
    
break;
case 77:

        $$[$0-3].push(new ValoresTipo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = $$[$0-3];
    
break;
case 78:

        this.$ = [new ValoresTipo($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)];
    
break;
case 79:

        this.$ = [new ValoresTipo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)];
    
break;
case 80:

        this.$ = new Relacional($$[$0], null, OperacionesLogicas.NEGADO, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 81:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.AND, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 82:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.OR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 83:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 84:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.NOIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 85:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 86:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 87:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 88:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionesLogicas.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 89:

        this.$ = new Aritmeticas($$[$0], null, OpcionesAritmeticas.NEGATIVO, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 90:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 91:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 92:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.POR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 93:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 94:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 95:

        this.$ = new Aritmeticas($$[$0-2], $$[$0], OpcionesAritmeticas.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 97:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 98:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 99: case 100:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 101:

        this.$ = new Variable($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 102:

        let a = $$[$0-1]
        a.concat("." + $$[$0]);
        this.$ = new Variable($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 104:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 3)
    
break;
case 107:

        let aux = $$[$0-2];
        aux.concat("." + $$[$0]);
        this.$ = aux;
    
break;
case 108:

        let p = ".";
        p.concat($$[$0]);
        this.$ = p;
    
break;
case 109:

        this.$ = new Llamada($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 110:

        this.$ = new Llamada($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 111:

        this.$ = new Imprimir([], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 112:

        this.$ = new Imprimir($$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 113:

        $$[$0-2].push($$[$0])
        this.$ = $$[$0-2];
    
break;
case 115:

        this.$ = Type.CADENA;
    
break;
case 116:

        this.$ = Type.NUMERO;
    
break;
case 117:

        this.$ = Type.BOOLEANO
    
break;
case 118:

        this.$ = Type.VOID;
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:24,14:25,15:26,16:27,17:28,18:$V0,19:$V1,20:23,23:$V2,24:$V3,25:$V4,26:$V5,28:22,39:$V6,40:$V7,41:$V8,48:$V9,51:20,54:$Va,59:$Vb,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{1:[3]},{5:[1,37],6:38,7:4,9:5,10:6,11:7,12:8,13:24,14:25,15:26,16:27,17:28,18:$V0,19:$V1,20:23,23:$V2,24:$V3,25:$V4,26:$V5,28:22,39:$V6,40:$V7,41:$V8,48:$V9,51:20,54:$Va,59:$Vb,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},o($Vk,[2,3]),{8:[1,39]},{8:[1,40]},{8:[1,41],21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},o($Vk,[2,7]),o($Vk,[2,8]),{26:[1,57]},{26:[1,58]},{26:[1,59]},{10:60,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:62,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:63,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},o($VB,[2,97]),o($VB,[2,98]),o($VB,[2,99]),o($VB,[2,100]),o($VC,$VD,{52:64,24:$VE,27:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,80:$VO}),o($VB,[2,103]),o($VB,[2,104]),o($VB,[2,105]),o($VB,[2,106]),o($VP,[2,9]),o($VP,[2,10]),o($VP,[2,11]),o($VP,[2,12]),o($VP,[2,13]),{8:[1,76]},{8:[1,77],10:78,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{80:[1,79]},{24:[1,80]},{24:[1,81]},{24:[1,82]},{30:83,42:$VQ},{24:[1,85]},{1:[2,1]},o($Vk,[2,2]),o($Vk,[2,4]),o($Vk,[2,5]),o($Vk,[2,6]),{10:86,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:87,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:88,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:89,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:90,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:91,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:92,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:93,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:94,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:95,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:96,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:97,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:98,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:99,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:100,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{8:[2,68],22:[1,101],27:[1,102]},{22:[1,103],27:[1,104]},{27:[1,105]},o($VB,[2,80]),o($VB,$VD,{52:106,24:$VE,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,80:$VO}),o($VR,[2,89],{74:$Vz}),{21:$Vl,29:[1,107],61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},o($VC,$VS,{27:$VT,80:$VU}),{10:111,20:23,24:$V3,26:$VA,28:22,42:[1,110],51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:114,20:23,24:$V3,26:$VA,28:22,29:[1,112],51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,81:113,82:$Vj},o($VB,[2,20]),o($VB,[2,21]),{10:115,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:116,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:117,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:118,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:119,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:120,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{26:[1,121]},o($VP,[2,14]),o($VP,[2,15]),{8:[1,122],21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},{83:[1,123]},{10:124,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:125,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:126,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{40:[1,127]},{7:130,11:132,12:133,13:24,14:25,15:26,16:27,17:28,18:$V0,19:$V1,23:$V2,25:$V4,26:$VV,39:$V6,40:$V7,41:$V8,44:[1,129],46:128,48:$V9,51:131,59:$Vb,82:$Vj},{25:[1,135],26:[1,136]},o([8,21,22,26,29,44,57,61,62],[2,81],{63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o([8,21,22,26,29,44,57,62],[2,82],{61:$Vm,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($VW,[2,83],{65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($VW,[2,84],{65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($VX,[2,85],{69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($VX,[2,86],{69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($VX,[2,87],{69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($VX,[2,88],{69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o([8,21,22,26,29,44,57,61,62,63,64,65,66,67,68,69,70],[2,90],{71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o([8,21,22,26,29,44,57,61,62,63,64,65,66,67,68,69],[2,91],{70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($VR,[2,92],{74:$Vz}),o([8,21,22,26,29,44,57,61,62,63,64,65,66,67,68,69,70,72,73],[2,93],{71:$Vw,74:$Vz}),o([8,21,22,26,29,44,57,61,62,63,64,65,66,67,68,69,70,73],[2,94],{71:$Vw,72:$Vx,74:$Vz}),o($VB,[2,95]),{21:$Vl,22:[1,137],61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},{26:[1,139],58:138,84:$VY,85:$VZ,86:$V_,87:$V$},{10:144,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{26:[1,146],58:145,84:$VY,85:$VZ,86:$V_,87:$V$},{10:147,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{42:[1,148]},o($VB,$VS,{80:$VU}),o($VB,[2,96]),{10:149,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{26:[1,150]},{26:$V01,53:151},{8:[1,153],21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},o($VB,[2,109]),{29:[1,154],57:$V11},o($V21,[2,114],{21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($V31,[2,22],{21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($V31,[2,23],{21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($V31,[2,24],{21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($V31,[2,25],{21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($V31,[2,26],{21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($V31,[2,27],{21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($V41,[2,108]),o($VP,[2,16]),{24:[1,156]},{21:$Vl,29:[1,157],61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},{21:$Vl,29:[1,158],61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},{21:$Vl,29:[1,159],61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},{24:[1,160]},{7:162,11:164,12:165,13:24,14:25,15:26,16:27,17:28,18:$V0,19:$V1,23:$V2,25:$V4,26:$VV,39:$V6,40:$V7,41:$V8,44:[1,161],48:$V9,51:163,59:$Vb,82:$Vj},o($V51,[2,44]),{8:[1,166]},{8:[1,167]},o($V61,[2,51]),o($V61,[2,52]),{24:$VE,27:$VF,52:168,80:$VO},{26:[1,169]},{27:[1,170]},{10:171,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{8:[2,67],27:[1,172]},{8:[2,71],27:[1,173]},o($V71,[2,115]),o($V71,[2,116]),o($V71,[2,117]),o($V71,[2,118]),{8:[2,66],21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},{27:[1,174]},{27:[1,175]},{8:[2,73],21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},{26:[1,177],55:176},{8:[1,178],21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},o($V41,[2,107]),{26:$V81,44:[1,179]},{22:[1,181]},o($VP,[2,55]),o($VB,[2,110]),{10:182,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{10:114,20:23,24:$V3,26:$VA,28:22,29:[1,183],51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,81:184,82:$Vj},{30:185,42:$VQ},{42:[1,186]},{30:187,42:$VQ},{10:188,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},o($V51,[2,43]),{8:[1,189]},{8:[1,190]},o($V61,[2,47]),o($V61,[2,48]),o($V61,[2,49]),o($V61,[2,50]),{27:$VT,80:$VU},{27:[1,191]},{10:192,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},o($V31,[2,17],{21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),{10:193,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{26:[1,195],42:[1,194]},{10:196,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{26:[1,198],42:[1,197]},{26:[1,200],44:[1,199]},{22:[1,201]},o($VP,[2,53]),{8:[1,202]},{22:[1,203]},{10:204,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},o($V21,[2,113],{21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($VB,[2,111]),{29:[1,205],57:$V11},o($VP,[2,39],{49:206,50:[1,207]}),{43:208,44:[1,209],45:[1,210],47:[1,211]},o($VP,[2,29]),{21:$Vl,29:[1,212],61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},o($V61,[2,45]),o($V61,[2,46]),{10:213,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{8:[1,214],21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},{8:[2,65],21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},{26:$V01,53:215},{8:[2,70]},{8:[2,72],21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},{26:$V01,53:216},{8:[2,75]},{8:[2,56]},{22:[1,217]},{26:$V91,56:218,58:219,84:$VY,85:$VZ,86:$V_,87:$V$},o($VP,[2,54]),{10:221,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},o($Va1,[2,79],{21:$Vl,57:[1,222],61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($VB,[2,112]),o($VP,[2,40]),{13:223,30:224,42:$VQ,48:$V9},{44:[1,225],45:[1,226],47:[1,227]},o($VP,[2,31]),{10:228,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},o($Vb1,[2,38]),o($VP,[2,28]),{8:[1,229],21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},{10:230,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{26:$V81,44:[1,231]},{26:$V81,44:[1,232]},{26:$V91,56:233,58:219,84:$VY,85:$VZ,86:$V_,87:$V$},o($Va1,[2,62],{8:[1,235],57:[1,234]}),o($Vc1,[2,63]),o($Vc1,[2,64]),o($Va1,[2,77],{21:$Vl,57:[1,236],61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz}),o($Va1,[2,78]),o($VP,[2,41]),o($VP,[2,42]),o($VP,[2,30]),{10:237,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{22:[1,238]},{21:$Vl,22:[1,239],61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},{10:240,20:23,24:$V3,26:$VA,28:22,51:20,60:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,82:$Vj},{8:[1,241],21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},{8:[2,69]},{8:[2,74]},o($Va1,[2,59],{8:[1,243],57:[1,242]}),o($Va1,[2,60]),o($Va1,[2,61]),o($Va1,[2,76]),{21:$Vl,22:[1,244],61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},o($Vb1,[2,35],{13:24,14:25,15:26,16:27,17:28,7:130,51:131,11:132,12:133,46:245,18:$V0,19:$V1,23:$V2,25:$V4,26:$VV,39:$V6,40:$V7,41:$V8,48:$V9,59:$Vb,82:$Vj}),o($Vb1,[2,37],{13:24,14:25,15:26,16:27,17:28,7:130,51:131,11:132,12:133,46:246,18:$V0,19:$V1,23:$V2,25:$V4,26:$VV,39:$V6,40:$V7,41:$V8,48:$V9,59:$Vb,82:$Vj}),{8:[1,247],21:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz},{26:$Vd1,28:248},o($Va1,[2,57]),o($Va1,[2,58]),o($Vb1,[2,33],{13:24,14:25,15:26,16:27,17:28,7:130,51:131,11:132,12:133,46:250,18:$V0,19:$V1,23:$V2,25:$V4,26:$VV,39:$V6,40:$V7,41:$V8,48:$V9,59:$Vb,82:$Vj}),o($Vb1,[2,34],{13:24,14:25,15:26,16:27,17:28,7:162,51:163,11:164,12:165,18:$V0,19:$V1,23:$V2,25:$V4,26:$VV,39:$V6,40:$V7,41:$V8,48:$V9,59:$Vb,82:$Vj}),o($Vb1,[2,36],{13:24,14:25,15:26,16:27,17:28,7:162,51:163,11:164,12:165,18:$V0,19:$V1,23:$V2,25:$V4,26:$VV,39:$V6,40:$V7,41:$V8,48:$V9,59:$Vb,82:$Vj}),{26:$Vd1,28:251},{29:[1,252]},{31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN},o($Vb1,[2,32],{13:24,14:25,15:26,16:27,17:28,7:162,51:163,11:164,12:165,18:$V0,19:$V1,23:$V2,25:$V4,26:$VV,39:$V6,40:$V7,41:$V8,48:$V9,59:$Vb,82:$Vj}),{29:[1,253]},{30:254,42:$VQ},{30:255,42:$VQ},o($VP,[2,19]),o($VP,[2,18])],
defaultActions: {37:[2,1],195:[2,70],198:[2,75],199:[2,56],231:[2,69],232:[2,74]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Aritmeticas } = require('../Expresiones/Aritmeticas');
    const { OpcionesAritmeticas } = require('../Expresiones/Opcionesaritmeticas');
    const { Literal } = require('../Expresiones/Literal');
    const { TiposSimbolo, Simbolo } = require('../Entorno/Simbolo');
    const { Declaracion } = require('../Instrucciones/Declaracion');
    const { Type } = require('../Retorno'); 
    const { Variable } = require('../Expresiones/Variable');
    const { DeclaracionTipos } = require('../Instrucciones/DeclaracionTipos');
    const { VariablesTipo, ValoresTipo } = require('../Expresiones/VariablesTipo');
    const { Asignacion } = require('../Instrucciones/Asignacion');
    const { DeclaracionVarType } = require('../Instrucciones/DeclaracionVarType');
    const { AsignacionVarType } = require('../Instrucciones/AsignacionVarType');
    const { Llamada } = require('../Instrucciones/Llamada');
    const { Relacional, OperacionesLogicas } = require('../Expresiones/Relacional');
    const { Imprimir } = require('../Instrucciones/Imprimir');
    const { SentenciaIf } = require('../Instrucciones/SentenciaIf');
    const { Cuerposentencia } = require('../Instrucciones/Cuerposentencia');
    const { Caso } = require('../Instrucciones/Caso');
    const { CasoDef } = require('../Instrucciones/CasoDef');
    const { SentenciaSwitch } = require('../Instrucciones/SentenciaSwitch');
    const { SentenciaWhile } = require('../Instrucciones/SentenciaWhile');
    const { SentenciaDowhile } = require('../Instrucciones/SentenciaDowhile');
    const { Incremento } = require('../Instrucciones/Incremento');
    const { SentenciaFor } = require('../Instrucciones/SentenciaFor');
    const { Funcion } = require('../Instrucciones/Funcion');
    const { SentenciaTernaria } = require('../Instrucciones/SentenciaTernaria');
    const { SentenciaReturn } = require('../Instrucciones/SentenciaReturn');
    const { Break } = require('../Instrucciones/Break');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 75
break;
case 5:return 76
break;
case 6:return 25
break;
case 7:return 59
break;
case 8:return 84
break;
case 9:return 85
break;
case 10:return 86
break;
case 11:return 87
break;
case 12:return 54
break;
case 13:return 79
break;
case 14:return 77
break;
case 15:return 78
break;
case 16:return 48
break;
case 17:return 50
break;
case 18:return 41
break;
case 19:return 45
break;
case 20:return 40
break;
case 21:return 39
break;
case 22:return 23
break;
case 23:return 'IN'
break;
case 24:return 'OF'
break;
case 25:return 18
break;
case 26:return 'CONTINUE'
break;
case 27:return 19
break;
case 28:return 'FUNCTION'
break;
case 29:return 82
break;
case 30:return 83
break;
case 31:return 'GRAFICAR_TS'
break;
case 32:return 47
break;
case 33:return 31
break;
case 34:return 32
break;
case 35:return 33
break;
case 36:return 34
break;
case 37:return 35
break;
case 38:return 36
break;
case 39:return 37
break;
case 40:return 38
break;
case 41:return 22
break;
case 42:return 8
break;
case 43:return 61
break;
case 44:return 62
break;
case 45:return 60
break;
case 46:return 73
break;
case 47:return 74
break;
case 48:return 67
break;
case 49:return 68
break;
case 50:return 63
break;
case 51:return 64
break;
case 52:return 65
break;
case 53:return 66
break;
case 54:return 27
break;
case 55:return 70
break;
case 56:return 69
break;
case 57:return 71
break;
case 58:return 72
break;
case 59:return 80
break;
case 60:return 24
break;
case 61:return 29
break;
case 62:return 57
break;
case 63:return 42
break;
case 64:return 44
break;
case 65:return 21
break;
case 66:return 26;
break;
case 67:return 5;
break;
case 68: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:(("[^\"]*")|(`[^"`"]*`)))/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:default\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\*\*=)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:%)/,/^(?:\*\*)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\?)/,/^(?:["_" | a-z | A-Z]["_" | a-z | A-Z|0-9]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}